

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jun 29 19:09:07 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53  0000                     
    54                           ; Version 1.45
    55                           ; Generated 16/11/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  003026                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _LCD_INIT_STRING
    94  003026  28                 	db	40
    95  003027  0C                 	db	12
    96  003028  01                 	db	1
    97  003029  06                 	db	6
    98                           
    99                           	psect	smallconst
   100  001000                     __psmallconst:
   101                           	opt stack 0
   102  001000  00                 	db	0
   103  001001                     _dpowers:
   104                           	opt stack 0
   105  001001  0001               	dw	1
   106  001003  0000               	dw	0
   107  001005  000A               	dw	10
   108  001007  0000               	dw	0
   109  001009  0064               	dw	100
   110  00100B  0000               	dw	0
   111  00100D  03E8               	dw	1000
   112  00100F  0000               	dw	0
   113  001011  2710               	dw	10000
   114  001013  0000               	dw	0
   115  001015  86A0               	dw	34464
   116  001017  0001               	dw	1
   117  001019  4240               	dw	16960
   118  00101B  000F               	dw	15
   119  00101D  9680               	dw	38528
   120  00101F  0098               	dw	152
   121  001021  E100               	dw	57600
   122  001023  05F5               	dw	1525
   123  001025  CA00               	dw	51712
   124  001027  3B9A               	dw	15258
   125  001029                     __end_of_dpowers:
   126                           	opt stack 0
   127  001029                     __powers_:
   128                           	opt stack 0
   129  001029  00                 	db	0
   130  00102A  80                 	db	128
   131  00102B  3F                 	db	63
   132  00102C  00                 	db	0
   133  00102D  20                 	db	32
   134  00102E  41                 	db	65
   135  00102F  00                 	db	0
   136  001030  C8                 	db	200
   137  001031  42                 	db	66
   138  001032  00                 	db	0
   139  001033  7A                 	db	122
   140  001034  44                 	db	68
   141  001035  40                 	db	64
   142  001036  1C                 	db	28
   143  001037  46                 	db	70
   144  001038  50                 	db	80
   145  001039  C3                 	db	195
   146  00103A  47                 	db	71
   147  00103B  24                 	db	36
   148  00103C  74                 	db	116
   149  00103D  49                 	db	73
   150  00103E  97                 	db	151
   151  00103F  18                 	db	24
   152  001040  4B                 	db	75
   153  001041  BC                 	db	188
   154  001042  BE                 	db	190
   155  001043  4C                 	db	76
   156  001044  6B                 	db	107
   157  001045  6E                 	db	110
   158  001046  4E                 	db	78
   159  001047  03                 	db	3
   160  001048  15                 	db	21
   161  001049  50                 	db	80
   162  00104A  79                 	db	121
   163  00104B  AD                 	db	173
   164  00104C  60                 	db	96
   165  00104D  F3                 	db	243
   166  00104E  49                 	db	73
   167  00104F  71                 	db	113
   168  001050                     __end_of__powers_:
   169                           	opt stack 0
   170  001050                     __npowers_:
   171                           	opt stack 0
   172  001050  00                 	db	0
   173  001051  80                 	db	128
   174  001052  3F                 	db	63
   175  001053  CD                 	db	205
   176  001054  CC                 	db	204
   177  001055  3D                 	db	61
   178  001056  D7                 	db	215
   179  001057  23                 	db	35
   180  001058  3C                 	db	60
   181  001059  12                 	db	18
   182  00105A  83                 	db	131
   183  00105B  3A                 	db	58
   184  00105C  B7                 	db	183
   185  00105D  D1                 	db	209
   186  00105E  38                 	db	56
   187  00105F  C6                 	db	198
   188  001060  27                 	db	39
   189  001061  37                 	db	55
   190  001062  38                 	db	56
   191  001063  86                 	db	134
   192  001064  35                 	db	53
   193  001065  C0                 	db	192
   194  001066  D6                 	db	214
   195  001067  33                 	db	51
   196  001068  CC                 	db	204
   197  001069  2B                 	db	43
   198  00106A  32                 	db	50
   199  00106B  70                 	db	112
   200  00106C  89                 	db	137
   201  00106D  30                 	db	48
   202  00106E  E7                 	db	231
   203  00106F  DB                 	db	219
   204  001070  2E                 	db	46
   205  001071  E5                 	db	229
   206  001072  3C                 	db	60
   207  001073  1E                 	db	30
   208  001074  42                 	db	66
   209  001075  A2                 	db	162
   210  001076  0D                 	db	13
   211  001077                     __end_of__npowers_:
   212                           	opt stack 0
   213  0000                     _TXREG	set	4013
   214  0000                     _PIR1bits	set	3998
   215  0000                     _RCREG	set	4014
   216  0000                     _RCSTAbits	set	4011
   217  0000                     _RCSTA	set	4011
   218  0000                     _TXSTAbits	set	4012
   219  0000                     _SPBRGH	set	4016
   220  0000                     _SPBRG	set	4015
   221  0000                     _TXSTA	set	4012
   222  0000                     _BAUDCONbits	set	4024
   223  0000                     _ADRESL	set	4035
   224  0000                     _ADRESH	set	4036
   225  0000                     _ADCON2	set	4032
   226  0000                     _ADCON0bits	set	4034
   227  0000                     _ADCON0	set	4034
   228  0000                     _INTCON	set	4082
   229  0000                     _TRISC	set	3988
   230  0000                     _TRISE	set	3990
   231  0000                     _TRISD	set	3989
   232  0000                     _TRISB	set	3987
   233  0000                     _TRISA	set	3986
   234  0000                     _LATE	set	3981
   235  0000                     _LATD	set	3980
   236  0000                     _LATC	set	3979
   237  0000                     _LATB	set	3978
   238  0000                     _LATA	set	3977
   239  0000                     _ADCON1	set	4033
   240  001077                     STR_1:
   241  001077  54                 	db	84	;'T'
   242  001078  61                 	db	97	;'a'
   243  001079  6C                 	db	108	;'l'
   244  00107A  61                 	db	97	;'a'
   245  00107B  26                 	db	38
   246  00107C  52                 	db	82	;'R'
   247  00107D  61                 	db	97	;'a'
   248  00107E  79                 	db	121	;'y'
   249  00107F  68                 	db	104	;'h'
   250  001080  61                 	db	97	;'a'
   251  001081  6E                 	db	110	;'n'
   252  001082  00                 	db	0
   253  001083                     STR_3:
   254  001083  56                 	db	86	;'V'
   255  001084  31                 	db	49	;'1'
   256  001085  3D                 	db	61	;'='
   257  001086  25                 	db	37
   258  001087  34                 	db	52	;'4'
   259  001088  2E                 	db	46
   260  001089  32                 	db	50	;'2'
   261  00108A  66                 	db	102	;'f'
   262  00108B  56                 	db	86	;'V'
   263  00108C  20                 	db	32
   264  00108D  00                 	db	0
   265  00108E                     STR_4:
   266  00108E  54                 	db	84	;'T'
   267  00108F  3D                 	db	61	;'='
   268  001090  25                 	db	37
   269  001091  34                 	db	52	;'4'
   270  001092  2E                 	db	46
   271  001093  32                 	db	50	;'2'
   272  001094  66                 	db	102	;'f'
   273  001095  00                 	db	0
   274  0000                     
   275                           ; #config settings
   276  001096  00                 	db	0	; dummy byte at the end
   277  0000                     
   278                           	psect	cinit
   279  002E98                     __pcinit:
   280                           	opt stack 0
   281  002E98                     start_initialization:
   282                           	opt stack 0
   283  002E98                     __initialization:
   284                           	opt stack 0
   285                           
   286                           ; Initialize objects allocated to COMRAM (4 bytes)
   287                           ; load TBLPTR registers with __pidataCOMRAM
   288  002E98  0E26               	movlw	low __pidataCOMRAM
   289  002E9A  6EF6               	movwf	tblptrl,c
   290  002E9C  0E30               	movlw	high __pidataCOMRAM
   291  002E9E  6EF7               	movwf	tblptrh,c
   292  002EA0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   293  002EA2  6EF8               	movwf	tblptru,c
   294  002EA4  EE00  F066         	lfsr	0,__pdataCOMRAM
   295  002EA8  EE10 F004          	lfsr	1,4
   296  002EAC                     copy_data0:
   297  002EAC  0009               	tblrd		*+
   298  002EAE  CFF5 FFEE          	movff	tablat,postinc0
   299  002EB2  50E5               	movf	postdec1,w,c
   300  002EB4  50E1               	movf	fsr1l,w,c
   301  002EB6  E1FA               	bnz	copy_data0
   302  002EB8                     end_of_initialization:
   303                           	opt stack 0
   304  002EB8                     __end_of__initialization:
   305                           	opt stack 0
   306  002EB8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   307  002EBA  6EF8               	movwf	tblptru,c
   308  002EBC  0100               	movlb	0
   309  002EBE  EF86  F010         	goto	_main	;jump to C main() function
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           postdec1	equ	0xFE5
   316                           fsr1l	equ	0xFE1
   317                           
   318                           	psect	dataCOMRAM
   319  000066                     __pdataCOMRAM:
   320                           	opt stack 0
   321  000066                     _LCD_INIT_STRING:
   322                           	opt stack 0
   323  000066                     	ds	4
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           tblptrl	equ	0xFF6
   327                           tablat	equ	0xFF5
   328                           postinc0	equ	0xFEE
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	cstackBANK0
   333  000080                     __pcstackBANK0:
   334                           	opt stack 0
   335  000080                     main@Buffer:
   336                           	opt stack 0
   337                           
   338                           ; 100 bytes @ 0x0
   339  000080                     	ds	100
   340  0000E4                     _main$1105:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0x64
   344  0000E4                     	ds	3
   345  0000E7                     main@LastReceivedChar:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x67
   349  0000E7                     	ds	1
   350  0000E8                     main@voltage:
   351                           	opt stack 0
   352                           
   353                           ; 3 bytes @ 0x68
   354  0000E8                     	ds	3
   355  0000EB                     main@Column_For_LCD:
   356                           	opt stack 0
   357                           
   358                           ; 2 bytes @ 0x6B
   359  0000EB                     	ds	2
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           postinc0	equ	0xFEE
   365                           postdec1	equ	0xFE5
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	cstackCOMRAM
   369  000001                     __pcstackCOMRAM:
   370                           	opt stack 0
   371  000001                     ??_isdigit:
   372  000001                     ??_delay_cycles:
   373  000001                     ?_strlen:
   374                           	opt stack 0
   375  000001                     ?_read_adc_raw_no_lib:
   376                           	opt stack 0
   377  000001                     ?___awmod:
   378                           	opt stack 0
   379  000001                     ?___ftpack:
   380                           	opt stack 0
   381  000001                     ?___ftneg:
   382                           	opt stack 0
   383  000001                     ?__tdiv_to_l_:
   384                           	opt stack 0
   385  000001                     ?__div_to_l_:
   386                           	opt stack 0
   387  000001                     ?___lldiv:
   388                           	opt stack 0
   389  000001                     ?___llmod:
   390                           	opt stack 0
   391  000001                     setupSerial@dummy:
   392                           	opt stack 0
   393  000001                     read_byte_no_lib@c:
   394                           	opt stack 0
   395  000001                     send_byte_no_lib@c:
   396                           	opt stack 0
   397  000001                     delay_ms@n:
   398                           	opt stack 0
   399  000001                     ___awmod@dividend:
   400                           	opt stack 0
   401  000001                     strlen@s:
   402                           	opt stack 0
   403  000001                     __div_to_l_@f1:
   404                           	opt stack 0
   405  000001                     ___ftpack@arg:
   406                           	opt stack 0
   407  000001                     __tdiv_to_l_@f1:
   408                           	opt stack 0
   409  000001                     ___ftge@ff1:
   410                           	opt stack 0
   411  000001                     ___ftneg@f1:
   412                           	opt stack 0
   413  000001                     ___lldiv@dividend:
   414                           	opt stack 0
   415  000001                     ___llmod@dividend:
   416                           	opt stack 0
   417                           
   418                           ; 4 bytes @ 0x0
   419  000001                     	ds	1
   420  000002                     _isdigit$755:
   421                           	opt stack 0
   422  000002                     send_string_no_lib@p:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x1
   426  000002                     	ds	1
   427  000003                     ??_strlen:
   428  000003                     ??_read_adc_raw_no_lib:
   429  000003                     isdigit@c:
   430                           	opt stack 0
   431  000003                     delay_ms@i:
   432                           	opt stack 0
   433  000003                     ___awmod@divisor:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437  000003                     	ds	1
   438  000004                     delay_cycles@n:
   439                           	opt stack 0
   440  000004                     ___ftpack@exp:
   441                           	opt stack 0
   442  000004                     __div_to_l_@f2:
   443                           	opt stack 0
   444  000004                     __tdiv_to_l_@f2:
   445                           	opt stack 0
   446  000004                     ___ftge@ff2:
   447                           	opt stack 0
   448                           
   449                           ; 3 bytes @ 0x3
   450  000004                     	ds	1
   451  000005                     ___awmod@counter:
   452                           	opt stack 0
   453  000005                     ___ftpack@sign:
   454                           	opt stack 0
   455  000005                     delay_cycles@x:
   456                           	opt stack 0
   457  000005                     read_adc_raw_no_lib@raw_value:
   458                           	opt stack 0
   459  000005                     strlen@cp:
   460                           	opt stack 0
   461  000005                     ___lldiv@divisor:
   462                           	opt stack 0
   463  000005                     ___llmod@divisor:
   464                           	opt stack 0
   465                           
   466                           ; 4 bytes @ 0x4
   467  000005                     	ds	1
   468  000006                     ??___ftpack:
   469  000006                     ___awmod@sign:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x5
   473  000006                     	ds	1
   474  000007                     ??__tdiv_to_l_:
   475  000007                     ??_lcd_send_nibble:
   476  000007                     ??___ftge:
   477  000007                     ?___awdiv:
   478                           	opt stack 0
   479  000007                     read_adc_raw_no_lib@channel:
   480                           	opt stack 0
   481  000007                     ___awdiv@dividend:
   482                           	opt stack 0
   483  000007                     __div_to_l_@quot:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x6
   487  000007                     	ds	1
   488  000008                     lcd_send_nibble@n:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x7
   492  000008                     	ds	1
   493  000009                     ?___lltoft:
   494                           	opt stack 0
   495  000009                     lcd_send_byte@n:
   496                           	opt stack 0
   497  000009                     ___llmod@counter:
   498                           	opt stack 0
   499  000009                     ___awdiv@divisor:
   500                           	opt stack 0
   501  000009                     ___lldiv@quotient:
   502                           	opt stack 0
   503  000009                     ___lltoft@c:
   504                           	opt stack 0
   505                           
   506                           ; 4 bytes @ 0x8
   507  000009                     	ds	1
   508  00000A                     lcd_send_byte@cm_data:
   509                           	opt stack 0
   510  00000A                     __tdiv_to_l_@quot:
   511                           	opt stack 0
   512                           
   513                           ; 4 bytes @ 0x9
   514  00000A                     	ds	1
   515  00000B                     lcd_init@i:
   516                           	opt stack 0
   517  00000B                     lcd_gotoxy@y:
   518                           	opt stack 0
   519  00000B                     ___awdiv@counter:
   520                           	opt stack 0
   521  00000B                     __div_to_l_@cntr:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0xA
   525  00000B                     	ds	1
   526  00000C                     lcd_gotoxy@x:
   527                           	opt stack 0
   528  00000C                     ___awdiv@sign:
   529                           	opt stack 0
   530  00000C                     __div_to_l_@exp1:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0xB
   534  00000C                     	ds	1
   535  00000D                     ??___lltoft:
   536  00000D                     lcd_gotoxy@address:
   537                           	opt stack 0
   538  00000D                     ___lldiv@counter:
   539                           	opt stack 0
   540  00000D                     ___awdiv@quotient:
   541                           	opt stack 0
   542                           
   543                           ; 2 bytes @ 0xC
   544  00000D                     	ds	1
   545  00000E                     lcd_putc@c:
   546                           	opt stack 0
   547  00000E                     __tdiv_to_l_@cntr:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0xD
   551  00000E                     	ds	1
   552  00000F                     ?___wmul:
   553                           	opt stack 0
   554  00000F                     __tdiv_to_l_@exp1:
   555                           	opt stack 0
   556  00000F                     lcd_puts@s:
   557                           	opt stack 0
   558  00000F                     ___wmul@multiplier:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0xE
   562  00000F                     	ds	2
   563  000011                     ___lltoft@exp:
   564                           	opt stack 0
   565  000011                     ___wmul@multiplicand:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x10
   569  000011                     	ds	2
   570  000013                     ___wmul@product:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x12
   574  000013                     	ds	2
   575  000015                     ?___ftmul:
   576                           	opt stack 0
   577  000015                     ?___awtoft:
   578                           	opt stack 0
   579  000015                     ___awtoft@c:
   580                           	opt stack 0
   581  000015                     ___ftmul@f1:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x14
   585  000015                     	ds	3
   586  000018                     ___awtoft@sign:
   587                           	opt stack 0
   588  000018                     ___ftmul@f2:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x17
   592  000018                     	ds	3
   593  00001B                     ??___ftmul:
   594                           
   595                           ; 1 bytes @ 0x1A
   596  00001B                     	ds	3
   597  00001E                     ___ftmul@exp:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x1D
   601  00001E                     	ds	1
   602  00001F                     ___ftmul@f3_as_product:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x1E
   606  00001F                     	ds	3
   607  000022                     ___ftmul@cntr:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x21
   611  000022                     	ds	1
   612  000023                     ___ftmul@sign:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x22
   616  000023                     	ds	1
   617  000024                     ?___ftdiv:
   618                           	opt stack 0
   619  000024                     ?_fround:
   620                           	opt stack 0
   621  000024                     ?_scale:
   622                           	opt stack 0
   623  000024                     ___ftdiv@f1:
   624                           	opt stack 0
   625                           
   626                           ; 3 bytes @ 0x23
   627  000024                     	ds	3
   628  000027                     ___ftdiv@f2:
   629                           	opt stack 0
   630  000027                     _fround$1107:
   631                           	opt stack 0
   632  000027                     _scale$1108:
   633                           	opt stack 0
   634                           
   635                           ; 3 bytes @ 0x26
   636  000027                     	ds	3
   637  00002A                     ??___ftdiv:
   638  00002A                     scale@scl:
   639                           	opt stack 0
   640  00002A                     _fround$1106:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x29
   644  00002A                     	ds	1
   645  00002B                     ?___fttol:
   646                           	opt stack 0
   647  00002B                     ___fttol@f1:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x2A
   651  00002B                     	ds	2
   652  00002D                     fround@prec:
   653                           	opt stack 0
   654  00002D                     ___ftdiv@cntr:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x2C
   658  00002D                     	ds	1
   659  00002E                     ?___ftadd:
   660                           	opt stack 0
   661  00002E                     ___ftadd@f1:
   662                           	opt stack 0
   663  00002E                     ___ftdiv@f3:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x2D
   667  00002E                     	ds	1
   668  00002F                     ??___fttol:
   669                           
   670                           ; 1 bytes @ 0x2E
   671  00002F                     	ds	2
   672  000031                     ___ftdiv@exp:
   673                           	opt stack 0
   674  000031                     ___ftadd@f2:
   675                           	opt stack 0
   676                           
   677                           ; 3 bytes @ 0x30
   678  000031                     	ds	1
   679  000032                     ___ftdiv@sign:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x31
   683  000032                     	ds	1
   684  000033                     ?_read_adc_voltage:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x32
   688  000033                     	ds	1
   689  000034                     ??___ftadd:
   690  000034                     ___fttol@sign1:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x33
   694  000034                     	ds	1
   695  000035                     ___fttol@lval:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0x34
   699  000035                     	ds	1
   700  000036                     read_adc_voltage@temp:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x35
   704  000036                     	ds	1
   705  000037                     ___ftadd@sign:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x36
   709  000037                     	ds	1
   710  000038                     ___ftadd@exp2:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x37
   714  000038                     	ds	1
   715  000039                     ___ftadd@exp1:
   716                           	opt stack 0
   717  000039                     ___fttol@exp1:
   718                           	opt stack 0
   719  000039                     read_adc_voltage@voltage:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x38
   723  000039                     	ds	1
   724  00003A                     ?___ftsub:
   725                           	opt stack 0
   726  00003A                     ___ftsub@f1:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x39
   730  00003A                     	ds	2
   731  00003C                     read_adc_voltage@raw_value:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x3B
   735  00003C                     	ds	1
   736  00003D                     ___ftsub@f2:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x3C
   740  00003D                     	ds	1
   741  00003E                     read_adc_voltage@channel:
   742                           	opt stack 0
   743                           
   744                           ; 1 bytes @ 0x3D
   745  00003E                     	ds	2
   746  000040                     ?_sprintf:
   747                           	opt stack 0
   748  000040                     sprintf@sp:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x3F
   752  000040                     	ds	2
   753  000042                     sprintf@f:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x41
   757  000042                     	ds	5
   758  000047                     ??_sprintf:
   759                           
   760                           ; 1 bytes @ 0x46
   761  000047                     	ds	6
   762  00004D                     _sprintf$1109:
   763                           	opt stack 0
   764                           
   765                           ; 3 bytes @ 0x4C
   766  00004D                     	ds	3
   767  000050                     sprintf@ap:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x4F
   771  000050                     	ds	2
   772  000052                     sprintf@val:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x51
   776  000052                     	ds	4
   777  000056                     sprintf@flag:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x55
   781  000056                     	ds	2
   782  000058                     sprintf@width:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x57
   786  000058                     	ds	2
   787  00005A                     sprintf@tmpval:
   788                           	opt stack 0
   789                           
   790                           ; 4 bytes @ 0x59
   791  00005A                     	ds	4
   792  00005E                     sprintf@exp:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x5D
   796  00005E                     	ds	2
   797  000060                     sprintf@fval:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x5F
   801  000060                     	ds	3
   802  000063                     sprintf@prec:
   803                           	opt stack 0
   804                           
   805                           ; 2 bytes @ 0x62
   806  000063                     	ds	2
   807  000065                     sprintf@c:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x64
   811  000065                     	ds	1
   812  000066                     tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           postinc0	equ	0xFEE
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           ; 1 bytes @ 0x65
   821 ;;
   822 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   823 ;;
   824 ;; *************** function _main *****************
   825 ;; Defined at:
   826 ;;		line 85 in file "basic.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;		None
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  Buffer        100    0[BANK0 ] unsigned char [100]
   831 ;;  voltage         3  104[BANK0 ] float 
   832 ;;  Column_For_L    2  107[BANK0 ] int 
   833 ;;  LastReceived    1  103[BANK0 ] unsigned char 
   834 ;; Return value:  Size  Location     Type
   835 ;;                  1    wreg      void 
   836 ;; Registers used:
   837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   838 ;; Tracked objects:
   839 ;;		On entry : 0/0
   840 ;;		On exit  : 0/0
   841 ;;		Unchanged: 0/0
   842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   844 ;;      Locals:         0     109       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;      Totals:         0     109       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   847 ;;Total ram usage:      109 bytes
   848 ;; Hardware stack levels required when called:    6
   849 ;; This function calls:
   850 ;;		___ftdiv
   851 ;;		___ftmul
   852 ;;		_delay_ms
   853 ;;		_initPorts
   854 ;;		_init_adc_no_lib
   855 ;;		_is_byte_available
   856 ;;		_lcd_gotoxy
   857 ;;		_lcd_init
   858 ;;		_lcd_putc
   859 ;;		_lcd_puts
   860 ;;		_read_adc_voltage
   861 ;;		_read_byte_no_lib
   862 ;;		_send_string_no_lib
   863 ;;		_setupSerial
   864 ;;		_sprintf
   865 ;;		_strlen
   866 ;; This function is called by:
   867 ;;		Startup code after reset
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871                           	psect	text0
   872  00210C                     __ptext0:
   873                           	opt stack 0
   874  00210C                     _main:
   875                           	opt stack 25
   876                           
   877                           ;basic.c: 87: float voltage;
   878                           ;basic.c: 88: int Column_For_LCD=1;
   879                           
   880                           ;incstack = 0
   881  00210C  0E00               	movlw	0
   882  00210E  0100               	movlb	0	; () banked
   883  002110  6FEC               	movwf	(main@Column_For_LCD+1)& (0+255),b
   884  002112  0E01               	movlw	1
   885  002114  6FEB               	movwf	main@Column_For_LCD& (0+255),b
   886                           
   887                           ;basic.c: 89: char Buffer[100];
   888                           ;basic.c: 90: unsigned char LastReceivedChar;
   889                           ;basic.c: 93: INTCON = 0;
   890  002116  0E00               	movlw	0
   891  002118  6EF2               	movwf	intcon,c	;volatile
   892                           
   893                           ; BSR set to: 0
   894                           ;basic.c: 94: initPorts();
   895  00211A  EC76  F017         	call	_initPorts	;wreg free
   896                           
   897                           ;basic.c: 95: setupSerial();
   898  00211E  ECC3  F017         	call	_setupSerial	;wreg free
   899                           
   900                           ;basic.c: 96: lcd_init();
   901  002122  ECC5  F015         	call	_lcd_init	;wreg free
   902                           
   903                           ;basic.c: 97: init_adc_no_lib();
   904  002126  EC09  F018         	call	_init_adc_no_lib	;wreg free
   905                           
   906                           ;basic.c: 100: lcd_putc('\f');
   907  00212A  0E0C               	movlw	12
   908  00212C  EC4F  F016         	call	_lcd_putc
   909                           
   910                           ;basic.c: 101: lcd_gotoxy(1, 1);
   911  002130  0E01               	movlw	1
   912  002132  6E0B               	movwf	lcd_gotoxy@y,c
   913  002134  0E01               	movlw	1
   914  002136  EC9E  F016         	call	_lcd_gotoxy
   915                           
   916                           ;basic.c: 102: lcd_puts("Tala&Rayhan");
   917  00213A  0E77               	movlw	low STR_1
   918  00213C  6E0F               	movwf	lcd_puts@s,c
   919  00213E  0E10               	movlw	high STR_1
   920  002140  6E10               	movwf	lcd_puts@s+1,c
   921  002142  EC24  F016         	call	_lcd_puts	;wreg free
   922                           
   923                           ;basic.c: 103: delay_ms(20000);
   924  002146  0E4E               	movlw	78
   925  002148  6E02               	movwf	delay_ms@n+1,c
   926  00214A  0E20               	movlw	32
   927  00214C  6E01               	movwf	delay_ms@n,c
   928  00214E  EC9E  F017         	call	_delay_ms	;wreg free
   929                           
   930                           ;basic.c: 104: send_string_no_lib("Tala&Rayhan");
   931  002152  0E77               	movlw	low STR_1
   932  002154  6E02               	movwf	send_string_no_lib@p,c
   933  002156  0E10               	movlw	high STR_1
   934  002158  6E03               	movwf	send_string_no_lib@p+1,c
   935  00215A  EC61  F017         	call	_send_string_no_lib	;wreg free
   936                           
   937                           ;basic.c: 105: lcd_putc('\f');
   938  00215E  0E0C               	movlw	12
   939  002160  EC4F  F016         	call	_lcd_putc
   940  002164                     l66:
   941  002164  0004               	clrwdt		;# 
   942                           
   943                           ;basic.c: 111: lcd_gotoxy(1, 1);
   944  002166  0E01               	movlw	1
   945  002168  6E0B               	movwf	lcd_gotoxy@y,c
   946  00216A  0E01               	movlw	1
   947  00216C  EC9E  F016         	call	_lcd_gotoxy
   948                           
   949                           ;basic.c: 112: voltage = read_adc_voltage(0);
   950  002170  0E00               	movlw	0
   951  002172  ECD0  F013         	call	_read_adc_voltage
   952  002176  C033  F0E8         	movff	?_read_adc_voltage,main@voltage
   953  00217A  C034  F0E9         	movff	?_read_adc_voltage+1,main@voltage+1
   954  00217E  C035  F0EA         	movff	?_read_adc_voltage+2,main@voltage+2
   955                           
   956                           ;basic.c: 113: sprintf(Buffer, "V1=%4.2fV ",voltage);
   957  002182  0E80               	movlw	low main@Buffer
   958  002184  6E40               	movwf	sprintf@sp,c
   959  002186  0E00               	movlw	high main@Buffer
   960  002188  6E41               	movwf	sprintf@sp+1,c
   961  00218A  0E83               	movlw	low STR_3
   962  00218C  6E42               	movwf	sprintf@f,c
   963  00218E  0E10               	movlw	high STR_3
   964  002190  6E43               	movwf	sprintf@f+1,c
   965  002192  C0E8  F044         	movff	main@voltage,?_sprintf+4
   966  002196  C0E9  F045         	movff	main@voltage+1,?_sprintf+5
   967  00219A  C0EA  F046         	movff	main@voltage+2,?_sprintf+6
   968  00219E  EC4C  F008         	call	_sprintf	;wreg free
   969                           
   970                           ;basic.c: 114: voltage = read_adc_voltage(1);
   971  0021A2  0E01               	movlw	1
   972  0021A4  ECD0  F013         	call	_read_adc_voltage
   973  0021A8  C033  F0E8         	movff	?_read_adc_voltage,main@voltage
   974  0021AC  C034  F0E9         	movff	?_read_adc_voltage+1,main@voltage+1
   975  0021B0  C035  F0EA         	movff	?_read_adc_voltage+2,main@voltage+2
   976                           
   977                           ;basic.c: 115: sprintf(Buffer + strlen(Buffer) , "T=%4.2f",((voltage*100)/5));
   978  0021B4  0E00               	movlw	0
   979  0021B6  6E18               	movwf	___ftmul@f2,c
   980  0021B8  0EC8               	movlw	200
   981  0021BA  6E19               	movwf	___ftmul@f2+1,c
   982  0021BC  0E42               	movlw	66
   983  0021BE  6E1A               	movwf	___ftmul@f2+2,c
   984  0021C0  C0E8  F015         	movff	main@voltage,___ftmul@f1
   985  0021C4  C0E9  F016         	movff	main@voltage+1,___ftmul@f1+1
   986  0021C8  C0EA  F017         	movff	main@voltage+2,___ftmul@f1+2
   987  0021CC  EC69  F012         	call	___ftmul	;wreg free
   988  0021D0  C015  F024         	movff	?___ftmul,___ftdiv@f1
   989  0021D4  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
   990  0021D8  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
   991  0021DC  0E00               	movlw	0
   992  0021DE  6E27               	movwf	___ftdiv@f2,c
   993  0021E0  0EA0               	movlw	160
   994  0021E2  6E28               	movwf	___ftdiv@f2+1,c
   995  0021E4  0E40               	movlw	64
   996  0021E6  6E29               	movwf	___ftdiv@f2+2,c
   997  0021E8  EC5D  F013         	call	___ftdiv	;wreg free
   998  0021EC  C024  F0E4         	movff	?___ftdiv,_main$1105
   999  0021F0  C025  F0E5         	movff	?___ftdiv+1,_main$1105+1
  1000  0021F4  C026  F0E6         	movff	?___ftdiv+2,_main$1105+2
  1001                           
  1002                           ;basic.c: 115: sprintf(Buffer + strlen(Buffer) , "T=%4.2f",((voltage*100)/5));
  1003  0021F8  0E80               	movlw	low main@Buffer
  1004  0021FA  6E01               	movwf	strlen@s,c
  1005  0021FC  0E00               	movlw	high main@Buffer
  1006  0021FE  6E02               	movwf	strlen@s+1,c
  1007  002200  ECDF  F016         	call	_strlen	;wreg free
  1008  002204  0E80               	movlw	low main@Buffer
  1009  002206  2401               	addwf	?_strlen,w,c
  1010  002208  6E40               	movwf	sprintf@sp,c
  1011  00220A  0E00               	movlw	high main@Buffer
  1012  00220C  2002               	addwfc	?_strlen+1,w,c
  1013  00220E  6E41               	movwf	sprintf@sp+1,c
  1014  002210  0E8E               	movlw	low STR_4
  1015  002212  6E42               	movwf	sprintf@f,c
  1016  002214  0E10               	movlw	high STR_4
  1017  002216  6E43               	movwf	sprintf@f+1,c
  1018  002218  C0E4  F044         	movff	_main$1105,?_sprintf+4
  1019  00221C  C0E5  F045         	movff	_main$1105+1,?_sprintf+5
  1020  002220  C0E6  F046         	movff	_main$1105+2,?_sprintf+6
  1021  002224  EC4C  F008         	call	_sprintf	;wreg free
  1022                           
  1023                           ;basic.c: 116: lcd_puts(Buffer);
  1024  002228  0E80               	movlw	low main@Buffer
  1025  00222A  6E0F               	movwf	lcd_puts@s,c
  1026  00222C  0E00               	movlw	high main@Buffer
  1027  00222E  6E10               	movwf	lcd_puts@s+1,c
  1028  002230  EC24  F016         	call	_lcd_puts	;wreg free
  1029                           
  1030                           ;basic.c: 119: if(is_byte_available()){
  1031  002234  ECF5  F017         	call	_is_byte_available	;wreg free
  1032  002238  0900               	iorlw	0
  1033  00223A  B4D8               	btfsc	status,2,c
  1034  00223C  D793               	goto	l66
  1035                           
  1036                           ;basic.c: 120: LastReceivedChar = read_byte_no_lib();
  1037  00223E  EC0F  F018         	call	_read_byte_no_lib	;wreg free
  1038  002242  0100               	movlb	0	; () banked
  1039  002244  6FE7               	movwf	main@LastReceivedChar& (0+255),b
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;basic.c: 121: lcd_gotoxy(Column_For_LCD, 2);
  1043  002246  0E02               	movlw	2
  1044  002248  6E0B               	movwf	lcd_gotoxy@y,c
  1045  00224A  51EB               	movf	main@Column_For_LCD& (0+255),w,b
  1046  00224C  EC9E  F016         	call	_lcd_gotoxy
  1047                           
  1048                           ;basic.c: 122: lcd_putc(LastReceivedChar);
  1049  002250  0100               	movlb	0	; () banked
  1050  002252  51E7               	movf	main@LastReceivedChar& (0+255),w,b
  1051  002254  EC4F  F016         	call	_lcd_putc
  1052                           
  1053                           ;basic.c: 123: Column_For_LCD++;
  1054  002258  0100               	movlb	0	; () banked
  1055  00225A  4BEB               	infsnz	main@Column_For_LCD& (0+255),f,b
  1056  00225C  2BEC               	incf	(main@Column_For_LCD+1)& (0+255),f,b
  1057                           
  1058                           ; BSR set to: 0
  1059                           ;basic.c: 124: if(Column_For_LCD==16) {
  1060  00225E  0E10               	movlw	16
  1061  002260  19EB               	xorwf	main@Column_For_LCD& (0+255),w,b
  1062  002262  11EC               	iorwf	(main@Column_For_LCD+1)& (0+255),w,b
  1063  002264  A4D8               	btfss	status,2,c
  1064  002266  D77E               	goto	l66
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;basic.c: 125: Column_For_LCD=1;
  1068  002268  0E00               	movlw	0
  1069  00226A  6FEC               	movwf	(main@Column_For_LCD+1)& (0+255),b
  1070  00226C  0E01               	movlw	1
  1071  00226E  6FEB               	movwf	main@Column_For_LCD& (0+255),b
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;basic.c: 126: lcd_putc('\f');
  1075  002270  0E0C               	movlw	12
  1076  002272  EC4F  F016         	call	_lcd_putc
  1077  002276  D776               	goto	l66
  1078  002278                     __end_of_main:
  1079                           	opt stack 0
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           intcon	equ	0xFF2
  1085                           postinc0	equ	0xFEE
  1086                           postdec1	equ	0xFE5
  1087                           fsr1l	equ	0xFE1
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _strlen *****************
  1091 ;; Defined at:
  1092 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1095 ;;		 -> main@Buffer(100), 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  1098 ;;		 -> main@Buffer(100), 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;                  2    0[COMRAM] unsigned int 
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1109 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;Total ram usage:        6 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; This function calls:
  1115 ;;		Nothing
  1116 ;; This function is called by:
  1117 ;;		_main
  1118 ;; This function uses a non-reentrant model
  1119 ;;
  1120                           
  1121                           	psect	text1
  1122  002DBE                     __ptext1:
  1123                           	opt stack 0
  1124  002DBE                     _strlen:
  1125                           	opt stack 30
  1126                           
  1127                           ;incstack = 0
  1128  002DBE  C001  F005         	movff	strlen@s,strlen@cp
  1129  002DC2  C002  F006         	movff	strlen@s+1,strlen@cp+1
  1130  002DC6  D002               	goto	l901
  1131  002DC8  4A05               	infsnz	strlen@cp,f,c
  1132  002DCA  2A06               	incf	strlen@cp+1,f,c
  1133  002DCC                     l901:
  1134  002DCC  C005  FFD9         	movff	strlen@cp,fsr2l
  1135  002DD0  C006  FFDA         	movff	strlen@cp+1,fsr2h
  1136  002DD4  50DF               	movf	indf2,w,c
  1137  002DD6  A4D8               	btfss	status,2,c
  1138  002DD8  D7F7               	goto	l902
  1139  002DDA  C001  F003         	movff	strlen@s,??_strlen
  1140  002DDE  C002  F004         	movff	strlen@s+1,??_strlen+1
  1141  002DE2  1E03               	comf	??_strlen,f,c
  1142  002DE4  1E04               	comf	??_strlen+1,f,c
  1143  002DE6  4A03               	infsnz	??_strlen,f,c
  1144  002DE8  2A04               	incf	??_strlen+1,f,c
  1145  002DEA  5005               	movf	strlen@cp,w,c
  1146  002DEC  2403               	addwf	??_strlen,w,c
  1147  002DEE  6E01               	movwf	?_strlen,c
  1148  002DF0  5006               	movf	strlen@cp+1,w,c
  1149  002DF2  2004               	addwfc	??_strlen+1,w,c
  1150  002DF4  6E02               	movwf	?_strlen+1,c
  1151  002DF6  0012               	return	
  1152  002DF8                     __end_of_strlen:
  1153                           	opt stack 0
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           intcon	equ	0xFF2
  1159                           postinc0	equ	0xFEE
  1160                           postdec1	equ	0xFE5
  1161                           fsr1l	equ	0xFE1
  1162                           indf2	equ	0xFDF
  1163                           fsr2h	equ	0xFDA
  1164                           fsr2l	equ	0xFD9
  1165                           status	equ	0xFD8
  1166                           
  1167 ;; *************** function _sprintf *****************
  1168 ;; Defined at:
  1169 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1172 ;;		 -> main@Buffer(100), 
  1173 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1174 ;;		 -> STR_4(8), STR_3(11), 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;  tmpval          4   89[COMRAM] struct .
  1177 ;;  val             4   81[COMRAM] unsigned long 
  1178 ;;  fval            3   95[COMRAM] unsigned long 
  1179 ;;  cp              3    0        PTR const unsigned char 
  1180 ;;  prec            2   98[COMRAM] int 
  1181 ;;  exp             2   93[COMRAM] int 
  1182 ;;  width           2   87[COMRAM] int 
  1183 ;;  flag            2   85[COMRAM] unsigned short 
  1184 ;;  ap              2   79[COMRAM] PTR void [1]
  1185 ;;		 -> ?_sprintf(2), 
  1186 ;;  len             2    0        unsigned int 
  1187 ;;  c               1  100[COMRAM] char 
  1188 ;;  d               1    0        unsigned char 
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  2   63[COMRAM] int 
  1191 ;; Registers used:
  1192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1198 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1199 ;;      Locals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;Total ram usage:       38 bytes
  1203 ;; Hardware stack levels used:    1
  1204 ;; Hardware stack levels required when called:    3
  1205 ;; This function calls:
  1206 ;;		___awdiv
  1207 ;;		___ftadd
  1208 ;;		___ftge
  1209 ;;		___ftmul
  1210 ;;		___ftneg
  1211 ;;		___ftsub
  1212 ;;		___fttol
  1213 ;;		___lldiv
  1214 ;;		___llmod
  1215 ;;		___lltoft
  1216 ;;		___wmul
  1217 ;;		__div_to_l_
  1218 ;;		__tdiv_to_l_
  1219 ;;		_fround
  1220 ;;		_isdigit
  1221 ;;		_scale
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text2
  1228  001098                     __ptext2:
  1229                           	opt stack 0
  1230  001098                     _sprintf:
  1231                           	opt stack 27
  1232                           
  1233                           ;doprnt.c: 494: va_list ap;
  1234                           ;doprnt.c: 499: signed char c;
  1235                           ;doprnt.c: 501: int width;
  1236                           ;doprnt.c: 504: int prec;
  1237                           ;doprnt.c: 508: unsigned short flag;
  1238                           ;doprnt.c: 515: char d;
  1239                           ;doprnt.c: 516: double fval;
  1240                           ;doprnt.c: 517: int exp;
  1241                           ;doprnt.c: 523: union {
  1242                           ;doprnt.c: 524: unsigned long vd;
  1243                           ;doprnt.c: 525: double integ;
  1244                           ;doprnt.c: 526: } tmpval;
  1245                           ;doprnt.c: 528: unsigned long val;
  1246                           ;doprnt.c: 529: unsigned len;
  1247                           ;doprnt.c: 530: const char * cp;
  1248                           ;doprnt.c: 533: *ap = __va_start();
  1249                           
  1250                           ;incstack = 0
  1251  001098  0E44               	movlw	low (?_sprintf+4)
  1252  00109A  6E50               	movwf	sprintf@ap,c
  1253  00109C  0E00               	movlw	high (?_sprintf+4)
  1254  00109E  6E51               	movwf	sprintf@ap+1,c
  1255                           
  1256                           ;doprnt.c: 536: while(c = *f++) {
  1257  0010A0  EF6F  F00C         	goto	l308
  1258  0010A4                     
  1259                           ;doprnt.c: 538: if(c != '%')
  1260  0010A4  0E25               	movlw	37
  1261  0010A6  1865               	xorwf	sprintf@c,w,c
  1262  0010A8  B4D8               	btfsc	status,2,c
  1263  0010AA  D008               	goto	l237
  1264                           
  1265                           ;doprnt.c: 540: {
  1266                           ;doprnt.c: 541: ((*sp++ = (c)));
  1267  0010AC  C040  FFD9         	movff	sprintf@sp,fsr2l
  1268  0010B0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1269  0010B4  C065  FFDF         	movff	sprintf@c,indf2
  1270  0010B8  EF6D  F00C         	goto	l3171
  1271  0010BC                     l237:
  1272                           
  1273                           ;doprnt.c: 543: }
  1274                           ;doprnt.c: 546: width = 0;
  1275  0010BC  0E00               	movlw	0
  1276  0010BE  6E59               	movwf	sprintf@width+1,c
  1277  0010C0  0E00               	movlw	0
  1278  0010C2  6E58               	movwf	sprintf@width,c
  1279                           
  1280                           ;doprnt.c: 548: flag = 0;
  1281  0010C4  0E00               	movlw	0
  1282  0010C6  6E57               	movwf	sprintf@flag+1,c
  1283  0010C8  0E00               	movlw	0
  1284  0010CA  6E56               	movwf	sprintf@flag,c
  1285                           
  1286                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1287  0010CC  C042  FFF6         	movff	sprintf@f,tblptrl
  1288  0010D0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1289  0010D4                     	if	0	;tblptru may be non-zero
  1290  0010D4                     	endif
  1291  0010D4                     	if	0	;tblptru may be non-zero
  1292  0010D4                     	endif
  1293  0010D4  0008               	tblrd		*
  1294  0010D6  50F5               	movf	tablat,w,c
  1295  0010D8  ECE6  F017         	call	_isdigit
  1296  0010DC  A0D8               	btfss	status,0,c
  1297  0010DE  D032               	goto	u2800
  1298                           
  1299                           ;doprnt.c: 598: width = 0;
  1300  0010E0  0E00               	movlw	0
  1301  0010E2  6E59               	movwf	sprintf@width+1,c
  1302  0010E4  0E00               	movlw	0
  1303  0010E6  6E58               	movwf	sprintf@width,c
  1304  0010E8                     
  1305                           ;doprnt.c: 600: width *= 10;
  1306  0010E8  C058  F00F         	movff	sprintf@width,___wmul@multiplier
  1307  0010EC  C059  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  1308  0010F0  0E00               	movlw	0
  1309  0010F2  6E12               	movwf	___wmul@multiplicand+1,c
  1310  0010F4  0E0A               	movlw	10
  1311  0010F6  6E11               	movwf	___wmul@multiplicand,c
  1312  0010F8  EC8B  F017         	call	___wmul	;wreg free
  1313  0010FC  C00F  F058         	movff	?___wmul,sprintf@width
  1314  001100  C010  F059         	movff	?___wmul+1,sprintf@width+1
  1315                           
  1316                           ;doprnt.c: 601: width += *f++ - '0';
  1317  001104  0ED0               	movlw	208
  1318  001106  6E47               	movwf	??_sprintf& (0+255),c
  1319  001108  0EFF               	movlw	255
  1320  00110A  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1321  00110C  C042  FFF6         	movff	sprintf@f,tblptrl
  1322  001110  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1323  001114                     	if	0	;tblptru may be non-zero
  1324  001114                     	endif
  1325  001114                     	if	0	;tblptru may be non-zero
  1326  001114                     	endif
  1327  001114  0008               	tblrd		*
  1328  001116  50F5               	movf	tablat,w,c
  1329  001118  6E49               	movwf	(??_sprintf+2)& (0+255),c
  1330  00111A  6A4A               	clrf	(??_sprintf+3)& (0+255),c
  1331  00111C  5047               	movf	??_sprintf,w,c
  1332  00111E  2649               	addwf	??_sprintf+2,f,c
  1333  001120  5048               	movf	??_sprintf+1,w,c
  1334  001122  224A               	addwfc	??_sprintf+3,f,c
  1335  001124  5049               	movf	??_sprintf+2,w,c
  1336  001126  2658               	addwf	sprintf@width,f,c
  1337  001128  504A               	movf	??_sprintf+3,w,c
  1338  00112A  2259               	addwfc	sprintf@width+1,f,c
  1339  00112C  4A42               	infsnz	sprintf@f,f,c
  1340  00112E  2A43               	incf	sprintf@f+1,f,c
  1341                           
  1342                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1343  001130  C042  FFF6         	movff	sprintf@f,tblptrl
  1344  001134  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1345  001138                     	if	0	;tblptru may be non-zero
  1346  001138                     	endif
  1347  001138                     	if	0	;tblptru may be non-zero
  1348  001138                     	endif
  1349  001138  0008               	tblrd		*
  1350  00113A  50F5               	movf	tablat,w,c
  1351  00113C  ECE6  F017         	call	_isdigit
  1352  001140  B0D8               	btfsc	status,0,c
  1353  001142  D7D2               	goto	l239
  1354  001144                     u2800:
  1355                           
  1356                           ;doprnt.c: 608: }
  1357                           ;doprnt.c: 611: if(*f == '.') {
  1358  001144  C042  FFF6         	movff	sprintf@f,tblptrl
  1359  001148  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1360  00114C                     	if	0	;tblptru may be non-zero
  1361  00114C                     	endif
  1362  00114C                     	if	0	;tblptru may be non-zero
  1363  00114C                     	endif
  1364  00114C  0008               	tblrd		*
  1365  00114E  50F5               	movf	tablat,w,c
  1366  001150  0A2E               	xorlw	46
  1367  001152  A4D8               	btfss	status,2,c
  1368  001154  D02E               	goto	l241
  1369                           
  1370                           ;doprnt.c: 612: flag |= 0x4000;
  1371  001156  8C57               	bsf	sprintf@flag+1,6,c
  1372                           
  1373                           ;doprnt.c: 613: f++;
  1374  001158  4A42               	infsnz	sprintf@f,f,c
  1375  00115A  2A43               	incf	sprintf@f+1,f,c
  1376                           
  1377                           ;doprnt.c: 620: {
  1378                           ;doprnt.c: 621: prec = 0;
  1379  00115C  0E00               	movlw	0
  1380  00115E  6E64               	movwf	sprintf@prec+1,c
  1381  001160  0E00               	movlw	0
  1382  001162  6E63               	movwf	sprintf@prec,c
  1383                           
  1384                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1385  001164  D01B               	goto	l242
  1386  001166                     
  1387                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1388  001166  C063  F00F         	movff	sprintf@prec,___wmul@multiplier
  1389  00116A  C064  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1390  00116E  0E00               	movlw	0
  1391  001170  6E12               	movwf	___wmul@multiplicand+1,c
  1392  001172  0E0A               	movlw	10
  1393  001174  6E11               	movwf	___wmul@multiplicand,c
  1394  001176  EC8B  F017         	call	___wmul	;wreg free
  1395  00117A  C042  FFF6         	movff	sprintf@f,tblptrl
  1396  00117E  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1397  001182                     	if	0	;tblptru may be non-zero
  1398  001182                     	endif
  1399  001182                     	if	0	;tblptru may be non-zero
  1400  001182                     	endif
  1401  001182  0008               	tblrd		*
  1402  001184  50F5               	movf	tablat,w,c
  1403  001186  260F               	addwf	?___wmul,f,c
  1404  001188  0E00               	movlw	0
  1405  00118A  2210               	addwfc	?___wmul+1,f,c
  1406  00118C  0ED0               	movlw	208
  1407  00118E  240F               	addwf	?___wmul,w,c
  1408  001190  6E63               	movwf	sprintf@prec,c
  1409  001192  0EFF               	movlw	255
  1410  001194  2010               	addwfc	?___wmul+1,w,c
  1411  001196  6E64               	movwf	sprintf@prec+1,c
  1412  001198  4A42               	infsnz	sprintf@f,f,c
  1413  00119A  2A43               	incf	sprintf@f+1,f,c
  1414  00119C                     l242:
  1415  00119C  C042  FFF6         	movff	sprintf@f,tblptrl
  1416  0011A0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1417  0011A4                     	if	0	;tblptru may be non-zero
  1418  0011A4                     	endif
  1419  0011A4                     	if	0	;tblptru may be non-zero
  1420  0011A4                     	endif
  1421  0011A4  0008               	tblrd		*
  1422  0011A6  50F5               	movf	tablat,w,c
  1423  0011A8  ECE6  F017         	call	_isdigit
  1424  0011AC  A0D8               	btfss	status,0,c
  1425  0011AE  D009               	goto	l246
  1426  0011B0  D7DA               	goto	l243
  1427  0011B2                     l241:
  1428                           
  1429                           ;doprnt.c: 626: prec = 0;
  1430  0011B2  0E00               	movlw	0
  1431  0011B4  6E64               	movwf	sprintf@prec+1,c
  1432  0011B6  0E00               	movlw	0
  1433  0011B8  6E63               	movwf	sprintf@prec,c
  1434                           
  1435                           ;doprnt.c: 628: flag |= 0x1000;
  1436  0011BA  8857               	bsf	sprintf@flag+1,4,c
  1437                           
  1438                           ;doprnt.c: 630: }
  1439                           ;doprnt.c: 635: switch(c = *f++) {
  1440  0011BC  D002               	goto	l246
  1441  0011BE                     
  1442                           ;doprnt.c: 663: flag |= 0x400;
  1443  0011BE  8457               	bsf	sprintf@flag+1,2,c
  1444                           
  1445                           ;doprnt.c: 664: break;
  1446  0011C0  D011               	goto	l250
  1447  0011C2                     l246:
  1448  0011C2  C042  FFF6         	movff	sprintf@f,tblptrl
  1449  0011C6  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1450  0011CA  4A42               	infsnz	sprintf@f,f,c
  1451  0011CC  2A43               	incf	sprintf@f+1,f,c
  1452  0011CE                     	if	0	;tblptru may be non-zero
  1453  0011CE                     	endif
  1454  0011CE                     	if	0	;tblptru may be non-zero
  1455  0011CE                     	endif
  1456  0011CE  0008               	tblrd		*
  1457  0011D0  CFF5 F065          	movff	tablat,sprintf@c
  1458  0011D4  5065               	movf	sprintf@c,w,c
  1459                           
  1460                           ; Switch size 1, requested type "space"
  1461                           ; Number of cases is 2, Range of values is 0 to 102
  1462                           ; switch strategies available:
  1463                           ; Name         Instructions Cycles
  1464                           ; simple_byte            7     4 (average)
  1465                           ;	Chosen strategy is simple_byte
  1466  0011D6  0A00               	xorlw	0	; case 0
  1467  0011D8  B4D8               	btfsc	status,2,c
  1468  0011DA  D38E               	goto	u3220
  1469  0011DC  0A66               	xorlw	102	; case 102
  1470  0011DE  B4D8               	btfsc	status,2,c
  1471  0011E0  D7EE               	goto	l249
  1472  0011E2  D37D               	goto	l308
  1473  0011E4                     l250:
  1474                           
  1475                           ;doprnt.c: 825: if(flag & (0x700)) {
  1476  0011E4  0E07               	movlw	7
  1477  0011E6  1457               	andwf	sprintf@flag+1,w,c
  1478  0011E8  B4D8               	btfsc	status,2,c
  1479  0011EA  D2EE               	goto	l252
  1480                           
  1481                           ;doprnt.c: 827: if(flag & 0x1000)
  1482  0011EC  A857               	btfss	sprintf@flag+1,4,c
  1483  0011EE  D004               	goto	l253
  1484                           
  1485                           ;doprnt.c: 829: prec = 6;
  1486  0011F0  0E00               	movlw	0
  1487  0011F2  6E64               	movwf	sprintf@prec+1,c
  1488  0011F4  0E06               	movlw	6
  1489  0011F6  6E63               	movwf	sprintf@prec,c
  1490  0011F8                     l253:
  1491                           
  1492                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1493  0011F8  C050  FFD9         	movff	sprintf@ap,fsr2l
  1494  0011FC  C051  FFDA         	movff	sprintf@ap+1,fsr2h
  1495  001200  CFDE F060          	movff	postinc2,sprintf@fval
  1496  001204  CFDE F061          	movff	postinc2,sprintf@fval+1
  1497  001208  CFDD F062          	movff	postdec2,sprintf@fval+2
  1498  00120C  0E03               	movlw	3
  1499  00120E  2650               	addwf	sprintf@ap,f,c
  1500  001210  0E00               	movlw	0
  1501  001212  2251               	addwfc	sprintf@ap+1,f,c
  1502                           
  1503                           ;doprnt.c: 831: if(fval < 0.0) {
  1504  001214  AE62               	btfss	sprintf@fval+2,7,c
  1505  001216  D010               	goto	l254
  1506                           
  1507                           ;doprnt.c: 832: fval = -fval;
  1508  001218  C060  F001         	movff	sprintf@fval,___ftneg@f1
  1509  00121C  C061  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1510  001220  C062  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1511  001224  ECB1  F017         	call	___ftneg	;wreg free
  1512  001228  C001  F060         	movff	?___ftneg,sprintf@fval
  1513  00122C  C002  F061         	movff	?___ftneg+1,sprintf@fval+1
  1514  001230  C003  F062         	movff	?___ftneg+2,sprintf@fval+2
  1515                           
  1516                           ;doprnt.c: 833: flag |= 0x03;
  1517  001234  0E03               	movlw	3
  1518  001236  1256               	iorwf	sprintf@flag,f,c
  1519  001238                     l254:
  1520                           
  1521                           ;doprnt.c: 834: }
  1522                           ;doprnt.c: 835: exp = 0;
  1523  001238  0E00               	movlw	0
  1524  00123A  6E5F               	movwf	sprintf@exp+1,c
  1525  00123C  0E00               	movlw	0
  1526  00123E  6E5E               	movwf	sprintf@exp,c
  1527                           
  1528                           ;doprnt.c: 836: if( fval!=0) {
  1529  001240  5060               	movf	sprintf@fval,w,c
  1530  001242  1061               	iorwf	sprintf@fval+1,w,c
  1531  001244  1062               	iorwf	sprintf@fval+2,w,c
  1532  001246  B4D8               	btfsc	status,2,c
  1533  001248  D083               	goto	l259
  1534                           
  1535                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1536  00124A  0E82               	movlw	130
  1537  00124C  6E47               	movwf	??_sprintf& (0+255),c
  1538  00124E  0EFF               	movlw	255
  1539  001250  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1540  001252  C060  F049         	movff	sprintf@fval,??_sprintf+2
  1541  001256  C061  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1542  00125A  C062  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1543  00125E  C063  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1544  001262  0E10               	movlw	16
  1545  001264  D005               	goto	u2870
  1546  001266                     u2875:
  1547  001266  90D8               	bcf	status,0,c
  1548  001268  324C               	rrcf	??_sprintf+5,f,c
  1549  00126A  324B               	rrcf	??_sprintf+4,f,c
  1550  00126C  324A               	rrcf	??_sprintf+3,f,c
  1551  00126E  3249               	rrcf	??_sprintf+2,f,c
  1552  001270                     u2870:
  1553  001270  2EE8               	decfsz	wreg,f,c
  1554  001272  D7F9               	goto	u2875
  1555  001274  5049               	movf	??_sprintf+2,w,c
  1556  001276  2447               	addwf	??_sprintf,w,c
  1557  001278  6E5E               	movwf	sprintf@exp,c
  1558  00127A  0E00               	movlw	0
  1559  00127C  2048               	addwfc	??_sprintf+1,w,c
  1560  00127E  6E5F               	movwf	sprintf@exp+1,c
  1561                           
  1562                           ;doprnt.c: 838: exp--;
  1563  001280  065E               	decf	sprintf@exp,f,c
  1564  001282  A0D8               	btfss	status,0,c
  1565  001284  065F               	decf	sprintf@exp+1,f,c
  1566                           
  1567                           ;doprnt.c: 839: exp *= 3;
  1568  001286  C05E  F00F         	movff	sprintf@exp,___wmul@multiplier
  1569  00128A  C05F  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1570  00128E  0E00               	movlw	0
  1571  001290  6E12               	movwf	___wmul@multiplicand+1,c
  1572  001292  0E03               	movlw	3
  1573  001294  6E11               	movwf	___wmul@multiplicand,c
  1574  001296  EC8B  F017         	call	___wmul	;wreg free
  1575  00129A  C00F  F05E         	movff	?___wmul,sprintf@exp
  1576  00129E  C010  F05F         	movff	?___wmul+1,sprintf@exp+1
  1577                           
  1578                           ;doprnt.c: 840: exp /= 10;
  1579  0012A2  C05E  F007         	movff	sprintf@exp,___awdiv@dividend
  1580  0012A6  C05F  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1581  0012AA  0E00               	movlw	0
  1582  0012AC  6E0A               	movwf	___awdiv@divisor+1,c
  1583  0012AE  0E0A               	movlw	10
  1584  0012B0  6E09               	movwf	___awdiv@divisor,c
  1585  0012B2  ECD7  F014         	call	___awdiv	;wreg free
  1586  0012B6  C007  F05E         	movff	?___awdiv,sprintf@exp
  1587  0012BA  C008  F05F         	movff	?___awdiv+1,sprintf@exp+1
  1588                           
  1589                           ;doprnt.c: 841: if(exp < 0)
  1590  0012BE  AE5F               	btfss	sprintf@exp+1,7,c
  1591  0012C0  D003               	goto	l256
  1592                           
  1593                           ;doprnt.c: 842: exp--;
  1594  0012C2  065E               	decf	sprintf@exp,f,c
  1595  0012C4  A0D8               	btfss	status,0,c
  1596  0012C6  065F               	decf	sprintf@exp+1,f,c
  1597  0012C8                     l256:
  1598                           
  1599                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1600  0012C8  505E               	movf	sprintf@exp,w,c
  1601  0012CA  0800               	sublw	0
  1602  0012CC  EC83  F00C         	call	_scale
  1603  0012D0  C024  F05A         	movff	?_scale,sprintf@tmpval
  1604  0012D4  C025  F05B         	movff	?_scale+1,sprintf@tmpval+1
  1605  0012D8  C026  F05C         	movff	?_scale+2,sprintf@tmpval+2
  1606                           
  1607                           ;doprnt.c: 847: tmpval.integ *= fval;
  1608  0012DC  C05A  F015         	movff	sprintf@tmpval,___ftmul@f1
  1609  0012E0  C05B  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1610  0012E4  C05C  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1611  0012E8  C060  F018         	movff	sprintf@fval,___ftmul@f2
  1612  0012EC  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1613  0012F0  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1614  0012F4  EC69  F012         	call	___ftmul	;wreg free
  1615  0012F8  C015  F05A         	movff	?___ftmul,sprintf@tmpval
  1616  0012FC  C016  F05B         	movff	?___ftmul+1,sprintf@tmpval+1
  1617  001300  C017  F05C         	movff	?___ftmul+2,sprintf@tmpval+2
  1618                           
  1619                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1620  001304  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1621  001308  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1622  00130C  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1623  001310  0E00               	movlw	0
  1624  001312  6E04               	movwf	___ftge@ff2,c
  1625  001314  0E80               	movlw	128
  1626  001316  6E05               	movwf	___ftge@ff2+1,c
  1627  001318  0E3F               	movlw	63
  1628  00131A  6E06               	movwf	___ftge@ff2+2,c
  1629  00131C  EC8F  F014         	call	___ftge	;wreg free
  1630  001320  B0D8               	btfsc	status,0,c
  1631  001322  D004               	goto	l257
  1632                           
  1633                           ;doprnt.c: 849: exp--;
  1634  001324  065E               	decf	sprintf@exp,f,c
  1635  001326  A0D8               	btfss	status,0,c
  1636  001328  065F               	decf	sprintf@exp+1,f,c
  1637  00132A  D012               	goto	l259
  1638  00132C                     l257:
  1639                           
  1640                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1641  00132C  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1642  001330  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1643  001334  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1644  001338  0E00               	movlw	0
  1645  00133A  6E04               	movwf	___ftge@ff2,c
  1646  00133C  0E20               	movlw	32
  1647  00133E  6E05               	movwf	___ftge@ff2+1,c
  1648  001340  0E41               	movlw	65
  1649  001342  6E06               	movwf	___ftge@ff2+2,c
  1650  001344  EC8F  F014         	call	___ftge	;wreg free
  1651  001348  A0D8               	btfss	status,0,c
  1652  00134A  D002               	goto	l259
  1653                           
  1654                           ;doprnt.c: 851: exp++;
  1655  00134C  4A5E               	infsnz	sprintf@exp,f,c
  1656  00134E  2A5F               	incf	sprintf@exp+1,f,c
  1657  001350                     l259:
  1658                           
  1659                           ;doprnt.c: 852: }
  1660                           ;doprnt.c: 1112: if(prec <= 12)
  1661  001350  BE64               	btfsc	sprintf@prec+1,7,c
  1662  001352  D006               	goto	u2910
  1663  001354  5064               	movf	sprintf@prec+1,w,c
  1664  001356  E11B               	bnz	l3009
  1665  001358  0E0D               	movlw	13
  1666  00135A  5C63               	subwf	sprintf@prec,w,c
  1667  00135C  B0D8               	btfsc	status,0,c
  1668  00135E  D017               	goto	l260
  1669  001360                     u2910:
  1670                           
  1671                           ;doprnt.c: 1113: fval += fround(prec);
  1672  001360  C060  F02E         	movff	sprintf@fval,___ftadd@f1
  1673  001364  C061  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1674  001368  C062  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1675  00136C  5063               	movf	sprintf@prec,w,c
  1676  00136E  EC87  F00E         	call	_fround
  1677  001372  C024  F031         	movff	?_fround,___ftadd@f2
  1678  001376  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1679  00137A  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1680  00137E  ECB0  F00F         	call	___ftadd	;wreg free
  1681  001382  C02E  F060         	movff	?___ftadd,sprintf@fval
  1682  001386  C02F  F061         	movff	?___ftadd+1,sprintf@fval+1
  1683  00138A  C030  F062         	movff	?___ftadd+2,sprintf@fval+2
  1684  00138E                     l260:
  1685  00138E                     l3009:
  1686                           
  1687                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1688  00138E  BE5F               	btfsc	sprintf@exp+1,7,c
  1689  001390  D006               	goto	u2920
  1690  001392  505F               	movf	sprintf@exp+1,w,c
  1691  001394  E11E               	bnz	l3017
  1692  001396  0E0A               	movlw	10
  1693  001398  5C5E               	subwf	sprintf@exp,w,c
  1694  00139A  B0D8               	btfsc	status,0,c
  1695  00139C  D01A               	goto	u2950
  1696  00139E                     u2920:
  1697  00139E  5060               	movf	sprintf@fval,w,c
  1698  0013A0  1061               	iorwf	sprintf@fval+1,w,c
  1699  0013A2  1062               	iorwf	sprintf@fval+2,w,c
  1700  0013A4  B4D8               	btfsc	status,2,c
  1701  0013A6  D051               	goto	l261
  1702  0013A8  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1703  0013AC  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1704  0013B0  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1705  0013B4  ECE3  F012         	call	___fttol	;wreg free
  1706  0013B8  502B               	movf	?___fttol,w,c
  1707  0013BA  102C               	iorwf	?___fttol+1,w,c
  1708  0013BC  102D               	iorwf	?___fttol+2,w,c
  1709  0013BE  102E               	iorwf	?___fttol+3,w,c
  1710  0013C0  B4D8               	btfsc	status,2,c
  1711  0013C2  BE5F               	btfsc	sprintf@exp+1,7,c
  1712  0013C4  D042               	goto	l261
  1713  0013C6  505F               	movf	sprintf@exp+1,w,c
  1714  0013C8  E104               	bnz	l3017
  1715  0013CA  0E02               	movlw	2
  1716  0013CC  5C5E               	subwf	sprintf@exp,w,c
  1717  0013CE  A0D8               	btfss	status,0,c
  1718  0013D0  D03C               	goto	l261
  1719  0013D2                     u2950:
  1720  0013D2                     l3017:
  1721                           
  1722                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1723  0013D2  C05A  F001         	movff	sprintf@tmpval,___ftge@ff1
  1724  0013D6  C05B  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1725  0013DA  C05C  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1726  0013DE  0E70               	movlw	112
  1727  0013E0  6E04               	movwf	___ftge@ff2,c
  1728  0013E2  0E89               	movlw	137
  1729  0013E4  6E05               	movwf	___ftge@ff2+1,c
  1730  0013E6  0E40               	movlw	64
  1731  0013E8  6E06               	movwf	___ftge@ff2+2,c
  1732  0013EA  EC8F  F014         	call	___ftge	;wreg free
  1733  0013EE  B0D8               	btfsc	status,0,c
  1734  0013F0  D002               	goto	l264
  1735                           
  1736                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1737  0013F2  0EF7               	movlw	247
  1738  0013F4  D001               	goto	L1
  1739  0013F6                     l264:
  1740                           
  1741                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1742  0013F6  0EF8               	movlw	248
  1743  0013F8                     L1:
  1744  0013F8  265E               	addwf	sprintf@exp,f,c
  1745  0013FA  0EFF               	movlw	255
  1746  0013FC  225F               	addwfc	sprintf@exp+1,f,c
  1747                           
  1748                           ;doprnt.c: 1124: }
  1749                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1750  0013FE  505E               	movf	sprintf@exp,w,c
  1751  001400  EC83  F00C         	call	_scale
  1752  001404  C024  F05A         	movff	?_scale,sprintf@tmpval
  1753  001408  C025  F05B         	movff	?_scale+1,sprintf@tmpval+1
  1754  00140C  C026  F05C         	movff	?_scale+2,sprintf@tmpval+2
  1755                           
  1756                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1757  001410  C060  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1758  001414  C061  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1759  001418  C062  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1760  00141C  C05A  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1761  001420  C05B  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1762  001424  C05C  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1763  001428  EC3C  F011         	call	__tdiv_to_l_	;wreg free
  1764  00142C  C001  F052         	movff	?__tdiv_to_l_,sprintf@val
  1765  001430  C002  F053         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1766  001434  C003  F054         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1767  001438  C004  F055         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1768                           
  1769                           ;doprnt.c: 1129: fval = 0.0;
  1770  00143C  0E00               	movlw	0
  1771  00143E  6E60               	movwf	sprintf@fval,c
  1772  001440  0E00               	movlw	0
  1773  001442  6E61               	movwf	sprintf@fval+1,c
  1774  001444  0E00               	movlw	0
  1775  001446  6E62               	movwf	sprintf@fval+2,c
  1776                           
  1777                           ;doprnt.c: 1130: } else {
  1778  001448  D032               	goto	l270
  1779  00144A                     l261:
  1780                           
  1781                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1782  00144A  C060  F02B         	movff	sprintf@fval,___fttol@f1
  1783  00144E  C061  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1784  001452  C062  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1785  001456  ECE3  F012         	call	___fttol	;wreg free
  1786  00145A  C02B  F052         	movff	?___fttol,sprintf@val
  1787  00145E  C02C  F053         	movff	?___fttol+1,sprintf@val+1
  1788  001462  C02D  F054         	movff	?___fttol+2,sprintf@val+2
  1789  001466  C02E  F055         	movff	?___fttol+3,sprintf@val+3
  1790                           
  1791                           ;doprnt.c: 1132: fval -= (double)val;
  1792  00146A  C060  F03A         	movff	sprintf@fval,___ftsub@f1
  1793  00146E  C061  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1794  001472  C062  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1795  001476  C052  F009         	movff	sprintf@val,___lltoft@c
  1796  00147A  C053  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1797  00147E  C054  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1798  001482  C055  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1799  001486  ECF6  F015         	call	___lltoft	;wreg free
  1800  00148A  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1801  00148E  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1802  001492  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1803  001496  ECBF  F016         	call	___ftsub	;wreg free
  1804  00149A  C03A  F060         	movff	?___ftsub,sprintf@fval
  1805  00149E  C03B  F061         	movff	?___ftsub+1,sprintf@fval+1
  1806  0014A2  C03C  F062         	movff	?___ftsub+2,sprintf@fval+2
  1807                           
  1808                           ;doprnt.c: 1133: exp = 0;
  1809  0014A6  0E00               	movlw	0
  1810  0014A8  6E5F               	movwf	sprintf@exp+1,c
  1811  0014AA  0E00               	movlw	0
  1812  0014AC  6E5E               	movwf	sprintf@exp,c
  1813  0014AE                     l270:
  1814                           
  1815                           ;doprnt.c: 1134: }
  1816                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1817  0014AE  0E01               	movlw	1
  1818  0014B0  6E65               	movwf	sprintf@c,c
  1819  0014B2                     l3037:
  1820  0014B2  0E0A               	movlw	10
  1821  0014B4  1865               	xorwf	sprintf@c,w,c
  1822  0014B6  B4D8               	btfsc	status,2,c
  1823  0014B8  D018               	goto	u2990
  1824                           
  1825                           ;doprnt.c: 1137: if(val < dpowers[c])
  1826  0014BA  5065               	movf	sprintf@c,w,c
  1827  0014BC  0D04               	mullw	4
  1828  0014BE  0E01               	movlw	low _dpowers
  1829  0014C0  24F3               	addwf	prodl,w,c
  1830  0014C2  6EF6               	movwf	tblptrl,c
  1831  0014C4  0E10               	movlw	high _dpowers
  1832  0014C6  20F4               	addwfc	prodh,w,c
  1833  0014C8  6EF7               	movwf	tblptrh,c
  1834  0014CA                     	if	0	;There are less than 3 active tblptr bytes
  1835  0014CA                     	endif
  1836  0014CA  0009               	tblrd		*+
  1837  0014CC  50F5               	movf	tablat,w,c
  1838  0014CE  5C52               	subwf	sprintf@val,w,c
  1839  0014D0  0009               	tblrd		*+
  1840  0014D2  50F5               	movf	tablat,w,c
  1841  0014D4  5853               	subwfb	sprintf@val+1,w,c
  1842  0014D6  0009               	tblrd		*+
  1843  0014D8  50F5               	movf	tablat,w,c
  1844  0014DA  5854               	subwfb	sprintf@val+2,w,c
  1845  0014DC  0009               	tblrd		*+
  1846  0014DE  50F5               	movf	tablat,w,c
  1847  0014E0  5855               	subwfb	sprintf@val+3,w,c
  1848  0014E2  A0D8               	btfss	status,0,c
  1849  0014E4  D002               	goto	u2990
  1850                           
  1851                           ;doprnt.c: 1138: break;
  1852  0014E6  2A65               	incf	sprintf@c,f,c
  1853  0014E8  D7E4               	goto	l3037
  1854  0014EA                     u2990:
  1855                           
  1856                           ;doprnt.c: 1142: width -= prec + c + exp;
  1857  0014EA  C065  F047         	movff	sprintf@c,??_sprintf
  1858  0014EE  6A48               	clrf	(??_sprintf+1)& (0+255),c
  1859  0014F0  BE47               	btfsc	??_sprintf& (0+255),7,c
  1860  0014F2  0648               	decf	(??_sprintf+1)& (0+255),f,c
  1861  0014F4  5063               	movf	sprintf@prec,w,c
  1862  0014F6  2647               	addwf	??_sprintf,f,c
  1863  0014F8  5064               	movf	sprintf@prec+1,w,c
  1864  0014FA  2248               	addwfc	??_sprintf+1,f,c
  1865  0014FC  505E               	movf	sprintf@exp,w,c
  1866  0014FE  2647               	addwf	??_sprintf,f,c
  1867  001500  505F               	movf	sprintf@exp+1,w,c
  1868  001502  2248               	addwfc	??_sprintf+1,f,c
  1869  001504  5047               	movf	??_sprintf,w,c
  1870  001506  5E58               	subwf	sprintf@width,f,c
  1871  001508  5048               	movf	??_sprintf+1,w,c
  1872  00150A  5A59               	subwfb	sprintf@width+1,f,c
  1873                           
  1874                           ;doprnt.c: 1143: if(
  1875                           ;doprnt.c: 1147: prec)
  1876  00150C  5063               	movf	sprintf@prec,w,c
  1877  00150E  1064               	iorwf	sprintf@prec+1,w,c
  1878  001510  B4D8               	btfsc	status,2,c
  1879  001512  D003               	goto	l274
  1880                           
  1881                           ;doprnt.c: 1148: width--;
  1882  001514  0658               	decf	sprintf@width,f,c
  1883  001516  A0D8               	btfss	status,0,c
  1884  001518  0659               	decf	sprintf@width+1,f,c
  1885  00151A                     l274:
  1886                           
  1887                           ;doprnt.c: 1149: if(flag & 0x03)
  1888  00151A  0E03               	movlw	3
  1889  00151C  1456               	andwf	sprintf@flag,w,c
  1890  00151E  6E47               	movwf	??_sprintf& (0+255),c
  1891  001520  0E00               	movlw	0
  1892  001522  1457               	andwf	sprintf@flag+1,w,c
  1893  001524  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1894  001526  5047               	movf	??_sprintf,w,c
  1895  001528  1048               	iorwf	??_sprintf+1,w,c
  1896  00152A  B4D8               	btfsc	status,2,c
  1897  00152C  D00C               	goto	l276
  1898  00152E  D008               	goto	l3061
  1899  001530                     l3057:
  1900                           
  1901                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1902  001530  C040  FFD9         	movff	sprintf@sp,fsr2l
  1903  001534  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1904  001538  0E20               	movlw	32
  1905  00153A  6EDF               	movwf	indf2,c
  1906  00153C  4A40               	infsnz	sprintf@sp,f,c
  1907  00153E  2A41               	incf	sprintf@sp+1,f,c
  1908  001540                     l3061:
  1909                           
  1910                           ;doprnt.c: 1182: width--;
  1911  001540  0658               	decf	sprintf@width,f,c
  1912  001542  A0D8               	btfss	status,0,c
  1913  001544  0659               	decf	sprintf@width+1,f,c
  1914  001546                     l276:
  1915  001546  BE59               	btfsc	sprintf@width+1,7,c
  1916  001548  D005               	goto	u3020
  1917  00154A  5059               	movf	sprintf@width+1,w,c
  1918  00154C  E1F1               	bnz	l3057
  1919  00154E  0458               	decf	sprintf@width,w,c
  1920  001550  B0D8               	btfsc	status,0,c
  1921  001552  D7EE               	goto	l277
  1922  001554                     u3020:
  1923                           
  1924                           ;doprnt.c: 1183: }
  1925                           ;doprnt.c: 1188: if(flag & 0x03)
  1926  001554  0E03               	movlw	3
  1927  001556  1456               	andwf	sprintf@flag,w,c
  1928  001558  6E47               	movwf	??_sprintf& (0+255),c
  1929  00155A  0E00               	movlw	0
  1930  00155C  1457               	andwf	sprintf@flag+1,w,c
  1931  00155E  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1932  001560  5047               	movf	??_sprintf,w,c
  1933  001562  1048               	iorwf	??_sprintf+1,w,c
  1934  001564  B4D8               	btfsc	status,2,c
  1935  001566  D04F               	goto	l280
  1936                           
  1937                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1938  001568  C040  FFD9         	movff	sprintf@sp,fsr2l
  1939  00156C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1940  001570  0E2D               	movlw	45
  1941  001572  D046               	goto	L2
  1942  001574                     
  1943                           ;doprnt.c: 1200: {
  1944                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1945  001574  C052  F001         	movff	sprintf@val,___lldiv@dividend
  1946  001578  C053  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1947  00157C  C054  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1948  001580  C055  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1949  001584  5065               	movf	sprintf@c,w,c
  1950  001586  0D04               	mullw	4
  1951  001588  0E01               	movlw	low _dpowers
  1952  00158A  24F3               	addwf	prodl,w,c
  1953  00158C  6EF6               	movwf	tblptrl,c
  1954  00158E  0E10               	movlw	high _dpowers
  1955  001590  20F4               	addwfc	prodh,w,c
  1956  001592  6EF7               	movwf	tblptrh,c
  1957  001594                     	if	0	;There are less than 3 active tblptr bytes
  1958  001594                     	endif
  1959  001594  0009               	tblrd		*+
  1960  001596  CFF5 F005          	movff	tablat,___lldiv@divisor
  1961  00159A  0009               	tblrd		*+
  1962  00159C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1963  0015A0  0009               	tblrd		*+
  1964  0015A2  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1965  0015A6  000A               	tblrd		*-
  1966  0015A8  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1967  0015AC  EC19  F015         	call	___lldiv	;wreg free
  1968  0015B0  C001  F05A         	movff	?___lldiv,sprintf@tmpval
  1969  0015B4  C002  F05B         	movff	?___lldiv+1,sprintf@tmpval+1
  1970  0015B8  C003  F05C         	movff	?___lldiv+2,sprintf@tmpval+2
  1971  0015BC  C004  F05D         	movff	?___lldiv+3,sprintf@tmpval+3
  1972                           
  1973                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1974  0015C0  C05A  F001         	movff	sprintf@tmpval,___llmod@dividend
  1975  0015C4  C05B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1976  0015C8  C05C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1977  0015CC  C05D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1978  0015D0  0E0A               	movlw	10
  1979  0015D2  6E05               	movwf	___llmod@divisor,c
  1980  0015D4  0E00               	movlw	0
  1981  0015D6  6E06               	movwf	___llmod@divisor+1,c
  1982  0015D8  0E00               	movlw	0
  1983  0015DA  6E07               	movwf	___llmod@divisor+2,c
  1984  0015DC  0E00               	movlw	0
  1985  0015DE  6E08               	movwf	___llmod@divisor+3,c
  1986  0015E0  EC92  F015         	call	___llmod	;wreg free
  1987  0015E4  C001  F05A         	movff	?___llmod,sprintf@tmpval
  1988  0015E8  C002  F05B         	movff	?___llmod+1,sprintf@tmpval+1
  1989  0015EC  C003  F05C         	movff	?___llmod+2,sprintf@tmpval+2
  1990  0015F0  C004  F05D         	movff	?___llmod+3,sprintf@tmpval+3
  1991                           
  1992                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1993  0015F4  505A               	movf	sprintf@tmpval,w,c
  1994  0015F6  0F30               	addlw	48
  1995  0015F8  C040  FFD9         	movff	sprintf@sp,fsr2l
  1996  0015FC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1997  001600                     L2:
  1998  001600  6EDF               	movwf	indf2,c
  1999  001602  4A40               	infsnz	sprintf@sp,f,c
  2000  001604  2A41               	incf	sprintf@sp+1,f,c
  2001  001606                     l280:
  2002  001606  0665               	decf	sprintf@c,f,c
  2003  001608  2865               	incf	sprintf@c,w,c
  2004  00160A  B4D8               	btfsc	status,2,c
  2005  00160C  D00C               	goto	l283
  2006  00160E  D7B2               	goto	l281
  2007  001610                     l3081:
  2008                           
  2009                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2010  001610  C040  FFD9         	movff	sprintf@sp,fsr2l
  2011  001614  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2012  001618  0E30               	movlw	48
  2013  00161A  6EDF               	movwf	indf2,c
  2014  00161C  4A40               	infsnz	sprintf@sp,f,c
  2015  00161E  2A41               	incf	sprintf@sp+1,f,c
  2016                           
  2017                           ;doprnt.c: 1209: exp--;
  2018  001620  065E               	decf	sprintf@exp,f,c
  2019  001622  A0D8               	btfss	status,0,c
  2020  001624  065F               	decf	sprintf@exp+1,f,c
  2021  001626                     l283:
  2022  001626  BE5F               	btfsc	sprintf@exp+1,7,c
  2023  001628  D005               	goto	u3050
  2024  00162A  505F               	movf	sprintf@exp+1,w,c
  2025  00162C  E1F1               	bnz	l3081
  2026  00162E  045E               	decf	sprintf@exp,w,c
  2027  001630  B0D8               	btfsc	status,0,c
  2028  001632  D7EE               	goto	l284
  2029  001634                     u3050:
  2030                           
  2031                           ;doprnt.c: 1210: }
  2032                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2033  001634  BE64               	btfsc	sprintf@prec+1,7,c
  2034  001636  D009               	goto	l286
  2035  001638  5064               	movf	sprintf@prec+1,w,c
  2036  00163A  E104               	bnz	u3060
  2037  00163C  0E09               	movlw	9
  2038  00163E  5C63               	subwf	sprintf@prec,w,c
  2039  001640  A0D8               	btfss	status,0,c
  2040  001642  D003               	goto	l286
  2041  001644                     u3060:
  2042                           
  2043                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2044  001644  0E08               	movlw	8
  2045  001646  6E65               	movwf	sprintf@c,c
  2046  001648  D002               	goto	l287
  2047  00164A                     l286:
  2048                           
  2049                           ;doprnt.c: 1213: else
  2050                           ;doprnt.c: 1214: c = prec;
  2051  00164A  C063  F065         	movff	sprintf@prec,sprintf@c
  2052  00164E                     l287:
  2053                           
  2054                           ;doprnt.c: 1215: prec -= c;
  2055  00164E  5065               	movf	sprintf@c,w,c
  2056  001650  5E63               	subwf	sprintf@prec,f,c
  2057  001652  0E00               	movlw	0
  2058  001654  BE65               	btfsc	sprintf@c,7,c
  2059  001656  0EFF               	movlw	255
  2060  001658  5A64               	subwfb	sprintf@prec+1,f,c
  2061                           
  2062                           ;doprnt.c: 1219: if(c)
  2063  00165A  5065               	movf	sprintf@c,w,c
  2064  00165C  B4D8               	btfsc	status,2,c
  2065  00165E  D008               	goto	l288
  2066                           
  2067                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2068  001660  C040  FFD9         	movff	sprintf@sp,fsr2l
  2069  001664  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2070  001668  0E2E               	movlw	46
  2071  00166A  6EDF               	movwf	indf2,c
  2072  00166C  4A40               	infsnz	sprintf@sp,f,c
  2073  00166E  2A41               	incf	sprintf@sp+1,f,c
  2074  001670                     l288:
  2075                           
  2076                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2077  001670  5065               	movf	sprintf@c,w,c
  2078  001672  EC83  F00C         	call	_scale
  2079  001676  C024  F04D         	movff	?_scale,_sprintf$1109
  2080  00167A  C025  F04E         	movff	?_scale+1,_sprintf$1109+1
  2081  00167E  C026  F04F         	movff	?_scale+2,_sprintf$1109+2
  2082                           
  2083                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2084  001682  C060  F018         	movff	sprintf@fval,___ftmul@f2
  2085  001686  C061  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2086  00168A  C062  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2087  00168E  C04D  F015         	movff	_sprintf$1109,___ftmul@f1
  2088  001692  C04E  F016         	movff	_sprintf$1109+1,___ftmul@f1+1
  2089  001696  C04F  F017         	movff	_sprintf$1109+2,___ftmul@f1+2
  2090  00169A  EC69  F012         	call	___ftmul	;wreg free
  2091  00169E  C015  F02B         	movff	?___ftmul,___fttol@f1
  2092  0016A2  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2093  0016A6  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2094  0016AA  ECE3  F012         	call	___fttol	;wreg free
  2095  0016AE  C02B  F052         	movff	?___fttol,sprintf@val
  2096  0016B2  C02C  F053         	movff	?___fttol+1,sprintf@val+1
  2097  0016B6  C02D  F054         	movff	?___fttol+2,sprintf@val+2
  2098  0016BA  C02E  F055         	movff	?___fttol+3,sprintf@val+3
  2099                           
  2100                           ;doprnt.c: 1228: while(c--) {
  2101  0016BE  D06F               	goto	l289
  2102  0016C0                     
  2103                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2104  0016C0  C052  F001         	movff	sprintf@val,___lldiv@dividend
  2105  0016C4  C053  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2106  0016C8  C054  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2107  0016CC  C055  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2108  0016D0  5065               	movf	sprintf@c,w,c
  2109  0016D2  0D04               	mullw	4
  2110  0016D4  0E01               	movlw	low _dpowers
  2111  0016D6  24F3               	addwf	prodl,w,c
  2112  0016D8  6EF6               	movwf	tblptrl,c
  2113  0016DA  0E10               	movlw	high _dpowers
  2114  0016DC  20F4               	addwfc	prodh,w,c
  2115  0016DE  6EF7               	movwf	tblptrh,c
  2116  0016E0                     	if	0	;There are less than 3 active tblptr bytes
  2117  0016E0                     	endif
  2118  0016E0  0009               	tblrd		*+
  2119  0016E2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2120  0016E6  0009               	tblrd		*+
  2121  0016E8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2122  0016EC  0009               	tblrd		*+
  2123  0016EE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2124  0016F2  000A               	tblrd		*-
  2125  0016F4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2126  0016F8  EC19  F015         	call	___lldiv	;wreg free
  2127  0016FC  C001  F05A         	movff	?___lldiv,sprintf@tmpval
  2128  001700  C002  F05B         	movff	?___lldiv+1,sprintf@tmpval+1
  2129  001704  C003  F05C         	movff	?___lldiv+2,sprintf@tmpval+2
  2130  001708  C004  F05D         	movff	?___lldiv+3,sprintf@tmpval+3
  2131                           
  2132                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2133  00170C  C05A  F001         	movff	sprintf@tmpval,___llmod@dividend
  2134  001710  C05B  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2135  001714  C05C  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2136  001718  C05D  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2137  00171C  0E0A               	movlw	10
  2138  00171E  6E05               	movwf	___llmod@divisor,c
  2139  001720  0E00               	movlw	0
  2140  001722  6E06               	movwf	___llmod@divisor+1,c
  2141  001724  0E00               	movlw	0
  2142  001726  6E07               	movwf	___llmod@divisor+2,c
  2143  001728  0E00               	movlw	0
  2144  00172A  6E08               	movwf	___llmod@divisor+3,c
  2145  00172C  EC92  F015         	call	___llmod	;wreg free
  2146  001730  C001  F05A         	movff	?___llmod,sprintf@tmpval
  2147  001734  C002  F05B         	movff	?___llmod+1,sprintf@tmpval+1
  2148  001738  C003  F05C         	movff	?___llmod+2,sprintf@tmpval+2
  2149  00173C  C004  F05D         	movff	?___llmod+3,sprintf@tmpval+3
  2150                           
  2151                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2152  001740  505A               	movf	sprintf@tmpval,w,c
  2153  001742  0F30               	addlw	48
  2154  001744  C040  FFD9         	movff	sprintf@sp,fsr2l
  2155  001748  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2156  00174C  6EDF               	movwf	indf2,c
  2157  00174E  4A40               	infsnz	sprintf@sp,f,c
  2158  001750  2A41               	incf	sprintf@sp+1,f,c
  2159                           
  2160                           ;doprnt.c: 1232: val %= dpowers[c];
  2161  001752  C052  F001         	movff	sprintf@val,___llmod@dividend
  2162  001756  C053  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2163  00175A  C054  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2164  00175E  C055  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2165  001762  5065               	movf	sprintf@c,w,c
  2166  001764  0D04               	mullw	4
  2167  001766  0E01               	movlw	low _dpowers
  2168  001768  24F3               	addwf	prodl,w,c
  2169  00176A  6EF6               	movwf	tblptrl,c
  2170  00176C  0E10               	movlw	high _dpowers
  2171  00176E  20F4               	addwfc	prodh,w,c
  2172  001770  6EF7               	movwf	tblptrh,c
  2173  001772                     	if	0	;There are less than 3 active tblptr bytes
  2174  001772                     	endif
  2175  001772  0009               	tblrd		*+
  2176  001774  CFF5 F005          	movff	tablat,___llmod@divisor
  2177  001778  0009               	tblrd		*+
  2178  00177A  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2179  00177E  0009               	tblrd		*+
  2180  001780  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2181  001784  000A               	tblrd		*-
  2182  001786  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2183  00178A  EC92  F015         	call	___llmod	;wreg free
  2184  00178E  C001  F052         	movff	?___llmod,sprintf@val
  2185  001792  C002  F053         	movff	?___llmod+1,sprintf@val+1
  2186  001796  C003  F054         	movff	?___llmod+2,sprintf@val+2
  2187  00179A  C004  F055         	movff	?___llmod+3,sprintf@val+3
  2188  00179E                     l289:
  2189  00179E  0665               	decf	sprintf@c,f,c
  2190  0017A0  2865               	incf	sprintf@c,w,c
  2191  0017A2  B4D8               	btfsc	status,2,c
  2192  0017A4  D00C               	goto	l292
  2193  0017A6  D78C               	goto	l290
  2194  0017A8                     
  2195                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2196  0017A8  C040  FFD9         	movff	sprintf@sp,fsr2l
  2197  0017AC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2198  0017B0  0E30               	movlw	48
  2199  0017B2  6EDF               	movwf	indf2,c
  2200  0017B4  4A40               	infsnz	sprintf@sp,f,c
  2201  0017B6  2A41               	incf	sprintf@sp+1,f,c
  2202                           
  2203                           ;doprnt.c: 1237: prec--;
  2204  0017B8  0663               	decf	sprintf@prec,f,c
  2205  0017BA  A0D8               	btfss	status,0,c
  2206  0017BC  0664               	decf	sprintf@prec+1,f,c
  2207  0017BE                     l292:
  2208  0017BE  5063               	movf	sprintf@prec,w,c
  2209  0017C0  1064               	iorwf	sprintf@prec+1,w,c
  2210  0017C2  B4D8               	btfsc	status,2,c
  2211  0017C4  D08C               	goto	l308
  2212  0017C6  D7F0               	goto	l293
  2213  0017C8                     l252:
  2214                           
  2215                           ;doprnt.c: 1246: }
  2216                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2217  0017C8  5063               	movf	sprintf@prec,w,c
  2218  0017CA  1064               	iorwf	sprintf@prec+1,w,c
  2219  0017CC  A4D8               	btfss	status,2,c
  2220  0017CE  D008               	goto	l295
  2221  0017D0  5052               	movf	sprintf@val,w,c
  2222  0017D2  1053               	iorwf	sprintf@val+1,w,c
  2223  0017D4  1054               	iorwf	sprintf@val+2,w,c
  2224  0017D6  1055               	iorwf	sprintf@val+3,w,c
  2225  0017D8  A4D8               	btfss	status,2,c
  2226  0017DA  D002               	goto	l295
  2227                           
  2228                           ;doprnt.c: 1291: prec++;
  2229  0017DC  4A63               	infsnz	sprintf@prec,f,c
  2230  0017DE  2A64               	incf	sprintf@prec+1,f,c
  2231  0017E0                     l295:
  2232                           
  2233                           ;doprnt.c: 1339: if(c < prec)
  2234  0017E0  0E80               	movlw	128
  2235  0017E2  BE65               	btfsc	sprintf@c,7,c
  2236  0017E4  0E7F               	movlw	127
  2237  0017E6  6E47               	movwf	??_sprintf& (0+255),c
  2238  0017E8  5063               	movf	sprintf@prec,w,c
  2239  0017EA  5C65               	subwf	sprintf@c,w,c
  2240  0017EC  5064               	movf	sprintf@prec+1,w,c
  2241  0017EE  0A80               	xorlw	128
  2242  0017F0  5847               	subwfb	??_sprintf& (0+255),w,c
  2243  0017F2  B0D8               	btfsc	status,0,c
  2244  0017F4  D003               	goto	l296
  2245                           
  2246                           ;doprnt.c: 1340: c = prec;
  2247  0017F6  C063  F065         	movff	sprintf@prec,sprintf@c
  2248  0017FA  D010               	goto	l298
  2249  0017FC                     l296:
  2250                           
  2251                           ;doprnt.c: 1341: else if(prec < c)
  2252  0017FC  5064               	movf	sprintf@prec+1,w,c
  2253  0017FE  0A80               	xorlw	128
  2254  001800  6E47               	movwf	??_sprintf& (0+255),c
  2255  001802  5065               	movf	sprintf@c,w,c
  2256  001804  5C63               	subwf	sprintf@prec,w,c
  2257  001806  0E80               	movlw	128
  2258  001808  BE65               	btfsc	sprintf@c,7,c
  2259  00180A  0E7F               	movlw	127
  2260  00180C  5847               	subwfb	??_sprintf& (0+255),w,c
  2261  00180E  B0D8               	btfsc	status,0,c
  2262  001810  D005               	goto	l298
  2263                           
  2264                           ;doprnt.c: 1342: prec = c;
  2265  001812  5065               	movf	sprintf@c,w,c
  2266  001814  6E63               	movwf	sprintf@prec,c
  2267  001816  6A64               	clrf	sprintf@prec+1,c
  2268  001818  BE63               	btfsc	sprintf@prec,7,c
  2269  00181A  0664               	decf	sprintf@prec+1,f,c
  2270  00181C                     l298:
  2271                           
  2272                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2273  00181C  5058               	movf	sprintf@width,w,c
  2274  00181E  1059               	iorwf	sprintf@width+1,w,c
  2275  001820  B4D8               	btfsc	status,2,c
  2276  001822  D00D               	goto	l299
  2277  001824  0E03               	movlw	3
  2278  001826  1456               	andwf	sprintf@flag,w,c
  2279  001828  6E47               	movwf	??_sprintf& (0+255),c
  2280  00182A  0E00               	movlw	0
  2281  00182C  1457               	andwf	sprintf@flag+1,w,c
  2282  00182E  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2283  001830  5047               	movf	??_sprintf,w,c
  2284  001832  1048               	iorwf	??_sprintf+1,w,c
  2285  001834  B4D8               	btfsc	status,2,c
  2286  001836  D003               	goto	l299
  2287                           
  2288                           ;doprnt.c: 1346: width--;
  2289  001838  0658               	decf	sprintf@width,f,c
  2290  00183A  A0D8               	btfss	status,0,c
  2291  00183C  0659               	decf	sprintf@width+1,f,c
  2292  00183E                     l299:
  2293                           
  2294                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2295  00183E  AC57               	btfss	sprintf@flag+1,6,c
  2296  001840  D013               	goto	l302
  2297                           
  2298                           ;doprnt.c: 1349: if(width > prec)
  2299  001842  5058               	movf	sprintf@width,w,c
  2300  001844  5C63               	subwf	sprintf@prec,w,c
  2301  001846  5064               	movf	sprintf@prec+1,w,c
  2302  001848  0A80               	xorlw	128
  2303  00184A  6E47               	movwf	??_sprintf& (0+255),c
  2304  00184C  5059               	movf	sprintf@width+1,w,c
  2305  00184E  0A80               	xorlw	128
  2306  001850  5847               	subwfb	??_sprintf& (0+255),w,c
  2307  001852  B0D8               	btfsc	status,0,c
  2308  001854  D005               	goto	l301
  2309                           
  2310                           ;doprnt.c: 1350: width -= prec;
  2311  001856  5063               	movf	sprintf@prec,w,c
  2312  001858  5E58               	subwf	sprintf@width,f,c
  2313  00185A  5064               	movf	sprintf@prec+1,w,c
  2314  00185C  5A59               	subwfb	sprintf@width+1,f,c
  2315  00185E  D004               	goto	l302
  2316  001860                     l301:
  2317                           
  2318                           ;doprnt.c: 1351: else
  2319                           ;doprnt.c: 1352: width = 0;
  2320  001860  0E00               	movlw	0
  2321  001862  6E59               	movwf	sprintf@width+1,c
  2322  001864  0E00               	movlw	0
  2323  001866  6E58               	movwf	sprintf@width,c
  2324  001868                     l302:
  2325                           
  2326                           ;doprnt.c: 1353: }
  2327                           ;doprnt.c: 1381: if(width > c)
  2328  001868  0E80               	movlw	128
  2329  00186A  BE65               	btfsc	sprintf@c,7,c
  2330  00186C  0E7F               	movlw	127
  2331  00186E  6E47               	movwf	??_sprintf& (0+255),c
  2332  001870  5058               	movf	sprintf@width,w,c
  2333  001872  5C65               	subwf	sprintf@c,w,c
  2334  001874  5059               	movf	sprintf@width+1,w,c
  2335  001876  0A80               	xorlw	128
  2336  001878  5847               	subwfb	??_sprintf& (0+255),w,c
  2337  00187A  B0D8               	btfsc	status,0,c
  2338  00187C  D007               	goto	l303
  2339                           
  2340                           ;doprnt.c: 1382: width -= c;
  2341  00187E  5065               	movf	sprintf@c,w,c
  2342  001880  5E58               	subwf	sprintf@width,f,c
  2343  001882  0E00               	movlw	0
  2344  001884  BE65               	btfsc	sprintf@c,7,c
  2345  001886  0EFF               	movlw	255
  2346  001888  5A59               	subwfb	sprintf@width+1,f,c
  2347  00188A  D004               	goto	l304
  2348  00188C                     l303:
  2349                           
  2350                           ;doprnt.c: 1383: else
  2351                           ;doprnt.c: 1384: width = 0;
  2352  00188C  0E00               	movlw	0
  2353  00188E  6E59               	movwf	sprintf@width+1,c
  2354  001890  0E00               	movlw	0
  2355  001892  6E58               	movwf	sprintf@width,c
  2356  001894                     l304:
  2357                           
  2358                           ;doprnt.c: 1422: {
  2359                           ;doprnt.c: 1424: if(width
  2360                           ;doprnt.c: 1428: )
  2361  001894  5058               	movf	sprintf@width,w,c
  2362  001896  1059               	iorwf	sprintf@width+1,w,c
  2363  001898  B4D8               	btfsc	status,2,c
  2364  00189A  D00F               	goto	u3200
  2365  00189C                     u3190:
  2366                           
  2367                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2368                           
  2369                           ;doprnt.c: 1429: do
  2370  00189C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2371  0018A0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2372  0018A4  0E20               	movlw	32
  2373  0018A6  6EDF               	movwf	indf2,c
  2374  0018A8  4A40               	infsnz	sprintf@sp,f,c
  2375  0018AA  2A41               	incf	sprintf@sp+1,f,c
  2376                           
  2377                           ;doprnt.c: 1431: while(--width);
  2378  0018AC  0658               	decf	sprintf@width,f,c
  2379  0018AE  A0D8               	btfss	status,0,c
  2380  0018B0  0659               	decf	sprintf@width+1,f,c
  2381  0018B2  5058               	movf	sprintf@width,w,c
  2382  0018B4  1059               	iorwf	sprintf@width+1,w,c
  2383  0018B6  A4D8               	btfss	status,2,c
  2384  0018B8  D7F1               	goto	u3190
  2385  0018BA                     u3200:
  2386                           
  2387                           ;doprnt.c: 1438: if(flag & 0x03)
  2388  0018BA  0E03               	movlw	3
  2389  0018BC  1456               	andwf	sprintf@flag,w,c
  2390  0018BE  6E47               	movwf	??_sprintf& (0+255),c
  2391  0018C0  0E00               	movlw	0
  2392  0018C2  1457               	andwf	sprintf@flag+1,w,c
  2393  0018C4  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2394  0018C6  5047               	movf	??_sprintf,w,c
  2395  0018C8  1048               	iorwf	??_sprintf+1,w,c
  2396  0018CA  B4D8               	btfsc	status,2,c
  2397  0018CC  D008               	goto	l308
  2398                           
  2399                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2400  0018CE  C040  FFD9         	movff	sprintf@sp,fsr2l
  2401  0018D2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2402  0018D6  0E2D               	movlw	45
  2403  0018D8  6EDF               	movwf	indf2,c
  2404  0018DA                     l3171:
  2405  0018DA  4A40               	infsnz	sprintf@sp,f,c
  2406  0018DC  2A41               	incf	sprintf@sp+1,f,c
  2407  0018DE                     l308:
  2408  0018DE  C042  FFF6         	movff	sprintf@f,tblptrl
  2409  0018E2  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2410  0018E6  4A42               	infsnz	sprintf@f,f,c
  2411  0018E8  2A43               	incf	sprintf@f+1,f,c
  2412  0018EA                     	if	0	;tblptru may be non-zero
  2413  0018EA                     	endif
  2414  0018EA                     	if	0	;tblptru may be non-zero
  2415  0018EA                     	endif
  2416  0018EA  0008               	tblrd		*
  2417  0018EC  CFF5 F065          	movff	tablat,sprintf@c
  2418  0018F0  5065               	movf	sprintf@c,w,c
  2419  0018F2  A4D8               	btfss	status,2,c
  2420  0018F4  EF52  F008         	goto	l236
  2421  0018F8                     u3220:
  2422                           
  2423                           ;doprnt.c: 1538: *sp = 0;
  2424                           
  2425                           ;doprnt.c: 1469: }
  2426                           ;doprnt.c: 1533: }
  2427                           ;doprnt.c: 1535: alldone:
  2428  0018F8  C040  FFD9         	movff	sprintf@sp,fsr2l
  2429  0018FC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2430  001900  0E00               	movlw	0
  2431  001902  6EDF               	movwf	indf2,c
  2432  001904  0012               	return	
  2433  001906                     __end_of_sprintf:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           intcon	equ	0xFF2
  2442                           postinc0	equ	0xFEE
  2443                           wreg	equ	0xFE8
  2444                           postdec1	equ	0xFE5
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _scale *****************
  2454 ;; Defined at:
  2455 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  scl             1    wreg     char 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  scl             1   41[COMRAM] char 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  3   35[COMRAM] char 
  2462 ;; Registers used:
  2463 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2469 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2470 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;Total ram usage:        7 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    2
  2476 ;; This function calls:
  2477 ;;		___awdiv
  2478 ;;		___awmod
  2479 ;;		___ftmul
  2480 ;;		___wmul
  2481 ;; This function is called by:
  2482 ;;		_sprintf
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text3
  2487  001906                     __ptext3:
  2488                           	opt stack 0
  2489  001906                     _scale:
  2490                           	opt stack 27
  2491                           
  2492                           ;incstack = 0
  2493                           ;scale@scl stored from wreg
  2494  001906  6E2A               	movwf	scale@scl,c
  2495                           
  2496                           ;doprnt.c: 428: if(scl < 0) {
  2497  001908  AE2A               	btfss	scale@scl,7,c
  2498  00190A  D101               	goto	l225
  2499                           
  2500                           ;doprnt.c: 429: scl = -scl;
  2501  00190C  6C2A               	negf	scale@scl,c
  2502                           
  2503                           ;doprnt.c: 430: if(scl>=110)
  2504  00190E  502A               	movf	scale@scl,w,c
  2505  001910  0A80               	xorlw	128
  2506  001912  0F12               	addlw	-238
  2507  001914  A0D8               	btfss	status,0,c
  2508  001916  D091               	goto	l226
  2509                           
  2510                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2511  001918  0E00               	movlw	0
  2512  00191A  6E12               	movwf	___wmul@multiplicand+1,c
  2513  00191C  0E03               	movlw	3
  2514  00191E  6E11               	movwf	___wmul@multiplicand,c
  2515  001920  0E00               	movlw	0
  2516  001922  6E0A               	movwf	___awdiv@divisor+1,c
  2517  001924  0E0A               	movlw	10
  2518  001926  6E09               	movwf	___awdiv@divisor,c
  2519  001928  0E00               	movlw	0
  2520  00192A  6E04               	movwf	___awmod@divisor+1,c
  2521  00192C  0E64               	movlw	100
  2522  00192E  6E03               	movwf	___awmod@divisor,c
  2523  001930  502A               	movf	scale@scl,w,c
  2524  001932  6E01               	movwf	___awmod@dividend,c
  2525  001934  6A02               	clrf	___awmod@dividend+1,c
  2526  001936  BE01               	btfsc	___awmod@dividend,7,c
  2527  001938  0602               	decf	___awmod@dividend+1,f,c
  2528  00193A  EC5A  F015         	call	___awmod	;wreg free
  2529  00193E  C001  F007         	movff	?___awmod,___awdiv@dividend
  2530  001942  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2531  001946  ECD7  F014         	call	___awdiv	;wreg free
  2532  00194A  0E09               	movlw	9
  2533  00194C  2407               	addwf	?___awdiv,w,c
  2534  00194E  6E0F               	movwf	___wmul@multiplier,c
  2535  001950  0E00               	movlw	0
  2536  001952  2008               	addwfc	?___awdiv+1,w,c
  2537  001954  6E10               	movwf	___wmul@multiplier+1,c
  2538  001956  EC8B  F017         	call	___wmul	;wreg free
  2539  00195A  0E50               	movlw	low __npowers_
  2540  00195C  240F               	addwf	?___wmul,w,c
  2541  00195E  6EF6               	movwf	tblptrl,c
  2542  001960  0E10               	movlw	high __npowers_
  2543  001962  2010               	addwfc	?___wmul+1,w,c
  2544  001964  6EF7               	movwf	tblptrh,c
  2545  001966                     	if	0	;There are less than 3 active tblptr bytes
  2546  001966                     	endif
  2547  001966  0009               	tblrd		*+
  2548  001968  CFF5 F018          	movff	tablat,___ftmul@f2
  2549  00196C  0009               	tblrd		*+
  2550  00196E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2551  001972  000A               	tblrd		*-
  2552  001974  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2553  001978  0E00               	movlw	0
  2554  00197A  6E0A               	movwf	___awdiv@divisor+1,c
  2555  00197C  0E64               	movlw	100
  2556  00197E  6E09               	movwf	___awdiv@divisor,c
  2557  001980  502A               	movf	scale@scl,w,c
  2558  001982  6E07               	movwf	___awdiv@dividend,c
  2559  001984  6A08               	clrf	___awdiv@dividend+1,c
  2560  001986  BE07               	btfsc	___awdiv@dividend,7,c
  2561  001988  0608               	decf	___awdiv@dividend+1,f,c
  2562  00198A  ECD7  F014         	call	___awdiv	;wreg free
  2563  00198E  0E12               	movlw	18
  2564  001990  2407               	addwf	?___awdiv,w,c
  2565  001992  6E0F               	movwf	___wmul@multiplier,c
  2566  001994  0E00               	movlw	0
  2567  001996  2008               	addwfc	?___awdiv+1,w,c
  2568  001998  6E10               	movwf	___wmul@multiplier+1,c
  2569  00199A  0E00               	movlw	0
  2570  00199C  6E12               	movwf	___wmul@multiplicand+1,c
  2571  00199E  0E03               	movlw	3
  2572  0019A0  6E11               	movwf	___wmul@multiplicand,c
  2573  0019A2  EC8B  F017         	call	___wmul	;wreg free
  2574  0019A6  0E50               	movlw	low __npowers_
  2575  0019A8  240F               	addwf	?___wmul,w,c
  2576  0019AA  6EF6               	movwf	tblptrl,c
  2577  0019AC  0E10               	movlw	high __npowers_
  2578  0019AE  2010               	addwfc	?___wmul+1,w,c
  2579  0019B0  6EF7               	movwf	tblptrh,c
  2580  0019B2                     	if	0	;There are less than 3 active tblptr bytes
  2581  0019B2                     	endif
  2582  0019B2  0009               	tblrd		*+
  2583  0019B4  CFF5 F015          	movff	tablat,___ftmul@f1
  2584  0019B8  0009               	tblrd		*+
  2585  0019BA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2586  0019BE  000A               	tblrd		*-
  2587  0019C0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2588  0019C4  EC69  F012         	call	___ftmul	;wreg free
  2589  0019C8  C015  F027         	movff	?___ftmul,_scale$1108
  2590  0019CC  C016  F028         	movff	?___ftmul+1,_scale$1108+1
  2591  0019D0  C017  F029         	movff	?___ftmul+2,_scale$1108+2
  2592                           
  2593                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2594  0019D4  C027  F015         	movff	_scale$1108,___ftmul@f1
  2595  0019D8  C028  F016         	movff	_scale$1108+1,___ftmul@f1+1
  2596  0019DC  C029  F017         	movff	_scale$1108+2,___ftmul@f1+2
  2597  0019E0  0E00               	movlw	0
  2598  0019E2  6E12               	movwf	___wmul@multiplicand+1,c
  2599  0019E4  0E03               	movlw	3
  2600  0019E6  6E11               	movwf	___wmul@multiplicand,c
  2601  0019E8  0E00               	movlw	0
  2602  0019EA  6E04               	movwf	___awmod@divisor+1,c
  2603  0019EC  0E0A               	movlw	10
  2604  0019EE  6E03               	movwf	___awmod@divisor,c
  2605  0019F0  502A               	movf	scale@scl,w,c
  2606  0019F2  6E01               	movwf	___awmod@dividend,c
  2607  0019F4  6A02               	clrf	___awmod@dividend+1,c
  2608  0019F6  BE01               	btfsc	___awmod@dividend,7,c
  2609  0019F8  0602               	decf	___awmod@dividend+1,f,c
  2610  0019FA  EC5A  F015         	call	___awmod	;wreg free
  2611  0019FE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2612  001A02  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2613  001A06  EC8B  F017         	call	___wmul	;wreg free
  2614  001A0A  0E50               	movlw	low __npowers_
  2615  001A0C  240F               	addwf	?___wmul,w,c
  2616  001A0E  6EF6               	movwf	tblptrl,c
  2617  001A10  0E10               	movlw	high __npowers_
  2618  001A12  2010               	addwfc	?___wmul+1,w,c
  2619  001A14  6EF7               	movwf	tblptrh,c
  2620  001A16                     	if	0	;There are less than 3 active tblptr bytes
  2621  001A16                     	endif
  2622  001A16  0009               	tblrd		*+
  2623  001A18  CFF5 F018          	movff	tablat,___ftmul@f2
  2624  001A1C  0009               	tblrd		*+
  2625  001A1E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2626  001A22  000A               	tblrd		*-
  2627  001A24  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2628  001A28  EC69  F012         	call	___ftmul	;wreg free
  2629  001A2C  C015  F024         	movff	?___ftmul,?_scale
  2630  001A30  C016  F025         	movff	?___ftmul+1,?_scale+1
  2631  001A34  C017  F026         	movff	?___ftmul+2,?_scale+2
  2632  001A38  0012               	return	
  2633  001A3A                     l226:
  2634                           
  2635                           ;doprnt.c: 432: else if(scl > 10)
  2636  001A3A  502A               	movf	scale@scl,w,c
  2637  001A3C  0A80               	xorlw	128
  2638  001A3E  0F75               	addlw	-139
  2639  001A40  A0D8               	btfss	status,0,c
  2640  001A42  D053               	goto	l229
  2641                           
  2642                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2643  001A44  0E00               	movlw	0
  2644  001A46  6E0A               	movwf	___awdiv@divisor+1,c
  2645  001A48  0E0A               	movlw	10
  2646  001A4A  6E09               	movwf	___awdiv@divisor,c
  2647  001A4C  502A               	movf	scale@scl,w,c
  2648  001A4E  6E07               	movwf	___awdiv@dividend,c
  2649  001A50  6A08               	clrf	___awdiv@dividend+1,c
  2650  001A52  BE07               	btfsc	___awdiv@dividend,7,c
  2651  001A54  0608               	decf	___awdiv@dividend+1,f,c
  2652  001A56  ECD7  F014         	call	___awdiv	;wreg free
  2653  001A5A  0E09               	movlw	9
  2654  001A5C  2407               	addwf	?___awdiv,w,c
  2655  001A5E  6E0F               	movwf	___wmul@multiplier,c
  2656  001A60  0E00               	movlw	0
  2657  001A62  2008               	addwfc	?___awdiv+1,w,c
  2658  001A64  6E10               	movwf	___wmul@multiplier+1,c
  2659  001A66  0E00               	movlw	0
  2660  001A68  6E12               	movwf	___wmul@multiplicand+1,c
  2661  001A6A  0E03               	movlw	3
  2662  001A6C  6E11               	movwf	___wmul@multiplicand,c
  2663  001A6E  EC8B  F017         	call	___wmul	;wreg free
  2664  001A72  0E50               	movlw	low __npowers_
  2665  001A74  240F               	addwf	?___wmul,w,c
  2666  001A76  6EF6               	movwf	tblptrl,c
  2667  001A78  0E10               	movlw	high __npowers_
  2668  001A7A  2010               	addwfc	?___wmul+1,w,c
  2669  001A7C  6EF7               	movwf	tblptrh,c
  2670  001A7E                     	if	0	;There are less than 3 active tblptr bytes
  2671  001A7E                     	endif
  2672  001A7E  0009               	tblrd		*+
  2673  001A80  CFF5 F015          	movff	tablat,___ftmul@f1
  2674  001A84  0009               	tblrd		*+
  2675  001A86  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2676  001A8A  000A               	tblrd		*-
  2677  001A8C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2678  001A90  0E00               	movlw	0
  2679  001A92  6E12               	movwf	___wmul@multiplicand+1,c
  2680  001A94  0E03               	movlw	3
  2681  001A96  6E11               	movwf	___wmul@multiplicand,c
  2682  001A98  0E00               	movlw	0
  2683  001A9A  6E04               	movwf	___awmod@divisor+1,c
  2684  001A9C  0E0A               	movlw	10
  2685  001A9E  6E03               	movwf	___awmod@divisor,c
  2686  001AA0  502A               	movf	scale@scl,w,c
  2687  001AA2  6E01               	movwf	___awmod@dividend,c
  2688  001AA4  6A02               	clrf	___awmod@dividend+1,c
  2689  001AA6  BE01               	btfsc	___awmod@dividend,7,c
  2690  001AA8  0602               	decf	___awmod@dividend+1,f,c
  2691  001AAA  EC5A  F015         	call	___awmod	;wreg free
  2692  001AAE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2693  001AB2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2694  001AB6  EC8B  F017         	call	___wmul	;wreg free
  2695  001ABA  0E50               	movlw	low __npowers_
  2696  001ABC  240F               	addwf	?___wmul,w,c
  2697  001ABE  6EF6               	movwf	tblptrl,c
  2698  001AC0  0E10               	movlw	high __npowers_
  2699  001AC2  2010               	addwfc	?___wmul+1,w,c
  2700  001AC4  6EF7               	movwf	tblptrh,c
  2701  001AC6                     	if	0	;There are less than 3 active tblptr bytes
  2702  001AC6                     	endif
  2703  001AC6  0009               	tblrd		*+
  2704  001AC8  CFF5 F018          	movff	tablat,___ftmul@f2
  2705  001ACC  0009               	tblrd		*+
  2706  001ACE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2707  001AD2  000A               	tblrd		*-
  2708  001AD4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2709  001AD8  EC69  F012         	call	___ftmul	;wreg free
  2710  001ADC  C015  F024         	movff	?___ftmul,?_scale
  2711  001AE0  C016  F025         	movff	?___ftmul+1,?_scale+1
  2712  001AE4  C017  F026         	movff	?___ftmul+2,?_scale+2
  2713  001AE8  0012               	return	
  2714  001AEA                     l229:
  2715                           
  2716                           ;doprnt.c: 434: return _npowers_[scl];
  2717  001AEA  502A               	movf	scale@scl,w,c
  2718  001AEC  0D03               	mullw	3
  2719  001AEE  0E50               	movlw	low __npowers_
  2720  001AF0  24F3               	addwf	prodl,w,c
  2721  001AF2  6EF6               	movwf	tblptrl,c
  2722  001AF4  0E10               	movlw	high __npowers_
  2723  001AF6  20F4               	addwfc	prodh,w,c
  2724  001AF8  6EF7               	movwf	tblptrh,c
  2725  001AFA                     	if	0	;There are less than 3 active tblptr bytes
  2726  001AFA                     	endif
  2727  001AFA  0009               	tblrd		*+
  2728  001AFC  CFF5 F024          	movff	tablat,?_scale
  2729  001B00  0009               	tblrd		*+
  2730  001B02  CFF5 F025          	movff	tablat,?_scale+1
  2731  001B06  000A               	tblrd		*-
  2732  001B08  CFF5 F026          	movff	tablat,?_scale+2
  2733  001B0C  0012               	return	
  2734  001B0E                     l225:
  2735                           
  2736                           ;doprnt.c: 435: }
  2737                           ;doprnt.c: 436: if(scl>=110)
  2738  001B0E  502A               	movf	scale@scl,w,c
  2739  001B10  0A80               	xorlw	128
  2740  001B12  0F12               	addlw	-238
  2741  001B14  A0D8               	btfss	status,0,c
  2742  001B16  D091               	goto	l230
  2743                           
  2744                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2745  001B18  0E00               	movlw	0
  2746  001B1A  6E12               	movwf	___wmul@multiplicand+1,c
  2747  001B1C  0E03               	movlw	3
  2748  001B1E  6E11               	movwf	___wmul@multiplicand,c
  2749  001B20  0E00               	movlw	0
  2750  001B22  6E0A               	movwf	___awdiv@divisor+1,c
  2751  001B24  0E0A               	movlw	10
  2752  001B26  6E09               	movwf	___awdiv@divisor,c
  2753  001B28  0E00               	movlw	0
  2754  001B2A  6E04               	movwf	___awmod@divisor+1,c
  2755  001B2C  0E64               	movlw	100
  2756  001B2E  6E03               	movwf	___awmod@divisor,c
  2757  001B30  502A               	movf	scale@scl,w,c
  2758  001B32  6E01               	movwf	___awmod@dividend,c
  2759  001B34  6A02               	clrf	___awmod@dividend+1,c
  2760  001B36  BE01               	btfsc	___awmod@dividend,7,c
  2761  001B38  0602               	decf	___awmod@dividend+1,f,c
  2762  001B3A  EC5A  F015         	call	___awmod	;wreg free
  2763  001B3E  C001  F007         	movff	?___awmod,___awdiv@dividend
  2764  001B42  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2765  001B46  ECD7  F014         	call	___awdiv	;wreg free
  2766  001B4A  0E09               	movlw	9
  2767  001B4C  2407               	addwf	?___awdiv,w,c
  2768  001B4E  6E0F               	movwf	___wmul@multiplier,c
  2769  001B50  0E00               	movlw	0
  2770  001B52  2008               	addwfc	?___awdiv+1,w,c
  2771  001B54  6E10               	movwf	___wmul@multiplier+1,c
  2772  001B56  EC8B  F017         	call	___wmul	;wreg free
  2773  001B5A  0E29               	movlw	low __powers_
  2774  001B5C  240F               	addwf	?___wmul,w,c
  2775  001B5E  6EF6               	movwf	tblptrl,c
  2776  001B60  0E10               	movlw	high __powers_
  2777  001B62  2010               	addwfc	?___wmul+1,w,c
  2778  001B64  6EF7               	movwf	tblptrh,c
  2779  001B66                     	if	0	;There are less than 3 active tblptr bytes
  2780  001B66                     	endif
  2781  001B66  0009               	tblrd		*+
  2782  001B68  CFF5 F018          	movff	tablat,___ftmul@f2
  2783  001B6C  0009               	tblrd		*+
  2784  001B6E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2785  001B72  000A               	tblrd		*-
  2786  001B74  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2787  001B78  0E00               	movlw	0
  2788  001B7A  6E0A               	movwf	___awdiv@divisor+1,c
  2789  001B7C  0E64               	movlw	100
  2790  001B7E  6E09               	movwf	___awdiv@divisor,c
  2791  001B80  502A               	movf	scale@scl,w,c
  2792  001B82  6E07               	movwf	___awdiv@dividend,c
  2793  001B84  6A08               	clrf	___awdiv@dividend+1,c
  2794  001B86  BE07               	btfsc	___awdiv@dividend,7,c
  2795  001B88  0608               	decf	___awdiv@dividend+1,f,c
  2796  001B8A  ECD7  F014         	call	___awdiv	;wreg free
  2797  001B8E  0E12               	movlw	18
  2798  001B90  2407               	addwf	?___awdiv,w,c
  2799  001B92  6E0F               	movwf	___wmul@multiplier,c
  2800  001B94  0E00               	movlw	0
  2801  001B96  2008               	addwfc	?___awdiv+1,w,c
  2802  001B98  6E10               	movwf	___wmul@multiplier+1,c
  2803  001B9A  0E00               	movlw	0
  2804  001B9C  6E12               	movwf	___wmul@multiplicand+1,c
  2805  001B9E  0E03               	movlw	3
  2806  001BA0  6E11               	movwf	___wmul@multiplicand,c
  2807  001BA2  EC8B  F017         	call	___wmul	;wreg free
  2808  001BA6  0E29               	movlw	low __powers_
  2809  001BA8  240F               	addwf	?___wmul,w,c
  2810  001BAA  6EF6               	movwf	tblptrl,c
  2811  001BAC  0E10               	movlw	high __powers_
  2812  001BAE  2010               	addwfc	?___wmul+1,w,c
  2813  001BB0  6EF7               	movwf	tblptrh,c
  2814  001BB2                     	if	0	;There are less than 3 active tblptr bytes
  2815  001BB2                     	endif
  2816  001BB2  0009               	tblrd		*+
  2817  001BB4  CFF5 F015          	movff	tablat,___ftmul@f1
  2818  001BB8  0009               	tblrd		*+
  2819  001BBA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2820  001BBE  000A               	tblrd		*-
  2821  001BC0  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2822  001BC4  EC69  F012         	call	___ftmul	;wreg free
  2823  001BC8  C015  F027         	movff	?___ftmul,_scale$1108
  2824  001BCC  C016  F028         	movff	?___ftmul+1,_scale$1108+1
  2825  001BD0  C017  F029         	movff	?___ftmul+2,_scale$1108+2
  2826                           
  2827                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2828  001BD4  C027  F015         	movff	_scale$1108,___ftmul@f1
  2829  001BD8  C028  F016         	movff	_scale$1108+1,___ftmul@f1+1
  2830  001BDC  C029  F017         	movff	_scale$1108+2,___ftmul@f1+2
  2831  001BE0  0E00               	movlw	0
  2832  001BE2  6E12               	movwf	___wmul@multiplicand+1,c
  2833  001BE4  0E03               	movlw	3
  2834  001BE6  6E11               	movwf	___wmul@multiplicand,c
  2835  001BE8  0E00               	movlw	0
  2836  001BEA  6E04               	movwf	___awmod@divisor+1,c
  2837  001BEC  0E0A               	movlw	10
  2838  001BEE  6E03               	movwf	___awmod@divisor,c
  2839  001BF0  502A               	movf	scale@scl,w,c
  2840  001BF2  6E01               	movwf	___awmod@dividend,c
  2841  001BF4  6A02               	clrf	___awmod@dividend+1,c
  2842  001BF6  BE01               	btfsc	___awmod@dividend,7,c
  2843  001BF8  0602               	decf	___awmod@dividend+1,f,c
  2844  001BFA  EC5A  F015         	call	___awmod	;wreg free
  2845  001BFE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2846  001C02  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2847  001C06  EC8B  F017         	call	___wmul	;wreg free
  2848  001C0A  0E29               	movlw	low __powers_
  2849  001C0C  240F               	addwf	?___wmul,w,c
  2850  001C0E  6EF6               	movwf	tblptrl,c
  2851  001C10  0E10               	movlw	high __powers_
  2852  001C12  2010               	addwfc	?___wmul+1,w,c
  2853  001C14  6EF7               	movwf	tblptrh,c
  2854  001C16                     	if	0	;There are less than 3 active tblptr bytes
  2855  001C16                     	endif
  2856  001C16  0009               	tblrd		*+
  2857  001C18  CFF5 F018          	movff	tablat,___ftmul@f2
  2858  001C1C  0009               	tblrd		*+
  2859  001C1E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2860  001C22  000A               	tblrd		*-
  2861  001C24  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2862  001C28  EC69  F012         	call	___ftmul	;wreg free
  2863  001C2C  C015  F024         	movff	?___ftmul,?_scale
  2864  001C30  C016  F025         	movff	?___ftmul+1,?_scale+1
  2865  001C34  C017  F026         	movff	?___ftmul+2,?_scale+2
  2866  001C38  0012               	return	
  2867  001C3A                     l230:
  2868                           
  2869                           ;doprnt.c: 438: else if(scl > 10)
  2870  001C3A  502A               	movf	scale@scl,w,c
  2871  001C3C  0A80               	xorlw	128
  2872  001C3E  0F75               	addlw	-139
  2873  001C40  A0D8               	btfss	status,0,c
  2874  001C42  D053               	goto	l232
  2875                           
  2876                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2877  001C44  0E00               	movlw	0
  2878  001C46  6E0A               	movwf	___awdiv@divisor+1,c
  2879  001C48  0E0A               	movlw	10
  2880  001C4A  6E09               	movwf	___awdiv@divisor,c
  2881  001C4C  502A               	movf	scale@scl,w,c
  2882  001C4E  6E07               	movwf	___awdiv@dividend,c
  2883  001C50  6A08               	clrf	___awdiv@dividend+1,c
  2884  001C52  BE07               	btfsc	___awdiv@dividend,7,c
  2885  001C54  0608               	decf	___awdiv@dividend+1,f,c
  2886  001C56  ECD7  F014         	call	___awdiv	;wreg free
  2887  001C5A  0E09               	movlw	9
  2888  001C5C  2407               	addwf	?___awdiv,w,c
  2889  001C5E  6E0F               	movwf	___wmul@multiplier,c
  2890  001C60  0E00               	movlw	0
  2891  001C62  2008               	addwfc	?___awdiv+1,w,c
  2892  001C64  6E10               	movwf	___wmul@multiplier+1,c
  2893  001C66  0E00               	movlw	0
  2894  001C68  6E12               	movwf	___wmul@multiplicand+1,c
  2895  001C6A  0E03               	movlw	3
  2896  001C6C  6E11               	movwf	___wmul@multiplicand,c
  2897  001C6E  EC8B  F017         	call	___wmul	;wreg free
  2898  001C72  0E29               	movlw	low __powers_
  2899  001C74  240F               	addwf	?___wmul,w,c
  2900  001C76  6EF6               	movwf	tblptrl,c
  2901  001C78  0E10               	movlw	high __powers_
  2902  001C7A  2010               	addwfc	?___wmul+1,w,c
  2903  001C7C  6EF7               	movwf	tblptrh,c
  2904  001C7E                     	if	0	;There are less than 3 active tblptr bytes
  2905  001C7E                     	endif
  2906  001C7E  0009               	tblrd		*+
  2907  001C80  CFF5 F015          	movff	tablat,___ftmul@f1
  2908  001C84  0009               	tblrd		*+
  2909  001C86  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2910  001C8A  000A               	tblrd		*-
  2911  001C8C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2912  001C90  0E00               	movlw	0
  2913  001C92  6E12               	movwf	___wmul@multiplicand+1,c
  2914  001C94  0E03               	movlw	3
  2915  001C96  6E11               	movwf	___wmul@multiplicand,c
  2916  001C98  0E00               	movlw	0
  2917  001C9A  6E04               	movwf	___awmod@divisor+1,c
  2918  001C9C  0E0A               	movlw	10
  2919  001C9E  6E03               	movwf	___awmod@divisor,c
  2920  001CA0  502A               	movf	scale@scl,w,c
  2921  001CA2  6E01               	movwf	___awmod@dividend,c
  2922  001CA4  6A02               	clrf	___awmod@dividend+1,c
  2923  001CA6  BE01               	btfsc	___awmod@dividend,7,c
  2924  001CA8  0602               	decf	___awmod@dividend+1,f,c
  2925  001CAA  EC5A  F015         	call	___awmod	;wreg free
  2926  001CAE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2927  001CB2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2928  001CB6  EC8B  F017         	call	___wmul	;wreg free
  2929  001CBA  0E29               	movlw	low __powers_
  2930  001CBC  240F               	addwf	?___wmul,w,c
  2931  001CBE  6EF6               	movwf	tblptrl,c
  2932  001CC0  0E10               	movlw	high __powers_
  2933  001CC2  2010               	addwfc	?___wmul+1,w,c
  2934  001CC4  6EF7               	movwf	tblptrh,c
  2935  001CC6                     	if	0	;There are less than 3 active tblptr bytes
  2936  001CC6                     	endif
  2937  001CC6  0009               	tblrd		*+
  2938  001CC8  CFF5 F018          	movff	tablat,___ftmul@f2
  2939  001CCC  0009               	tblrd		*+
  2940  001CCE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2941  001CD2  000A               	tblrd		*-
  2942  001CD4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2943  001CD8  EC69  F012         	call	___ftmul	;wreg free
  2944  001CDC  C015  F024         	movff	?___ftmul,?_scale
  2945  001CE0  C016  F025         	movff	?___ftmul+1,?_scale+1
  2946  001CE4  C017  F026         	movff	?___ftmul+2,?_scale+2
  2947  001CE8  0012               	return	
  2948  001CEA                     l232:
  2949                           
  2950                           ;doprnt.c: 440: return _powers_[scl];
  2951  001CEA  502A               	movf	scale@scl,w,c
  2952  001CEC  0D03               	mullw	3
  2953  001CEE  0E29               	movlw	low __powers_
  2954  001CF0  24F3               	addwf	prodl,w,c
  2955  001CF2  6EF6               	movwf	tblptrl,c
  2956  001CF4  0E10               	movlw	high __powers_
  2957  001CF6  20F4               	addwfc	prodh,w,c
  2958  001CF8  6EF7               	movwf	tblptrh,c
  2959  001CFA                     	if	0	;There are less than 3 active tblptr bytes
  2960  001CFA                     	endif
  2961  001CFA  0009               	tblrd		*+
  2962  001CFC  CFF5 F024          	movff	tablat,?_scale
  2963  001D00  0009               	tblrd		*+
  2964  001D02  CFF5 F025          	movff	tablat,?_scale+1
  2965  001D06  000A               	tblrd		*-
  2966  001D08  CFF5 F026          	movff	tablat,?_scale+2
  2967  001D0C  0012               	return	
  2968  001D0E                     __end_of_scale:
  2969                           	opt stack 0
  2970                           tblptru	equ	0xFF8
  2971                           tblptrh	equ	0xFF7
  2972                           tblptrl	equ	0xFF6
  2973                           tablat	equ	0xFF5
  2974                           prodh	equ	0xFF4
  2975                           prodl	equ	0xFF3
  2976                           intcon	equ	0xFF2
  2977                           postinc0	equ	0xFEE
  2978                           wreg	equ	0xFE8
  2979                           postdec1	equ	0xFE5
  2980                           fsr1l	equ	0xFE1
  2981                           indf2	equ	0xFDF
  2982                           postinc2	equ	0xFDE
  2983                           postdec2	equ	0xFDD
  2984                           fsr2h	equ	0xFDA
  2985                           fsr2l	equ	0xFD9
  2986                           status	equ	0xFD8
  2987                           
  2988 ;; *************** function _isdigit *****************
  2989 ;; Defined at:
  2990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  2991 ;; Parameters:    Size  Location     Type
  2992 ;;  c               1    wreg     unsigned char 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  c               1    2[COMRAM] unsigned char 
  2995 ;; Return value:  Size  Location     Type
  2996 ;;		None               void
  2997 ;; Registers used:
  2998 ;;		wreg, status,2, status,0
  2999 ;; Tracked objects:
  3000 ;;		On entry : 0/0
  3001 ;;		On exit  : 0/0
  3002 ;;		Unchanged: 0/0
  3003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;Total ram usage:        3 bytes
  3009 ;; Hardware stack levels used:    1
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_sprintf
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text4
  3018  002FCC                     __ptext4:
  3019                           	opt stack 0
  3020  002FCC                     _isdigit:
  3021                           	opt stack 29
  3022                           
  3023                           ;incstack = 0
  3024                           ;isdigit@c stored from wreg
  3025  002FCC  6E03               	movwf	isdigit@c,c
  3026  002FCE  0E00               	movlw	0
  3027  002FD0  6E02               	movwf	_isdigit$755,c
  3028  002FD2  0E3A               	movlw	58
  3029  002FD4  6003               	cpfslt	isdigit@c,c
  3030  002FD6  D005               	goto	l674
  3031  002FD8  0E2F               	movlw	47
  3032  002FDA  6403               	cpfsgt	isdigit@c,c
  3033  002FDC  D002               	goto	l674
  3034  002FDE  0E01               	movlw	1
  3035  002FE0  6E02               	movwf	_isdigit$755,c
  3036  002FE2                     l674:
  3037  002FE2  C002  F001         	movff	_isdigit$755,??_isdigit
  3038  002FE6  3001               	rrcf	??_isdigit,w,c
  3039  002FE8  0012               	return	
  3040  002FEA                     __end_of_isdigit:
  3041                           	opt stack 0
  3042                           tblptru	equ	0xFF8
  3043                           tblptrh	equ	0xFF7
  3044                           tblptrl	equ	0xFF6
  3045                           tablat	equ	0xFF5
  3046                           prodh	equ	0xFF4
  3047                           prodl	equ	0xFF3
  3048                           intcon	equ	0xFF2
  3049                           postinc0	equ	0xFEE
  3050                           wreg	equ	0xFE8
  3051                           postdec1	equ	0xFE5
  3052                           fsr1l	equ	0xFE1
  3053                           indf2	equ	0xFDF
  3054                           postinc2	equ	0xFDE
  3055                           postdec2	equ	0xFDD
  3056                           fsr2h	equ	0xFDA
  3057                           fsr2l	equ	0xFD9
  3058                           status	equ	0xFD8
  3059                           
  3060 ;; *************** function _fround *****************
  3061 ;; Defined at:
  3062 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;  prec            1    wreg     unsigned char 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  prec            1   44[COMRAM] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;                  3   35[COMRAM] unsigned char 
  3069 ;; Registers used:
  3070 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3076 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3079 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;Total ram usage:       10 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    2
  3083 ;; This function calls:
  3084 ;;		___awdiv
  3085 ;;		___awmod
  3086 ;;		___ftmul
  3087 ;;		___wmul
  3088 ;; This function is called by:
  3089 ;;		_sprintf
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text5
  3094  001D0E                     __ptext5:
  3095                           	opt stack 0
  3096  001D0E                     _fround:
  3097                           	opt stack 27
  3098                           
  3099                           ;incstack = 0
  3100                           ;fround@prec stored from wreg
  3101  001D0E  6E2D               	movwf	fround@prec,c
  3102                           
  3103                           ;doprnt.c: 413: if(prec>=110)
  3104  001D10  0E6D               	movlw	109
  3105  001D12  642D               	cpfsgt	fround@prec,c
  3106  001D14  D09F               	goto	l219
  3107                           
  3108                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3109  001D16  0E00               	movlw	0
  3110  001D18  6E12               	movwf	___wmul@multiplicand+1,c
  3111  001D1A  0E03               	movlw	3
  3112  001D1C  6E11               	movwf	___wmul@multiplicand,c
  3113  001D1E  0E00               	movlw	0
  3114  001D20  6E0A               	movwf	___awdiv@divisor+1,c
  3115  001D22  0E0A               	movlw	10
  3116  001D24  6E09               	movwf	___awdiv@divisor,c
  3117  001D26  0E00               	movlw	0
  3118  001D28  6E04               	movwf	___awmod@divisor+1,c
  3119  001D2A  0E64               	movlw	100
  3120  001D2C  6E03               	movwf	___awmod@divisor,c
  3121  001D2E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3122  001D32  6A02               	clrf	___awmod@dividend+1,c
  3123  001D34  EC5A  F015         	call	___awmod	;wreg free
  3124  001D38  C001  F007         	movff	?___awmod,___awdiv@dividend
  3125  001D3C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3126  001D40  ECD7  F014         	call	___awdiv	;wreg free
  3127  001D44  0E09               	movlw	9
  3128  001D46  2407               	addwf	?___awdiv,w,c
  3129  001D48  6E0F               	movwf	___wmul@multiplier,c
  3130  001D4A  0E00               	movlw	0
  3131  001D4C  2008               	addwfc	?___awdiv+1,w,c
  3132  001D4E  6E10               	movwf	___wmul@multiplier+1,c
  3133  001D50  EC8B  F017         	call	___wmul	;wreg free
  3134  001D54  0E50               	movlw	low __npowers_
  3135  001D56  240F               	addwf	?___wmul,w,c
  3136  001D58  6EF6               	movwf	tblptrl,c
  3137  001D5A  0E10               	movlw	high __npowers_
  3138  001D5C  2010               	addwfc	?___wmul+1,w,c
  3139  001D5E  6EF7               	movwf	tblptrh,c
  3140  001D60                     	if	0	;There are less than 3 active tblptr bytes
  3141  001D60                     	endif
  3142  001D60  0009               	tblrd		*+
  3143  001D62  CFF5 F018          	movff	tablat,___ftmul@f2
  3144  001D66  0009               	tblrd		*+
  3145  001D68  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3146  001D6C  000A               	tblrd		*-
  3147  001D6E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3148  001D72  0E00               	movlw	0
  3149  001D74  6E0A               	movwf	___awdiv@divisor+1,c
  3150  001D76  0E64               	movlw	100
  3151  001D78  6E09               	movwf	___awdiv@divisor,c
  3152  001D7A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3153  001D7E  6A08               	clrf	___awdiv@dividend+1,c
  3154  001D80  ECD7  F014         	call	___awdiv	;wreg free
  3155  001D84  0E12               	movlw	18
  3156  001D86  2407               	addwf	?___awdiv,w,c
  3157  001D88  6E0F               	movwf	___wmul@multiplier,c
  3158  001D8A  0E00               	movlw	0
  3159  001D8C  2008               	addwfc	?___awdiv+1,w,c
  3160  001D8E  6E10               	movwf	___wmul@multiplier+1,c
  3161  001D90  0E00               	movlw	0
  3162  001D92  6E12               	movwf	___wmul@multiplicand+1,c
  3163  001D94  0E03               	movlw	3
  3164  001D96  6E11               	movwf	___wmul@multiplicand,c
  3165  001D98  EC8B  F017         	call	___wmul	;wreg free
  3166  001D9C  0E50               	movlw	low __npowers_
  3167  001D9E  240F               	addwf	?___wmul,w,c
  3168  001DA0  6EF6               	movwf	tblptrl,c
  3169  001DA2  0E10               	movlw	high __npowers_
  3170  001DA4  2010               	addwfc	?___wmul+1,w,c
  3171  001DA6  6EF7               	movwf	tblptrh,c
  3172  001DA8                     	if	0	;There are less than 3 active tblptr bytes
  3173  001DA8                     	endif
  3174  001DA8  0009               	tblrd		*+
  3175  001DAA  CFF5 F015          	movff	tablat,___ftmul@f1
  3176  001DAE  0009               	tblrd		*+
  3177  001DB0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3178  001DB4  000A               	tblrd		*-
  3179  001DB6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3180  001DBA  EC69  F012         	call	___ftmul	;wreg free
  3181  001DBE  C015  F02A         	movff	?___ftmul,_fround$1106
  3182  001DC2  C016  F02B         	movff	?___ftmul+1,_fround$1106+1
  3183  001DC6  C017  F02C         	movff	?___ftmul+2,_fround$1106+2
  3184                           
  3185                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3186  001DCA  0E00               	movlw	0
  3187  001DCC  6E12               	movwf	___wmul@multiplicand+1,c
  3188  001DCE  0E03               	movlw	3
  3189  001DD0  6E11               	movwf	___wmul@multiplicand,c
  3190  001DD2  0E00               	movlw	0
  3191  001DD4  6E04               	movwf	___awmod@divisor+1,c
  3192  001DD6  0E0A               	movlw	10
  3193  001DD8  6E03               	movwf	___awmod@divisor,c
  3194  001DDA  C02D  F001         	movff	fround@prec,___awmod@dividend
  3195  001DDE  6A02               	clrf	___awmod@dividend+1,c
  3196  001DE0  EC5A  F015         	call	___awmod	;wreg free
  3197  001DE4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3198  001DE8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3199  001DEC  EC8B  F017         	call	___wmul	;wreg free
  3200  001DF0  0E50               	movlw	low __npowers_
  3201  001DF2  240F               	addwf	?___wmul,w,c
  3202  001DF4  6EF6               	movwf	tblptrl,c
  3203  001DF6  0E10               	movlw	high __npowers_
  3204  001DF8  2010               	addwfc	?___wmul+1,w,c
  3205  001DFA  6EF7               	movwf	tblptrh,c
  3206  001DFC                     	if	0	;There are less than 3 active tblptr bytes
  3207  001DFC                     	endif
  3208  001DFC  0009               	tblrd		*+
  3209  001DFE  CFF5 F018          	movff	tablat,___ftmul@f2
  3210  001E02  0009               	tblrd		*+
  3211  001E04  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3212  001E08  000A               	tblrd		*-
  3213  001E0A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3214  001E0E  C02A  F015         	movff	_fround$1106,___ftmul@f1
  3215  001E12  C02B  F016         	movff	_fround$1106+1,___ftmul@f1+1
  3216  001E16  C02C  F017         	movff	_fround$1106+2,___ftmul@f1+2
  3217  001E1A  EC69  F012         	call	___ftmul	;wreg free
  3218  001E1E  C015  F027         	movff	?___ftmul,_fround$1107
  3219  001E22  C016  F028         	movff	?___ftmul+1,_fround$1107+1
  3220  001E26  C017  F029         	movff	?___ftmul+2,_fround$1107+2
  3221                           
  3222                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3223  001E2A  C027  F015         	movff	_fround$1107,___ftmul@f1
  3224  001E2E  C028  F016         	movff	_fround$1107+1,___ftmul@f1+1
  3225  001E32  C029  F017         	movff	_fround$1107+2,___ftmul@f1+2
  3226  001E36  0E00               	movlw	0
  3227  001E38  6E18               	movwf	___ftmul@f2,c
  3228  001E3A  0E00               	movlw	0
  3229  001E3C  6E19               	movwf	___ftmul@f2+1,c
  3230  001E3E  0E3F               	movlw	63
  3231  001E40  6E1A               	movwf	___ftmul@f2+2,c
  3232  001E42  EC69  F012         	call	___ftmul	;wreg free
  3233  001E46  C015  F024         	movff	?___ftmul,?_fround
  3234  001E4A  C016  F025         	movff	?___ftmul+1,?_fround+1
  3235  001E4E  C017  F026         	movff	?___ftmul+2,?_fround+2
  3236  001E52  0012               	return	
  3237  001E54                     l219:
  3238                           
  3239                           ;doprnt.c: 415: else if(prec > 10)
  3240  001E54  0E0A               	movlw	10
  3241  001E56  642D               	cpfsgt	fround@prec,c
  3242  001E58  D063               	goto	l222
  3243                           
  3244                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3245  001E5A  0E00               	movlw	0
  3246  001E5C  6E12               	movwf	___wmul@multiplicand+1,c
  3247  001E5E  0E03               	movlw	3
  3248  001E60  6E11               	movwf	___wmul@multiplicand,c
  3249  001E62  0E00               	movlw	0
  3250  001E64  6E04               	movwf	___awmod@divisor+1,c
  3251  001E66  0E0A               	movlw	10
  3252  001E68  6E03               	movwf	___awmod@divisor,c
  3253  001E6A  C02D  F001         	movff	fround@prec,___awmod@dividend
  3254  001E6E  6A02               	clrf	___awmod@dividend+1,c
  3255  001E70  EC5A  F015         	call	___awmod	;wreg free
  3256  001E74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3257  001E78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3258  001E7C  EC8B  F017         	call	___wmul	;wreg free
  3259  001E80  0E50               	movlw	low __npowers_
  3260  001E82  240F               	addwf	?___wmul,w,c
  3261  001E84  6EF6               	movwf	tblptrl,c
  3262  001E86  0E10               	movlw	high __npowers_
  3263  001E88  2010               	addwfc	?___wmul+1,w,c
  3264  001E8A  6EF7               	movwf	tblptrh,c
  3265  001E8C                     	if	0	;There are less than 3 active tblptr bytes
  3266  001E8C                     	endif
  3267  001E8C  0009               	tblrd		*+
  3268  001E8E  CFF5 F018          	movff	tablat,___ftmul@f2
  3269  001E92  0009               	tblrd		*+
  3270  001E94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3271  001E98  000A               	tblrd		*-
  3272  001E9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3273  001E9E  0E00               	movlw	0
  3274  001EA0  6E0A               	movwf	___awdiv@divisor+1,c
  3275  001EA2  0E0A               	movlw	10
  3276  001EA4  6E09               	movwf	___awdiv@divisor,c
  3277  001EA6  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3278  001EAA  6A08               	clrf	___awdiv@dividend+1,c
  3279  001EAC  ECD7  F014         	call	___awdiv	;wreg free
  3280  001EB0  0E09               	movlw	9
  3281  001EB2  2407               	addwf	?___awdiv,w,c
  3282  001EB4  6E0F               	movwf	___wmul@multiplier,c
  3283  001EB6  0E00               	movlw	0
  3284  001EB8  2008               	addwfc	?___awdiv+1,w,c
  3285  001EBA  6E10               	movwf	___wmul@multiplier+1,c
  3286  001EBC  0E00               	movlw	0
  3287  001EBE  6E12               	movwf	___wmul@multiplicand+1,c
  3288  001EC0  0E03               	movlw	3
  3289  001EC2  6E11               	movwf	___wmul@multiplicand,c
  3290  001EC4  EC8B  F017         	call	___wmul	;wreg free
  3291  001EC8  0E50               	movlw	low __npowers_
  3292  001ECA  240F               	addwf	?___wmul,w,c
  3293  001ECC  6EF6               	movwf	tblptrl,c
  3294  001ECE  0E10               	movlw	high __npowers_
  3295  001ED0  2010               	addwfc	?___wmul+1,w,c
  3296  001ED2  6EF7               	movwf	tblptrh,c
  3297  001ED4                     	if	0	;There are less than 3 active tblptr bytes
  3298  001ED4                     	endif
  3299  001ED4  0009               	tblrd		*+
  3300  001ED6  CFF5 F015          	movff	tablat,___ftmul@f1
  3301  001EDA  0009               	tblrd		*+
  3302  001EDC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3303  001EE0  000A               	tblrd		*-
  3304  001EE2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3305  001EE6  EC69  F012         	call	___ftmul	;wreg free
  3306  001EEA  C015  F02A         	movff	?___ftmul,_fround$1106
  3307  001EEE  C016  F02B         	movff	?___ftmul+1,_fround$1106+1
  3308  001EF2  C017  F02C         	movff	?___ftmul+2,_fround$1106+2
  3309                           
  3310                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3311  001EF6  C02A  F015         	movff	_fround$1106,___ftmul@f1
  3312  001EFA  C02B  F016         	movff	_fround$1106+1,___ftmul@f1+1
  3313  001EFE  C02C  F017         	movff	_fround$1106+2,___ftmul@f1+2
  3314  001F02  0E00               	movlw	0
  3315  001F04  6E18               	movwf	___ftmul@f2,c
  3316  001F06  0E00               	movlw	0
  3317  001F08  6E19               	movwf	___ftmul@f2+1,c
  3318  001F0A  0E3F               	movlw	63
  3319  001F0C  6E1A               	movwf	___ftmul@f2+2,c
  3320  001F0E  EC69  F012         	call	___ftmul	;wreg free
  3321  001F12  C015  F024         	movff	?___ftmul,?_fround
  3322  001F16  C016  F025         	movff	?___ftmul+1,?_fround+1
  3323  001F1A  C017  F026         	movff	?___ftmul+2,?_fround+2
  3324  001F1E  0012               	return	
  3325  001F20                     l222:
  3326                           
  3327                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3328  001F20  502D               	movf	fround@prec,w,c
  3329  001F22  0D03               	mullw	3
  3330  001F24  0E50               	movlw	low __npowers_
  3331  001F26  24F3               	addwf	prodl,w,c
  3332  001F28  6EF6               	movwf	tblptrl,c
  3333  001F2A  0E10               	movlw	high __npowers_
  3334  001F2C  20F4               	addwfc	prodh,w,c
  3335  001F2E  6EF7               	movwf	tblptrh,c
  3336  001F30                     	if	0	;There are less than 3 active tblptr bytes
  3337  001F30                     	endif
  3338  001F30  0009               	tblrd		*+
  3339  001F32  CFF5 F015          	movff	tablat,___ftmul@f1
  3340  001F36  0009               	tblrd		*+
  3341  001F38  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3342  001F3C  000A               	tblrd		*-
  3343  001F3E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3344  001F42  0E00               	movlw	0
  3345  001F44  6E18               	movwf	___ftmul@f2,c
  3346  001F46  0E00               	movlw	0
  3347  001F48  6E19               	movwf	___ftmul@f2+1,c
  3348  001F4A  0E3F               	movlw	63
  3349  001F4C  6E1A               	movwf	___ftmul@f2+2,c
  3350  001F4E  EC69  F012         	call	___ftmul	;wreg free
  3351  001F52  C015  F024         	movff	?___ftmul,?_fround
  3352  001F56  C016  F025         	movff	?___ftmul+1,?_fround+1
  3353  001F5A  C017  F026         	movff	?___ftmul+2,?_fround+2
  3354  001F5E  0012               	return	
  3355  001F60                     __end_of_fround:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           postinc0	equ	0xFEE
  3365                           wreg	equ	0xFE8
  3366                           postdec1	equ	0xFE5
  3367                           fsr1l	equ	0xFE1
  3368                           indf2	equ	0xFDF
  3369                           postinc2	equ	0xFDE
  3370                           postdec2	equ	0xFDD
  3371                           fsr2h	equ	0xFDA
  3372                           fsr2l	equ	0xFD9
  3373                           status	equ	0xFD8
  3374                           
  3375 ;; *************** function ___ftmul *****************
  3376 ;; Defined at:
  3377 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  f1              3   20[COMRAM] float 
  3380 ;;  f2              3   23[COMRAM] float 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3383 ;;  sign            1   34[COMRAM] unsigned char 
  3384 ;;  cntr            1   33[COMRAM] unsigned char 
  3385 ;;  exp             1   29[COMRAM] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  3   20[COMRAM] float 
  3388 ;; Registers used:
  3389 ;;		wreg, status,2, status,0, cstack
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3395 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;Total ram usage:       15 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    1
  3402 ;; This function calls:
  3403 ;;		___ftpack
  3404 ;; This function is called by:
  3405 ;;		_main
  3406 ;;		_fround
  3407 ;;		_scale
  3408 ;;		_sprintf
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text6
  3413  0024D2                     __ptext6:
  3414                           	opt stack 0
  3415  0024D2                     ___ftmul:
  3416                           	opt stack 27
  3417                           
  3418                           ;incstack = 0
  3419  0024D2  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3420  0024D6  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3421  0024D8  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3422  0024DA  3416               	rlcf	___ftmul@f1+1,w,c
  3423  0024DC  361B               	rlcf	??___ftmul& (0+255),f,c
  3424  0024DE  E301               	bnc	u1981
  3425  0024E0  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3426  0024E2                     u1981:
  3427  0024E2  501B               	movf	??___ftmul,w,c
  3428  0024E4  6E1E               	movwf	___ftmul@exp,c
  3429  0024E6  501E               	movf	___ftmul@exp,w,c
  3430  0024E8  A4D8               	btfss	status,2,c
  3431  0024EA  D007               	goto	l638
  3432  0024EC  0E00               	movlw	0
  3433  0024EE  6E15               	movwf	?___ftmul,c
  3434  0024F0  0E00               	movlw	0
  3435  0024F2  6E16               	movwf	?___ftmul+1,c
  3436  0024F4  0E00               	movlw	0
  3437  0024F6  6E17               	movwf	?___ftmul+2,c
  3438  0024F8  0012               	return	
  3439  0024FA                     l638:
  3440  0024FA  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3441  0024FE  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3442  002500  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3443  002502  3419               	rlcf	___ftmul@f2+1,w,c
  3444  002504  361B               	rlcf	??___ftmul& (0+255),f,c
  3445  002506  E301               	bnc	u2001
  3446  002508  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3447  00250A                     u2001:
  3448  00250A  501B               	movf	??___ftmul,w,c
  3449  00250C  6E23               	movwf	___ftmul@sign,c
  3450  00250E  5023               	movf	___ftmul@sign,w,c
  3451  002510  A4D8               	btfss	status,2,c
  3452  002512  D007               	goto	l640
  3453  002514  0E00               	movlw	0
  3454  002516  6E15               	movwf	?___ftmul,c
  3455  002518  0E00               	movlw	0
  3456  00251A  6E16               	movwf	?___ftmul+1,c
  3457  00251C  0E00               	movlw	0
  3458  00251E  6E17               	movwf	?___ftmul+2,c
  3459  002520  0012               	return	
  3460  002522                     l640:
  3461  002522  5023               	movf	___ftmul@sign,w,c
  3462  002524  0F7B               	addlw	123
  3463  002526  261E               	addwf	___ftmul@exp,f,c
  3464  002528  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3465  00252C  501A               	movf	___ftmul@f2+2,w,c
  3466  00252E  1A23               	xorwf	___ftmul@sign,f,c
  3467  002530  0E80               	movlw	128
  3468  002532  1623               	andwf	___ftmul@sign,f,c
  3469  002534  8E16               	bsf	___ftmul@f1+1,7,c
  3470  002536  8E19               	bsf	___ftmul@f2+1,7,c
  3471  002538  0EFF               	movlw	255
  3472  00253A  1618               	andwf	___ftmul@f2,f,c
  3473  00253C  0EFF               	movlw	255
  3474  00253E  1619               	andwf	___ftmul@f2+1,f,c
  3475  002540  0E00               	movlw	0
  3476  002542  161A               	andwf	___ftmul@f2+2,f,c
  3477  002544  0E00               	movlw	0
  3478  002546  6E1F               	movwf	___ftmul@f3_as_product,c
  3479  002548  0E00               	movlw	0
  3480  00254A  6E20               	movwf	___ftmul@f3_as_product+1,c
  3481  00254C  0E00               	movlw	0
  3482  00254E  6E21               	movwf	___ftmul@f3_as_product+2,c
  3483  002550  0E07               	movlw	7
  3484  002552  6E22               	movwf	___ftmul@cntr,c
  3485  002554  A015               	btfss	___ftmul@f1,0,c
  3486  002556  D006               	goto	l642
  3487  002558  5018               	movf	___ftmul@f2,w,c
  3488  00255A  261F               	addwf	___ftmul@f3_as_product,f,c
  3489  00255C  5019               	movf	___ftmul@f2+1,w,c
  3490  00255E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3491  002560  501A               	movf	___ftmul@f2+2,w,c
  3492  002562  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3493  002564                     l642:
  3494  002564  90D8               	bcf	status,0,c
  3495  002566  3217               	rrcf	___ftmul@f1+2,f,c
  3496  002568  3216               	rrcf	___ftmul@f1+1,f,c
  3497  00256A  3215               	rrcf	___ftmul@f1,f,c
  3498  00256C  90D8               	bcf	status,0,c
  3499  00256E  3618               	rlcf	___ftmul@f2,f,c
  3500  002570  3619               	rlcf	___ftmul@f2+1,f,c
  3501  002572  361A               	rlcf	___ftmul@f2+2,f,c
  3502  002574  2E22               	decfsz	___ftmul@cntr,f,c
  3503  002576  D7EE               	goto	l641
  3504  002578  0E09               	movlw	9
  3505  00257A  6E22               	movwf	___ftmul@cntr,c
  3506  00257C  A015               	btfss	___ftmul@f1,0,c
  3507  00257E  D006               	goto	l645
  3508  002580  5018               	movf	___ftmul@f2,w,c
  3509  002582  261F               	addwf	___ftmul@f3_as_product,f,c
  3510  002584  5019               	movf	___ftmul@f2+1,w,c
  3511  002586  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3512  002588  501A               	movf	___ftmul@f2+2,w,c
  3513  00258A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3514  00258C                     l645:
  3515  00258C  90D8               	bcf	status,0,c
  3516  00258E  3217               	rrcf	___ftmul@f1+2,f,c
  3517  002590  3216               	rrcf	___ftmul@f1+1,f,c
  3518  002592  3215               	rrcf	___ftmul@f1,f,c
  3519  002594  90D8               	bcf	status,0,c
  3520  002596  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3521  002598  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3522  00259A  321F               	rrcf	___ftmul@f3_as_product,f,c
  3523  00259C  2E22               	decfsz	___ftmul@cntr,f,c
  3524  00259E  D7EE               	goto	l644
  3525  0025A0  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3526  0025A4  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3527  0025A8  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3528  0025AC  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3529  0025B0  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3530  0025B4  EC38  F014         	call	___ftpack	;wreg free
  3531  0025B8  C001  F015         	movff	?___ftpack,?___ftmul
  3532  0025BC  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3533  0025C0  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3534  0025C4  0012               	return	
  3535  0025C6                     __end_of___ftmul:
  3536                           	opt stack 0
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           intcon	equ	0xFF2
  3544                           postinc0	equ	0xFEE
  3545                           wreg	equ	0xFE8
  3546                           postdec1	equ	0xFE5
  3547                           fsr1l	equ	0xFE1
  3548                           indf2	equ	0xFDF
  3549                           postinc2	equ	0xFDE
  3550                           postdec2	equ	0xFDD
  3551                           fsr2h	equ	0xFDA
  3552                           fsr2l	equ	0xFD9
  3553                           status	equ	0xFD8
  3554                           
  3555 ;; *************** function ___awmod *****************
  3556 ;; Defined at:
  3557 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  3558 ;; Parameters:    Size  Location     Type
  3559 ;;  dividend        2    0[COMRAM] int 
  3560 ;;  divisor         2    2[COMRAM] int 
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  sign            1    5[COMRAM] unsigned char 
  3563 ;;  counter         1    4[COMRAM] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  2    0[COMRAM] int 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:        6 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; This function calls:
  3580 ;;		Nothing
  3581 ;; This function is called by:
  3582 ;;		_fround
  3583 ;;		_scale
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text7
  3588  002AB4                     __ptext7:
  3589                           	opt stack 0
  3590  002AB4                     ___awmod:
  3591                           	opt stack 28
  3592                           
  3593                           ;incstack = 0
  3594  002AB4  0E00               	movlw	0
  3595  002AB6  6E06               	movwf	___awmod@sign,c
  3596  002AB8  AE02               	btfss	___awmod@dividend+1,7,c
  3597  002ABA  D006               	goto	l491
  3598  002ABC  6C01               	negf	___awmod@dividend,c
  3599  002ABE  1E02               	comf	___awmod@dividend+1,f,c
  3600  002AC0  B0D8               	btfsc	status,0,c
  3601  002AC2  2A02               	incf	___awmod@dividend+1,f,c
  3602  002AC4  0E01               	movlw	1
  3603  002AC6  6E06               	movwf	___awmod@sign,c
  3604  002AC8                     l491:
  3605  002AC8  AE04               	btfss	___awmod@divisor+1,7,c
  3606  002ACA  D004               	goto	l492
  3607  002ACC  6C03               	negf	___awmod@divisor,c
  3608  002ACE  1E04               	comf	___awmod@divisor+1,f,c
  3609  002AD0  B0D8               	btfsc	status,0,c
  3610  002AD2  2A04               	incf	___awmod@divisor+1,f,c
  3611  002AD4                     l492:
  3612  002AD4  5003               	movf	___awmod@divisor,w,c
  3613  002AD6  1004               	iorwf	___awmod@divisor+1,w,c
  3614  002AD8  B4D8               	btfsc	status,2,c
  3615  002ADA  D018               	goto	l499
  3616  002ADC  0E01               	movlw	1
  3617  002ADE  6E05               	movwf	___awmod@counter,c
  3618  002AE0  D004               	goto	l494
  3619  002AE2  90D8               	bcf	status,0,c
  3620  002AE4  3603               	rlcf	___awmod@divisor,f,c
  3621  002AE6  3604               	rlcf	___awmod@divisor+1,f,c
  3622  002AE8  2A05               	incf	___awmod@counter,f,c
  3623  002AEA                     l494:
  3624  002AEA  AE04               	btfss	___awmod@divisor+1,7,c
  3625  002AEC  D7FA               	goto	l495
  3626  002AEE                     u2130:
  3627  002AEE  5003               	movf	___awmod@divisor,w,c
  3628  002AF0  5C01               	subwf	___awmod@dividend,w,c
  3629  002AF2  5004               	movf	___awmod@divisor+1,w,c
  3630  002AF4  5802               	subwfb	___awmod@dividend+1,w,c
  3631  002AF6  A0D8               	btfss	status,0,c
  3632  002AF8  D004               	goto	l498
  3633  002AFA  5003               	movf	___awmod@divisor,w,c
  3634  002AFC  5E01               	subwf	___awmod@dividend,f,c
  3635  002AFE  5004               	movf	___awmod@divisor+1,w,c
  3636  002B00  5A02               	subwfb	___awmod@dividend+1,f,c
  3637  002B02                     l498:
  3638  002B02  90D8               	bcf	status,0,c
  3639  002B04  3204               	rrcf	___awmod@divisor+1,f,c
  3640  002B06  3203               	rrcf	___awmod@divisor,f,c
  3641  002B08  2E05               	decfsz	___awmod@counter,f,c
  3642  002B0A  D7F1               	goto	u2130
  3643  002B0C                     l499:
  3644  002B0C  5006               	movf	___awmod@sign,w,c
  3645  002B0E  B4D8               	btfsc	status,2,c
  3646  002B10  D004               	goto	l500
  3647  002B12  6C01               	negf	___awmod@dividend,c
  3648  002B14  1E02               	comf	___awmod@dividend+1,f,c
  3649  002B16  B0D8               	btfsc	status,0,c
  3650  002B18  2A02               	incf	___awmod@dividend+1,f,c
  3651  002B1A                     l500:
  3652  002B1A  C001  F001         	movff	___awmod@dividend,?___awmod
  3653  002B1E  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3654  002B22  0012               	return	
  3655  002B24                     __end_of___awmod:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1l	equ	0xFE1
  3668                           indf2	equ	0xFDF
  3669                           postinc2	equ	0xFDE
  3670                           postdec2	equ	0xFDD
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function ___awdiv *****************
  3676 ;; Defined at:
  3677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  dividend        2    6[COMRAM] int 
  3680 ;;  divisor         2    8[COMRAM] int 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  quotient        2   12[COMRAM] int 
  3683 ;;  sign            1   11[COMRAM] unsigned char 
  3684 ;;  counter         1   10[COMRAM] unsigned char 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  2    6[COMRAM] int 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2, status,0
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3694 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;Total ram usage:        8 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; This function calls:
  3701 ;;		Nothing
  3702 ;; This function is called by:
  3703 ;;		_fround
  3704 ;;		_scale
  3705 ;;		_sprintf
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text8
  3710  0029AE                     __ptext8:
  3711                           	opt stack 0
  3712  0029AE                     ___awdiv:
  3713                           	opt stack 28
  3714                           
  3715                           ;incstack = 0
  3716  0029AE  0E00               	movlw	0
  3717  0029B0  6E0C               	movwf	___awdiv@sign,c
  3718  0029B2  AE0A               	btfss	___awdiv@divisor+1,7,c
  3719  0029B4  D006               	goto	l478
  3720  0029B6  6C09               	negf	___awdiv@divisor,c
  3721  0029B8  1E0A               	comf	___awdiv@divisor+1,f,c
  3722  0029BA  B0D8               	btfsc	status,0,c
  3723  0029BC  2A0A               	incf	___awdiv@divisor+1,f,c
  3724  0029BE  0E01               	movlw	1
  3725  0029C0  6E0C               	movwf	___awdiv@sign,c
  3726  0029C2                     l478:
  3727  0029C2  AE08               	btfss	___awdiv@dividend+1,7,c
  3728  0029C4  D006               	goto	l479
  3729  0029C6  6C07               	negf	___awdiv@dividend,c
  3730  0029C8  1E08               	comf	___awdiv@dividend+1,f,c
  3731  0029CA  B0D8               	btfsc	status,0,c
  3732  0029CC  2A08               	incf	___awdiv@dividend+1,f,c
  3733  0029CE  0E01               	movlw	1
  3734  0029D0  1A0C               	xorwf	___awdiv@sign,f,c
  3735  0029D2                     l479:
  3736  0029D2  0E00               	movlw	0
  3737  0029D4  6E0E               	movwf	___awdiv@quotient+1,c
  3738  0029D6  0E00               	movlw	0
  3739  0029D8  6E0D               	movwf	___awdiv@quotient,c
  3740  0029DA  5009               	movf	___awdiv@divisor,w,c
  3741  0029DC  100A               	iorwf	___awdiv@divisor+1,w,c
  3742  0029DE  B4D8               	btfsc	status,2,c
  3743  0029E0  D01C               	goto	l486
  3744  0029E2  0E01               	movlw	1
  3745  0029E4  6E0B               	movwf	___awdiv@counter,c
  3746  0029E6  D004               	goto	l481
  3747  0029E8  90D8               	bcf	status,0,c
  3748  0029EA  3609               	rlcf	___awdiv@divisor,f,c
  3749  0029EC  360A               	rlcf	___awdiv@divisor+1,f,c
  3750  0029EE  2A0B               	incf	___awdiv@counter,f,c
  3751  0029F0                     l481:
  3752  0029F0  AE0A               	btfss	___awdiv@divisor+1,7,c
  3753  0029F2  D7FA               	goto	l482
  3754  0029F4                     u2070:
  3755  0029F4  90D8               	bcf	status,0,c
  3756  0029F6  360D               	rlcf	___awdiv@quotient,f,c
  3757  0029F8  360E               	rlcf	___awdiv@quotient+1,f,c
  3758  0029FA  5009               	movf	___awdiv@divisor,w,c
  3759  0029FC  5C07               	subwf	___awdiv@dividend,w,c
  3760  0029FE  500A               	movf	___awdiv@divisor+1,w,c
  3761  002A00  5808               	subwfb	___awdiv@dividend+1,w,c
  3762  002A02  A0D8               	btfss	status,0,c
  3763  002A04  D005               	goto	l485
  3764  002A06  5009               	movf	___awdiv@divisor,w,c
  3765  002A08  5E07               	subwf	___awdiv@dividend,f,c
  3766  002A0A  500A               	movf	___awdiv@divisor+1,w,c
  3767  002A0C  5A08               	subwfb	___awdiv@dividend+1,f,c
  3768  002A0E  800D               	bsf	___awdiv@quotient,0,c
  3769  002A10                     l485:
  3770  002A10  90D8               	bcf	status,0,c
  3771  002A12  320A               	rrcf	___awdiv@divisor+1,f,c
  3772  002A14  3209               	rrcf	___awdiv@divisor,f,c
  3773  002A16  2E0B               	decfsz	___awdiv@counter,f,c
  3774  002A18  D7ED               	goto	u2070
  3775  002A1A                     l486:
  3776  002A1A  500C               	movf	___awdiv@sign,w,c
  3777  002A1C  B4D8               	btfsc	status,2,c
  3778  002A1E  D004               	goto	l487
  3779  002A20  6C0D               	negf	___awdiv@quotient,c
  3780  002A22  1E0E               	comf	___awdiv@quotient+1,f,c
  3781  002A24  B0D8               	btfsc	status,0,c
  3782  002A26  2A0E               	incf	___awdiv@quotient+1,f,c
  3783  002A28                     l487:
  3784  002A28  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3785  002A2C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3786  002A30  0012               	return	
  3787  002A32                     __end_of___awdiv:
  3788                           	opt stack 0
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           prodh	equ	0xFF4
  3794                           prodl	equ	0xFF3
  3795                           intcon	equ	0xFF2
  3796                           postinc0	equ	0xFEE
  3797                           wreg	equ	0xFE8
  3798                           postdec1	equ	0xFE5
  3799                           fsr1l	equ	0xFE1
  3800                           indf2	equ	0xFDF
  3801                           postinc2	equ	0xFDE
  3802                           postdec2	equ	0xFDD
  3803                           fsr2h	equ	0xFDA
  3804                           fsr2l	equ	0xFD9
  3805                           status	equ	0xFD8
  3806                           
  3807 ;; *************** function __tdiv_to_l_ *****************
  3808 ;; Defined at:
  3809 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  f1              3    0[COMRAM] float 
  3812 ;;  f2              3    3[COMRAM] float 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  quot            4    9[COMRAM] unsigned long 
  3815 ;;  exp1            1   14[COMRAM] unsigned char 
  3816 ;;  cntr            1   13[COMRAM] unsigned char 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  4    0[COMRAM] unsigned long 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3826 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;Total ram usage:       15 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; This function calls:
  3833 ;;		Nothing
  3834 ;; This function is called by:
  3835 ;;		_sprintf
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text9
  3840  002278                     __ptext9:
  3841                           	opt stack 0
  3842  002278                     __tdiv_to_l_:
  3843                           	opt stack 29
  3844                           
  3845                           ;incstack = 0
  3846  002278  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3847  00227C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3848  00227E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3849  002280  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3850  002282  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3851  002284  E301               	bnc	u2271
  3852  002286  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3853  002288                     u2271:
  3854  002288  5007               	movf	??__tdiv_to_l_,w,c
  3855  00228A  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3856  00228C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3857  00228E  A4D8               	btfss	status,2,c
  3858  002290  D009               	goto	l614
  3859  002292  0E00               	movlw	0
  3860  002294  6E01               	movwf	?__tdiv_to_l_,c
  3861  002296  0E00               	movlw	0
  3862  002298  6E02               	movwf	?__tdiv_to_l_+1,c
  3863  00229A  0E00               	movlw	0
  3864  00229C  6E03               	movwf	?__tdiv_to_l_+2,c
  3865  00229E  0E00               	movlw	0
  3866  0022A0  6E04               	movwf	?__tdiv_to_l_+3,c
  3867  0022A2  0012               	return	
  3868  0022A4                     l614:
  3869  0022A4  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3870  0022A8  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3871  0022AA  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3872  0022AC  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3873  0022AE  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3874  0022B0  E301               	bnc	u2291
  3875  0022B2  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3876  0022B4                     u2291:
  3877  0022B4  5007               	movf	??__tdiv_to_l_,w,c
  3878  0022B6  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3879  0022B8  500E               	movf	__tdiv_to_l_@cntr,w,c
  3880  0022BA  A4D8               	btfss	status,2,c
  3881  0022BC  D009               	goto	l616
  3882  0022BE  0E00               	movlw	0
  3883  0022C0  6E01               	movwf	?__tdiv_to_l_,c
  3884  0022C2  0E00               	movlw	0
  3885  0022C4  6E02               	movwf	?__tdiv_to_l_+1,c
  3886  0022C6  0E00               	movlw	0
  3887  0022C8  6E03               	movwf	?__tdiv_to_l_+2,c
  3888  0022CA  0E00               	movlw	0
  3889  0022CC  6E04               	movwf	?__tdiv_to_l_+3,c
  3890  0022CE  0012               	return	
  3891  0022D0                     l616:
  3892  0022D0  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3893  0022D2  0EFF               	movlw	255
  3894  0022D4  1601               	andwf	__tdiv_to_l_@f1,f,c
  3895  0022D6  0EFF               	movlw	255
  3896  0022D8  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3897  0022DA  0E00               	movlw	0
  3898  0022DC  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3899  0022DE  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3900  0022E0  0EFF               	movlw	255
  3901  0022E2  1604               	andwf	__tdiv_to_l_@f2,f,c
  3902  0022E4  0EFF               	movlw	255
  3903  0022E6  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3904  0022E8  0E00               	movlw	0
  3905  0022EA  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3906  0022EC  0E00               	movlw	0
  3907  0022EE  6E0A               	movwf	__tdiv_to_l_@quot,c
  3908  0022F0  0E00               	movlw	0
  3909  0022F2  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3910  0022F4  0E00               	movlw	0
  3911  0022F6  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3912  0022F8  0E00               	movlw	0
  3913  0022FA  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3914  0022FC  0E7F               	movlw	127
  3915  0022FE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3916  002300  500E               	movf	__tdiv_to_l_@cntr,w,c
  3917  002302  0F98               	addlw	152
  3918  002304  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3919  002306  0E18               	movlw	24
  3920  002308  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3921  00230A                     l617:
  3922  00230A  90D8               	bcf	status,0,c
  3923  00230C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3924  00230E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3925  002310  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3926  002312  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3927  002314  5004               	movf	__tdiv_to_l_@f2,w,c
  3928  002316  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3929  002318  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3930  00231A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3931  00231C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3932  00231E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3933  002320  A0D8               	btfss	status,0,c
  3934  002322  D007               	goto	l618
  3935  002324  5004               	movf	__tdiv_to_l_@f2,w,c
  3936  002326  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3937  002328  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3938  00232A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3939  00232C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3940  00232E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3941  002330  800A               	bsf	__tdiv_to_l_@quot,0,c
  3942  002332                     l618:
  3943  002332  90D8               	bcf	status,0,c
  3944  002334  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3945  002336  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3946  002338  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3947  00233A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3948  00233C  D7E6               	goto	l617
  3949  00233E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3950  002340  D016               	goto	l620
  3951  002342  500F               	movf	__tdiv_to_l_@exp1,w,c
  3952  002344  0A80               	xorlw	128
  3953  002346  0F97               	addlw	151
  3954  002348  B0D8               	btfsc	status,0,c
  3955  00234A  D009               	goto	l621
  3956  00234C  0E00               	movlw	0
  3957  00234E  6E01               	movwf	?__tdiv_to_l_,c
  3958  002350  0E00               	movlw	0
  3959  002352  6E02               	movwf	?__tdiv_to_l_+1,c
  3960  002354  0E00               	movlw	0
  3961  002356  6E03               	movwf	?__tdiv_to_l_+2,c
  3962  002358  0E00               	movlw	0
  3963  00235A  6E04               	movwf	?__tdiv_to_l_+3,c
  3964  00235C  0012               	return	
  3965  00235E                     l621:
  3966  00235E  90D8               	bcf	status,0,c
  3967  002360  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3968  002362  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3969  002364  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3970  002366  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3971  002368  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3972  00236A  D7F9               	goto	l621
  3973  00236C  D015               	goto	u2350
  3974  00236E                     l620:
  3975  00236E  0E17               	movlw	23
  3976  002370  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3977  002372  D00F               	goto	l626
  3978  002374  0E00               	movlw	0
  3979  002376  6E01               	movwf	?__tdiv_to_l_,c
  3980  002378  0E00               	movlw	0
  3981  00237A  6E02               	movwf	?__tdiv_to_l_+1,c
  3982  00237C  0E00               	movlw	0
  3983  00237E  6E03               	movwf	?__tdiv_to_l_+2,c
  3984  002380  0E00               	movlw	0
  3985  002382  6E04               	movwf	?__tdiv_to_l_+3,c
  3986  002384  0012               	return	
  3987  002386  90D8               	bcf	status,0,c
  3988  002388  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3989  00238A  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3990  00238C  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3991  00238E  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3992  002390  060F               	decf	__tdiv_to_l_@exp1,f,c
  3993  002392                     l626:
  3994  002392  500F               	movf	__tdiv_to_l_@exp1,w,c
  3995  002394  A4D8               	btfss	status,2,c
  3996  002396  D7F7               	goto	l627
  3997  002398                     u2350:
  3998  002398  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3999  00239C  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4000  0023A0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4001  0023A4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4002  0023A8  0012               	return		;funcret
  4003  0023AA                     __end_of__tdiv_to_l_:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           postdec1	equ	0xFE5
  4015                           fsr1l	equ	0xFE1
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function __div_to_l_ *****************
  4024 ;; Defined at:
  4025 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  f1              3    0[COMRAM] unsigned long 
  4028 ;;  f2              3    3[COMRAM] unsigned long 
  4029 ;; Auto vars:     Size  Location     Type
  4030 ;;  quot            4    6[COMRAM] unsigned long 
  4031 ;;  exp1            1   11[COMRAM] unsigned char 
  4032 ;;  cntr            1   10[COMRAM] unsigned char 
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  4    0[COMRAM] unsigned long 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4042 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;Total ram usage:       12 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_sprintf
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           	psect	text10
  4056  0023AA                     __ptext10:
  4057                           	opt stack 0
  4058  0023AA                     __div_to_l_:
  4059                           	opt stack 29
  4060                           
  4061                           ;incstack = 0
  4062  0023AA  3403               	rlcf	__div_to_l_@f1+2,w,c
  4063  0023AC  3404               	rlcf	__div_to_l_@f1+3,w,c
  4064  0023AE  6E0C               	movwf	__div_to_l_@exp1,c
  4065  0023B0  500C               	movf	__div_to_l_@exp1,w,c
  4066  0023B2  A4D8               	btfss	status,2,c
  4067  0023B4  D009               	goto	l510
  4068  0023B6  0E00               	movlw	0
  4069  0023B8  6E01               	movwf	?__div_to_l_,c
  4070  0023BA  0E00               	movlw	0
  4071  0023BC  6E02               	movwf	?__div_to_l_+1,c
  4072  0023BE  0E00               	movlw	0
  4073  0023C0  6E03               	movwf	?__div_to_l_+2,c
  4074  0023C2  0E00               	movlw	0
  4075  0023C4  6E04               	movwf	?__div_to_l_+3,c
  4076  0023C6  0012               	return	
  4077  0023C8                     l510:
  4078  0023C8  3406               	rlcf	__div_to_l_@f2+2,w,c
  4079  0023CA  3407               	rlcf	__div_to_l_@f2+3,w,c
  4080  0023CC  6E0B               	movwf	__div_to_l_@cntr,c
  4081  0023CE  500B               	movf	__div_to_l_@cntr,w,c
  4082  0023D0  A4D8               	btfss	status,2,c
  4083  0023D2  D009               	goto	l512
  4084  0023D4  0E00               	movlw	0
  4085  0023D6  6E01               	movwf	?__div_to_l_,c
  4086  0023D8  0E00               	movlw	0
  4087  0023DA  6E02               	movwf	?__div_to_l_+1,c
  4088  0023DC  0E00               	movlw	0
  4089  0023DE  6E03               	movwf	?__div_to_l_+2,c
  4090  0023E0  0E00               	movlw	0
  4091  0023E2  6E04               	movwf	?__div_to_l_+3,c
  4092  0023E4  0012               	return	
  4093  0023E6                     l512:
  4094  0023E6  8E03               	bsf	__div_to_l_@f1+2,7,c
  4095  0023E8  0EFF               	movlw	255
  4096  0023EA  1601               	andwf	__div_to_l_@f1,f,c
  4097  0023EC  0EFF               	movlw	255
  4098  0023EE  1602               	andwf	__div_to_l_@f1+1,f,c
  4099  0023F0  0EFF               	movlw	255
  4100  0023F2  1603               	andwf	__div_to_l_@f1+2,f,c
  4101  0023F4  0E00               	movlw	0
  4102  0023F6  1604               	andwf	__div_to_l_@f1+3,f,c
  4103  0023F8  8E06               	bsf	__div_to_l_@f2+2,7,c
  4104  0023FA  0EFF               	movlw	255
  4105  0023FC  1604               	andwf	__div_to_l_@f2,f,c
  4106  0023FE  0EFF               	movlw	255
  4107  002400  1605               	andwf	__div_to_l_@f2+1,f,c
  4108  002402  0EFF               	movlw	255
  4109  002404  1606               	andwf	__div_to_l_@f2+2,f,c
  4110  002406  0E00               	movlw	0
  4111  002408  1607               	andwf	__div_to_l_@f2+3,f,c
  4112  00240A  0E00               	movlw	0
  4113  00240C  6E07               	movwf	__div_to_l_@quot,c
  4114  00240E  0E00               	movlw	0
  4115  002410  6E08               	movwf	__div_to_l_@quot+1,c
  4116  002412  0E00               	movlw	0
  4117  002414  6E09               	movwf	__div_to_l_@quot+2,c
  4118  002416  0E00               	movlw	0
  4119  002418  6E0A               	movwf	__div_to_l_@quot+3,c
  4120  00241A  0E7F               	movlw	127
  4121  00241C  5E0C               	subwf	__div_to_l_@exp1,f,c
  4122  00241E  500B               	movf	__div_to_l_@cntr,w,c
  4123  002420  0FA0               	addlw	160
  4124  002422  5E0C               	subwf	__div_to_l_@exp1,f,c
  4125  002424  0E20               	movlw	32
  4126  002426  6E0B               	movwf	__div_to_l_@cntr,c
  4127  002428  90D8               	bcf	status,0,c
  4128  00242A  3607               	rlcf	__div_to_l_@quot,f,c
  4129  00242C  3608               	rlcf	__div_to_l_@quot+1,f,c
  4130  00242E  3609               	rlcf	__div_to_l_@quot+2,f,c
  4131  002430  360A               	rlcf	__div_to_l_@quot+3,f,c
  4132  002432  5004               	movf	__div_to_l_@f2,w,c
  4133  002434  5C01               	subwf	__div_to_l_@f1,w,c
  4134  002436  5005               	movf	__div_to_l_@f2+1,w,c
  4135  002438  5802               	subwfb	__div_to_l_@f1+1,w,c
  4136  00243A  5006               	movf	__div_to_l_@f2+2,w,c
  4137  00243C  5803               	subwfb	__div_to_l_@f1+2,w,c
  4138  00243E  5007               	movf	__div_to_l_@f2+3,w,c
  4139  002440  5804               	subwfb	__div_to_l_@f1+3,w,c
  4140  002442  A0D8               	btfss	status,0,c
  4141  002444  D009               	goto	l514
  4142  002446  5004               	movf	__div_to_l_@f2,w,c
  4143  002448  5E01               	subwf	__div_to_l_@f1,f,c
  4144  00244A  5005               	movf	__div_to_l_@f2+1,w,c
  4145  00244C  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4146  00244E  5006               	movf	__div_to_l_@f2+2,w,c
  4147  002450  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4148  002452  5007               	movf	__div_to_l_@f2+3,w,c
  4149  002454  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4150  002456  8007               	bsf	__div_to_l_@quot,0,c
  4151  002458                     l514:
  4152  002458  90D8               	bcf	status,0,c
  4153  00245A  3601               	rlcf	__div_to_l_@f1,f,c
  4154  00245C  3602               	rlcf	__div_to_l_@f1+1,f,c
  4155  00245E  3603               	rlcf	__div_to_l_@f1+2,f,c
  4156  002460  3604               	rlcf	__div_to_l_@f1+3,f,c
  4157  002462  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4158  002464  D7E1               	goto	l513
  4159  002466  AE0C               	btfss	__div_to_l_@exp1,7,c
  4160  002468  D016               	goto	l516
  4161  00246A  500C               	movf	__div_to_l_@exp1,w,c
  4162  00246C  0A80               	xorlw	128
  4163  00246E  0F9F               	addlw	159
  4164  002470  B0D8               	btfsc	status,0,c
  4165  002472  D009               	goto	l517
  4166  002474  0E00               	movlw	0
  4167  002476  6E01               	movwf	?__div_to_l_,c
  4168  002478  0E00               	movlw	0
  4169  00247A  6E02               	movwf	?__div_to_l_+1,c
  4170  00247C  0E00               	movlw	0
  4171  00247E  6E03               	movwf	?__div_to_l_+2,c
  4172  002480  0E00               	movlw	0
  4173  002482  6E04               	movwf	?__div_to_l_+3,c
  4174  002484  0012               	return	
  4175  002486                     l517:
  4176  002486  90D8               	bcf	status,0,c
  4177  002488  320A               	rrcf	__div_to_l_@quot+3,f,c
  4178  00248A  3209               	rrcf	__div_to_l_@quot+2,f,c
  4179  00248C  3208               	rrcf	__div_to_l_@quot+1,f,c
  4180  00248E  3207               	rrcf	__div_to_l_@quot,f,c
  4181  002490  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4182  002492  D7F9               	goto	l517
  4183  002494  D015               	goto	u2420
  4184  002496                     l516:
  4185  002496  0E1F               	movlw	31
  4186  002498  640C               	cpfsgt	__div_to_l_@exp1,c
  4187  00249A  D00F               	goto	l522
  4188  00249C  0E00               	movlw	0
  4189  00249E  6E01               	movwf	?__div_to_l_,c
  4190  0024A0  0E00               	movlw	0
  4191  0024A2  6E02               	movwf	?__div_to_l_+1,c
  4192  0024A4  0E00               	movlw	0
  4193  0024A6  6E03               	movwf	?__div_to_l_+2,c
  4194  0024A8  0E00               	movlw	0
  4195  0024AA  6E04               	movwf	?__div_to_l_+3,c
  4196  0024AC  0012               	return	
  4197  0024AE  90D8               	bcf	status,0,c
  4198  0024B0  3607               	rlcf	__div_to_l_@quot,f,c
  4199  0024B2  3608               	rlcf	__div_to_l_@quot+1,f,c
  4200  0024B4  3609               	rlcf	__div_to_l_@quot+2,f,c
  4201  0024B6  360A               	rlcf	__div_to_l_@quot+3,f,c
  4202  0024B8  060C               	decf	__div_to_l_@exp1,f,c
  4203  0024BA                     l522:
  4204  0024BA  500C               	movf	__div_to_l_@exp1,w,c
  4205  0024BC  A4D8               	btfss	status,2,c
  4206  0024BE  D7F7               	goto	l523
  4207  0024C0                     u2420:
  4208  0024C0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4209  0024C4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4210  0024C8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4211  0024CC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4212  0024D0  0012               	return		;funcret
  4213  0024D2                     __end_of__div_to_l_:
  4214                           	opt stack 0
  4215                           tblptru	equ	0xFF8
  4216                           tblptrh	equ	0xFF7
  4217                           tblptrl	equ	0xFF6
  4218                           tablat	equ	0xFF5
  4219                           prodh	equ	0xFF4
  4220                           prodl	equ	0xFF3
  4221                           intcon	equ	0xFF2
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           postdec1	equ	0xFE5
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           fsr2h	equ	0xFDA
  4230                           fsr2l	equ	0xFD9
  4231                           status	equ	0xFD8
  4232                           
  4233 ;; *************** function ___lltoft *****************
  4234 ;; Defined at:
  4235 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
  4236 ;; Parameters:    Size  Location     Type
  4237 ;;  c               4    8[COMRAM] unsigned long 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  exp             1   16[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  3    8[COMRAM] float 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2, status,0, cstack
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4252 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4253 ;;Total ram usage:        9 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; Hardware stack levels required when called:    1
  4256 ;; This function calls:
  4257 ;;		___ftpack
  4258 ;; This function is called by:
  4259 ;;		_sprintf
  4260 ;; This function uses a non-reentrant model
  4261 ;;
  4262                           
  4263                           	psect	text11
  4264  002BEC                     __ptext11:
  4265                           	opt stack 0
  4266  002BEC                     ___lltoft:
  4267                           	opt stack 28
  4268                           
  4269                           ;incstack = 0
  4270  002BEC  0E8E               	movlw	142
  4271  002BEE  6E11               	movwf	___lltoft@exp,c
  4272  002BF0  D006               	goto	l721
  4273  002BF2  90D8               	bcf	status,0,c
  4274  002BF4  320C               	rrcf	___lltoft@c+3,f,c
  4275  002BF6  320B               	rrcf	___lltoft@c+2,f,c
  4276  002BF8  320A               	rrcf	___lltoft@c+1,f,c
  4277  002BFA  3209               	rrcf	___lltoft@c,f,c
  4278  002BFC  2A11               	incf	___lltoft@exp,f,c
  4279  002BFE                     l721:
  4280  002BFE  0E00               	movlw	0
  4281  002C00  1409               	andwf	___lltoft@c,w,c
  4282  002C02  6E0D               	movwf	??___lltoft& (0+255),c
  4283  002C04  0E00               	movlw	0
  4284  002C06  140A               	andwf	___lltoft@c+1,w,c
  4285  002C08  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4286  002C0A  0E00               	movlw	0
  4287  002C0C  140B               	andwf	___lltoft@c+2,w,c
  4288  002C0E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4289  002C10  0EFF               	movlw	255
  4290  002C12  140C               	andwf	___lltoft@c+3,w,c
  4291  002C14  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4292  002C16  500D               	movf	??___lltoft,w,c
  4293  002C18  100E               	iorwf	??___lltoft+1,w,c
  4294  002C1A  100F               	iorwf	??___lltoft+2,w,c
  4295  002C1C  1010               	iorwf	??___lltoft+3,w,c
  4296  002C1E  A4D8               	btfss	status,2,c
  4297  002C20  D7E8               	goto	l722
  4298  002C22  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4299  002C26  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4300  002C2A  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4301  002C2E  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4302  002C32  0E00               	movlw	0
  4303  002C34  6E05               	movwf	___ftpack@sign,c
  4304  002C36  EC38  F014         	call	___ftpack	;wreg free
  4305  002C3A  C001  F009         	movff	?___ftpack,?___lltoft
  4306  002C3E  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4307  002C42  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4308  002C46  0012               	return	
  4309  002C48                     __end_of___lltoft:
  4310                           	opt stack 0
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon	equ	0xFF2
  4318                           postinc0	equ	0xFEE
  4319                           wreg	equ	0xFE8
  4320                           postdec1	equ	0xFE5
  4321                           fsr1l	equ	0xFE1
  4322                           indf2	equ	0xFDF
  4323                           postinc2	equ	0xFDE
  4324                           postdec2	equ	0xFDD
  4325                           fsr2h	equ	0xFDA
  4326                           fsr2l	equ	0xFD9
  4327                           status	equ	0xFD8
  4328                           
  4329 ;; *************** function ___llmod *****************
  4330 ;; Defined at:
  4331 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  4332 ;; Parameters:    Size  Location     Type
  4333 ;;  dividend        4    0[COMRAM] unsigned long 
  4334 ;;  divisor         4    4[COMRAM] unsigned long 
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  counter         1    8[COMRAM] unsigned char 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  4    0[COMRAM] unsigned long 
  4339 ;; Registers used:
  4340 ;;		wreg, status,2, status,0
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        9 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; This function calls:
  4353 ;;		Nothing
  4354 ;; This function is called by:
  4355 ;;		_sprintf
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text12
  4360  002B24                     __ptext12:
  4361                           	opt stack 0
  4362  002B24                     ___llmod:
  4363                           	opt stack 29
  4364                           
  4365                           ;incstack = 0
  4366  002B24  5005               	movf	___llmod@divisor,w,c
  4367  002B26  1006               	iorwf	___llmod@divisor+1,w,c
  4368  002B28  1007               	iorwf	___llmod@divisor+2,w,c
  4369  002B2A  1008               	iorwf	___llmod@divisor+3,w,c
  4370  002B2C  B4D8               	btfsc	status,2,c
  4371  002B2E  D024               	goto	l715
  4372  002B30  0E01               	movlw	1
  4373  002B32  6E09               	movwf	___llmod@counter,c
  4374  002B34  D006               	goto	l710
  4375  002B36  90D8               	bcf	status,0,c
  4376  002B38  3605               	rlcf	___llmod@divisor,f,c
  4377  002B3A  3606               	rlcf	___llmod@divisor+1,f,c
  4378  002B3C  3607               	rlcf	___llmod@divisor+2,f,c
  4379  002B3E  3608               	rlcf	___llmod@divisor+3,f,c
  4380  002B40  2A09               	incf	___llmod@counter,f,c
  4381  002B42                     l710:
  4382  002B42  AE08               	btfss	___llmod@divisor+3,7,c
  4383  002B44  D7F8               	goto	l711
  4384  002B46                     u2660:
  4385  002B46  5005               	movf	___llmod@divisor,w,c
  4386  002B48  5C01               	subwf	___llmod@dividend,w,c
  4387  002B4A  5006               	movf	___llmod@divisor+1,w,c
  4388  002B4C  5802               	subwfb	___llmod@dividend+1,w,c
  4389  002B4E  5007               	movf	___llmod@divisor+2,w,c
  4390  002B50  5803               	subwfb	___llmod@dividend+2,w,c
  4391  002B52  5008               	movf	___llmod@divisor+3,w,c
  4392  002B54  5804               	subwfb	___llmod@dividend+3,w,c
  4393  002B56  A0D8               	btfss	status,0,c
  4394  002B58  D008               	goto	l714
  4395  002B5A  5005               	movf	___llmod@divisor,w,c
  4396  002B5C  5E01               	subwf	___llmod@dividend,f,c
  4397  002B5E  5006               	movf	___llmod@divisor+1,w,c
  4398  002B60  5A02               	subwfb	___llmod@dividend+1,f,c
  4399  002B62  5007               	movf	___llmod@divisor+2,w,c
  4400  002B64  5A03               	subwfb	___llmod@dividend+2,f,c
  4401  002B66  5008               	movf	___llmod@divisor+3,w,c
  4402  002B68  5A04               	subwfb	___llmod@dividend+3,f,c
  4403  002B6A                     l714:
  4404  002B6A  90D8               	bcf	status,0,c
  4405  002B6C  3208               	rrcf	___llmod@divisor+3,f,c
  4406  002B6E  3207               	rrcf	___llmod@divisor+2,f,c
  4407  002B70  3206               	rrcf	___llmod@divisor+1,f,c
  4408  002B72  3205               	rrcf	___llmod@divisor,f,c
  4409  002B74  2E09               	decfsz	___llmod@counter,f,c
  4410  002B76  D7E7               	goto	u2660
  4411  002B78                     l715:
  4412  002B78  C001  F001         	movff	___llmod@dividend,?___llmod
  4413  002B7C  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4414  002B80  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4415  002B84  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4416  002B88  0012               	return		;funcret
  4417  002B8A                     __end_of___llmod:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           fsr1l	equ	0xFE1
  4430                           indf2	equ	0xFDF
  4431                           postinc2	equ	0xFDE
  4432                           postdec2	equ	0xFDD
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function ___lldiv *****************
  4438 ;; Defined at:
  4439 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  dividend        4    0[COMRAM] unsigned long 
  4442 ;;  divisor         4    4[COMRAM] unsigned long 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;  quotient        4    8[COMRAM] unsigned long 
  4445 ;;  counter         1   12[COMRAM] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  4    0[COMRAM] unsigned long 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4455 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;Total ram usage:       13 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_sprintf
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text13
  4469  002A32                     __ptext13:
  4470                           	opt stack 0
  4471  002A32                     ___lldiv:
  4472                           	opt stack 29
  4473                           
  4474                           ;incstack = 0
  4475  002A32  0E00               	movlw	0
  4476  002A34  6E09               	movwf	___lldiv@quotient,c
  4477  002A36  0E00               	movlw	0
  4478  002A38  6E0A               	movwf	___lldiv@quotient+1,c
  4479  002A3A  0E00               	movlw	0
  4480  002A3C  6E0B               	movwf	___lldiv@quotient+2,c
  4481  002A3E  0E00               	movlw	0
  4482  002A40  6E0C               	movwf	___lldiv@quotient+3,c
  4483  002A42  5005               	movf	___lldiv@divisor,w,c
  4484  002A44  1006               	iorwf	___lldiv@divisor+1,w,c
  4485  002A46  1007               	iorwf	___lldiv@divisor+2,w,c
  4486  002A48  1008               	iorwf	___lldiv@divisor+3,w,c
  4487  002A4A  B4D8               	btfsc	status,2,c
  4488  002A4C  D02A               	goto	l705
  4489  002A4E  0E01               	movlw	1
  4490  002A50  6E0D               	movwf	___lldiv@counter,c
  4491  002A52  D006               	goto	l700
  4492  002A54  90D8               	bcf	status,0,c
  4493  002A56  3605               	rlcf	___lldiv@divisor,f,c
  4494  002A58  3606               	rlcf	___lldiv@divisor+1,f,c
  4495  002A5A  3607               	rlcf	___lldiv@divisor+2,f,c
  4496  002A5C  3608               	rlcf	___lldiv@divisor+3,f,c
  4497  002A5E  2A0D               	incf	___lldiv@counter,f,c
  4498  002A60                     l700:
  4499  002A60  AE08               	btfss	___lldiv@divisor+3,7,c
  4500  002A62  D7F8               	goto	l701
  4501  002A64                     u2630:
  4502  002A64  90D8               	bcf	status,0,c
  4503  002A66  3609               	rlcf	___lldiv@quotient,f,c
  4504  002A68  360A               	rlcf	___lldiv@quotient+1,f,c
  4505  002A6A  360B               	rlcf	___lldiv@quotient+2,f,c
  4506  002A6C  360C               	rlcf	___lldiv@quotient+3,f,c
  4507  002A6E  5005               	movf	___lldiv@divisor,w,c
  4508  002A70  5C01               	subwf	___lldiv@dividend,w,c
  4509  002A72  5006               	movf	___lldiv@divisor+1,w,c
  4510  002A74  5802               	subwfb	___lldiv@dividend+1,w,c
  4511  002A76  5007               	movf	___lldiv@divisor+2,w,c
  4512  002A78  5803               	subwfb	___lldiv@dividend+2,w,c
  4513  002A7A  5008               	movf	___lldiv@divisor+3,w,c
  4514  002A7C  5804               	subwfb	___lldiv@dividend+3,w,c
  4515  002A7E  A0D8               	btfss	status,0,c
  4516  002A80  D009               	goto	l704
  4517  002A82  5005               	movf	___lldiv@divisor,w,c
  4518  002A84  5E01               	subwf	___lldiv@dividend,f,c
  4519  002A86  5006               	movf	___lldiv@divisor+1,w,c
  4520  002A88  5A02               	subwfb	___lldiv@dividend+1,f,c
  4521  002A8A  5007               	movf	___lldiv@divisor+2,w,c
  4522  002A8C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4523  002A8E  5008               	movf	___lldiv@divisor+3,w,c
  4524  002A90  5A04               	subwfb	___lldiv@dividend+3,f,c
  4525  002A92  8009               	bsf	___lldiv@quotient,0,c
  4526  002A94                     l704:
  4527  002A94  90D8               	bcf	status,0,c
  4528  002A96  3208               	rrcf	___lldiv@divisor+3,f,c
  4529  002A98  3207               	rrcf	___lldiv@divisor+2,f,c
  4530  002A9A  3206               	rrcf	___lldiv@divisor+1,f,c
  4531  002A9C  3205               	rrcf	___lldiv@divisor,f,c
  4532  002A9E  2E0D               	decfsz	___lldiv@counter,f,c
  4533  002AA0  D7E1               	goto	u2630
  4534  002AA2                     l705:
  4535  002AA2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4536  002AA6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4537  002AAA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4538  002AAE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4539  002AB2  0012               	return		;funcret
  4540  002AB4                     __end_of___lldiv:
  4541                           	opt stack 0
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           intcon	equ	0xFF2
  4549                           postinc0	equ	0xFEE
  4550                           wreg	equ	0xFE8
  4551                           postdec1	equ	0xFE5
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           postdec2	equ	0xFDD
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function ___fttol *****************
  4561 ;; Defined at:
  4562 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;  f1              3   42[COMRAM] float 
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  lval            4   52[COMRAM] unsigned long 
  4567 ;;  exp1            1   56[COMRAM] unsigned char 
  4568 ;;  sign1           1   51[COMRAM] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  4   42[COMRAM] long 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4578 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;Total ram usage:       15 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_sprintf
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text14
  4592  0025C6                     __ptext14:
  4593                           	opt stack 0
  4594  0025C6                     ___fttol:
  4595                           	opt stack 29
  4596                           
  4597                           ;incstack = 0
  4598  0025C6  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4599  0025CA  6A30               	clrf	(??___fttol+1)& (0+255),c
  4600  0025CC  6A31               	clrf	(??___fttol+2)& (0+255),c
  4601  0025CE  342C               	rlcf	___fttol@f1+1,w,c
  4602  0025D0  362F               	rlcf	??___fttol& (0+255),f,c
  4603  0025D2  E301               	bnc	u2541
  4604  0025D4  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4605  0025D6                     u2541:
  4606  0025D6  502F               	movf	??___fttol,w,c
  4607  0025D8  6E39               	movwf	___fttol@exp1,c
  4608  0025DA  5039               	movf	___fttol@exp1,w,c
  4609  0025DC  A4D8               	btfss	status,2,c
  4610  0025DE  D009               	goto	l659
  4611  0025E0  0E00               	movlw	0
  4612  0025E2  6E2B               	movwf	?___fttol,c
  4613  0025E4  0E00               	movlw	0
  4614  0025E6  6E2C               	movwf	?___fttol+1,c
  4615  0025E8  0E00               	movlw	0
  4616  0025EA  6E2D               	movwf	?___fttol+2,c
  4617  0025EC  0E00               	movlw	0
  4618  0025EE  6E2E               	movwf	?___fttol+3,c
  4619  0025F0  0012               	return	
  4620  0025F2                     l659:
  4621  0025F2  0E17               	movlw	23
  4622  0025F4  6E2F               	movwf	??___fttol& (0+255),c
  4623  0025F6  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4624  0025FA  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4625  0025FE  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4626  002602  282F               	incf	??___fttol,w,c
  4627  002604  6E33               	movwf	(??___fttol+4)& (0+255),c
  4628  002606  D004               	goto	u2560
  4629  002608                     u2565:
  4630  002608  90D8               	bcf	status,0,c
  4631  00260A  3232               	rrcf	??___fttol+3,f,c
  4632  00260C  3231               	rrcf	??___fttol+2,f,c
  4633  00260E  3230               	rrcf	??___fttol+1,f,c
  4634  002610                     u2560:
  4635  002610  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4636  002612  D7FA               	goto	u2565
  4637  002614  5030               	movf	??___fttol+1,w,c
  4638  002616  6E34               	movwf	___fttol@sign1,c
  4639  002618  8E2C               	bsf	___fttol@f1+1,7,c
  4640  00261A  0EFF               	movlw	255
  4641  00261C  162B               	andwf	___fttol@f1,f,c
  4642  00261E  0EFF               	movlw	255
  4643  002620  162C               	andwf	___fttol@f1+1,f,c
  4644  002622  0E00               	movlw	0
  4645  002624  162D               	andwf	___fttol@f1+2,f,c
  4646  002626  502B               	movf	___fttol@f1,w,c
  4647  002628  6E35               	movwf	___fttol@lval,c
  4648  00262A  502C               	movf	___fttol@f1+1,w,c
  4649  00262C  6E36               	movwf	___fttol@lval+1,c
  4650  00262E  502D               	movf	___fttol@f1+2,w,c
  4651  002630  6E37               	movwf	___fttol@lval+2,c
  4652  002632  6A38               	clrf	___fttol@lval+3,c
  4653  002634  0E8E               	movlw	142
  4654  002636  5E39               	subwf	___fttol@exp1,f,c
  4655  002638  AE39               	btfss	___fttol@exp1,7,c
  4656  00263A  D016               	goto	l661
  4657  00263C  5039               	movf	___fttol@exp1,w,c
  4658  00263E  0A80               	xorlw	128
  4659  002640  0F8F               	addlw	143
  4660  002642  B0D8               	btfsc	status,0,c
  4661  002644  D009               	goto	l662
  4662  002646  0E00               	movlw	0
  4663  002648  6E2B               	movwf	?___fttol,c
  4664  00264A  0E00               	movlw	0
  4665  00264C  6E2C               	movwf	?___fttol+1,c
  4666  00264E  0E00               	movlw	0
  4667  002650  6E2D               	movwf	?___fttol+2,c
  4668  002652  0E00               	movlw	0
  4669  002654  6E2E               	movwf	?___fttol+3,c
  4670  002656  0012               	return	
  4671  002658                     l662:
  4672  002658  90D8               	bcf	status,0,c
  4673  00265A  3238               	rrcf	___fttol@lval+3,f,c
  4674  00265C  3237               	rrcf	___fttol@lval+2,f,c
  4675  00265E  3236               	rrcf	___fttol@lval+1,f,c
  4676  002660  3235               	rrcf	___fttol@lval,f,c
  4677  002662  3E39               	incfsz	___fttol@exp1,f,c
  4678  002664  D7F9               	goto	l662
  4679  002666  D015               	goto	u2600
  4680  002668                     l661:
  4681  002668  0E17               	movlw	23
  4682  00266A  6439               	cpfsgt	___fttol@exp1,c
  4683  00266C  D00F               	goto	l667
  4684  00266E  0E00               	movlw	0
  4685  002670  6E2B               	movwf	?___fttol,c
  4686  002672  0E00               	movlw	0
  4687  002674  6E2C               	movwf	?___fttol+1,c
  4688  002676  0E00               	movlw	0
  4689  002678  6E2D               	movwf	?___fttol+2,c
  4690  00267A  0E00               	movlw	0
  4691  00267C  6E2E               	movwf	?___fttol+3,c
  4692  00267E  0012               	return	
  4693  002680  90D8               	bcf	status,0,c
  4694  002682  3635               	rlcf	___fttol@lval,f,c
  4695  002684  3636               	rlcf	___fttol@lval+1,f,c
  4696  002686  3637               	rlcf	___fttol@lval+2,f,c
  4697  002688  3638               	rlcf	___fttol@lval+3,f,c
  4698  00268A  0639               	decf	___fttol@exp1,f,c
  4699  00268C                     l667:
  4700  00268C  5039               	movf	___fttol@exp1,w,c
  4701  00268E  A4D8               	btfss	status,2,c
  4702  002690  D7F7               	goto	l668
  4703  002692                     u2600:
  4704  002692  5034               	movf	___fttol@sign1,w,c
  4705  002694  B4D8               	btfsc	status,2,c
  4706  002696  D008               	goto	l670
  4707  002698  1E38               	comf	___fttol@lval+3,f,c
  4708  00269A  1E37               	comf	___fttol@lval+2,f,c
  4709  00269C  1E36               	comf	___fttol@lval+1,f,c
  4710  00269E  6C35               	negf	___fttol@lval,c
  4711  0026A0  0E00               	movlw	0
  4712  0026A2  2236               	addwfc	___fttol@lval+1,f,c
  4713  0026A4  2237               	addwfc	___fttol@lval+2,f,c
  4714  0026A6  2238               	addwfc	___fttol@lval+3,f,c
  4715  0026A8                     l670:
  4716  0026A8  C035  F02B         	movff	___fttol@lval,?___fttol
  4717  0026AC  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4718  0026B0  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4719  0026B4  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4720  0026B8  0012               	return	
  4721  0026BA                     __end_of___fttol:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           tblptrh	equ	0xFF7
  4725                           tblptrl	equ	0xFF6
  4726                           tablat	equ	0xFF5
  4727                           prodh	equ	0xFF4
  4728                           prodl	equ	0xFF3
  4729                           intcon	equ	0xFF2
  4730                           postinc0	equ	0xFEE
  4731                           wreg	equ	0xFE8
  4732                           postdec1	equ	0xFE5
  4733                           fsr1l	equ	0xFE1
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function ___ftsub *****************
  4742 ;; Defined at:
  4743 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;  f1              3   57[COMRAM] float 
  4746 ;;  f2              3   60[COMRAM] float 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;		None
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  3   57[COMRAM] float 
  4751 ;; Registers used:
  4752 ;;		wreg, status,2, status,0, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4758 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4761 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;Total ram usage:        6 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    2
  4765 ;; This function calls:
  4766 ;;		___ftadd
  4767 ;; This function is called by:
  4768 ;;		_sprintf
  4769 ;; This function uses a non-reentrant model
  4770 ;;
  4771                           
  4772                           	psect	text15
  4773  002D7E                     __ptext15:
  4774                           	opt stack 0
  4775  002D7E                     ___ftsub:
  4776                           	opt stack 27
  4777                           
  4778                           ;incstack = 0
  4779  002D7E  503D               	movf	___ftsub@f2,w,c
  4780  002D80  103E               	iorwf	___ftsub@f2+1,w,c
  4781  002D82  103F               	iorwf	___ftsub@f2+2,w,c
  4782  002D84  B4D8               	btfsc	status,2,c
  4783  002D86  D006               	goto	l655
  4784  002D88  0E00               	movlw	0
  4785  002D8A  1A3D               	xorwf	___ftsub@f2,f,c
  4786  002D8C  0E00               	movlw	0
  4787  002D8E  1A3E               	xorwf	___ftsub@f2+1,f,c
  4788  002D90  0E80               	movlw	128
  4789  002D92  1A3F               	xorwf	___ftsub@f2+2,f,c
  4790  002D94                     l655:
  4791  002D94  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4792  002D98  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4793  002D9C  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4794  002DA0  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4795  002DA4  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4796  002DA8  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4797  002DAC  ECB0  F00F         	call	___ftadd	;wreg free
  4798  002DB0  C02E  F03A         	movff	?___ftadd,?___ftsub
  4799  002DB4  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4800  002DB8  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4801  002DBC  0012               	return	
  4802  002DBE                     __end_of___ftsub:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           intcon	equ	0xFF2
  4811                           postinc0	equ	0xFEE
  4812                           wreg	equ	0xFE8
  4813                           postdec1	equ	0xFE5
  4814                           fsr1l	equ	0xFE1
  4815                           indf2	equ	0xFDF
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function ___ftadd *****************
  4823 ;; Defined at:
  4824 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  f1              3   45[COMRAM] float 
  4827 ;;  f2              3   48[COMRAM] float 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  exp1            1   56[COMRAM] unsigned char 
  4830 ;;  exp2            1   55[COMRAM] unsigned char 
  4831 ;;  sign            1   54[COMRAM] unsigned char 
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  3   45[COMRAM] float 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4841 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4844 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4845 ;;Total ram usage:       12 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    1
  4848 ;; This function calls:
  4849 ;;		___ftpack
  4850 ;; This function is called by:
  4851 ;;		_sprintf
  4852 ;;		___ftsub
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text16
  4857  001F60                     __ptext16:
  4858                           	opt stack 0
  4859  001F60                     ___ftadd:
  4860                           	opt stack 27
  4861                           
  4862                           ;incstack = 0
  4863  001F60  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4864  001F64  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4865  001F66  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4866  001F68  342F               	rlcf	___ftadd@f1+1,w,c
  4867  001F6A  3634               	rlcf	??___ftadd& (0+255),f,c
  4868  001F6C  E301               	bnc	u1771
  4869  001F6E  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4870  001F70                     u1771:
  4871  001F70  5034               	movf	??___ftadd,w,c
  4872  001F72  6E39               	movwf	___ftadd@exp1,c
  4873  001F74  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4874  001F78  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4875  001F7A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4876  001F7C  3432               	rlcf	___ftadd@f2+1,w,c
  4877  001F7E  3634               	rlcf	??___ftadd& (0+255),f,c
  4878  001F80  E301               	bnc	u1781
  4879  001F82  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4880  001F84                     u1781:
  4881  001F84  5034               	movf	??___ftadd,w,c
  4882  001F86  6E38               	movwf	___ftadd@exp2,c
  4883  001F88  5039               	movf	___ftadd@exp1,w,c
  4884  001F8A  B4D8               	btfsc	status,2,c
  4885  001F8C  D00B               	goto	u1810
  4886  001F8E  5038               	movf	___ftadd@exp2,w,c
  4887  001F90  5C39               	subwf	___ftadd@exp1,w,c
  4888  001F92  B0D8               	btfsc	status,0,c
  4889  001F94  D00E               	goto	l573
  4890  001F96  5039               	movf	___ftadd@exp1,w,c
  4891  001F98  0800               	sublw	0
  4892  001F9A  2438               	addwf	___ftadd@exp2,w,c
  4893  001F9C  6E34               	movwf	??___ftadd& (0+255),c
  4894  001F9E  0E18               	movlw	24
  4895  001FA0  6434               	cpfsgt	??___ftadd,c
  4896  001FA2  D007               	goto	l573
  4897  001FA4                     u1810:
  4898  001FA4  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4899  001FA8  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4900  001FAC  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4901  001FB0  0012               	return	
  4902  001FB2                     l573:
  4903  001FB2  5038               	movf	___ftadd@exp2,w,c
  4904  001FB4  B4D8               	btfsc	status,2,c
  4905  001FB6  D00B               	goto	u1840
  4906  001FB8  5039               	movf	___ftadd@exp1,w,c
  4907  001FBA  5C38               	subwf	___ftadd@exp2,w,c
  4908  001FBC  B0D8               	btfsc	status,0,c
  4909  001FBE  D00E               	goto	l577
  4910  001FC0  5038               	movf	___ftadd@exp2,w,c
  4911  001FC2  0800               	sublw	0
  4912  001FC4  2439               	addwf	___ftadd@exp1,w,c
  4913  001FC6  6E34               	movwf	??___ftadd& (0+255),c
  4914  001FC8  0E18               	movlw	24
  4915  001FCA  6434               	cpfsgt	??___ftadd,c
  4916  001FCC  D007               	goto	l577
  4917  001FCE                     u1840:
  4918  001FCE  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4919  001FD2  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4920  001FD6  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4921  001FDA  0012               	return	
  4922  001FDC                     l577:
  4923  001FDC  0E06               	movlw	6
  4924  001FDE  6E37               	movwf	___ftadd@sign,c
  4925  001FE0  BE30               	btfsc	___ftadd@f1+2,7,c
  4926  001FE2  8E37               	bsf	___ftadd@sign,7,c
  4927  001FE4  BE33               	btfsc	___ftadd@f2+2,7,c
  4928  001FE6  8C37               	bsf	___ftadd@sign,6,c
  4929  001FE8  8E2F               	bsf	___ftadd@f1+1,7,c
  4930  001FEA  0EFF               	movlw	255
  4931  001FEC  162E               	andwf	___ftadd@f1,f,c
  4932  001FEE  0EFF               	movlw	255
  4933  001FF0  162F               	andwf	___ftadd@f1+1,f,c
  4934  001FF2  0E00               	movlw	0
  4935  001FF4  1630               	andwf	___ftadd@f1+2,f,c
  4936  001FF6  8E32               	bsf	___ftadd@f2+1,7,c
  4937  001FF8  0EFF               	movlw	255
  4938  001FFA  1631               	andwf	___ftadd@f2,f,c
  4939  001FFC  0EFF               	movlw	255
  4940  001FFE  1632               	andwf	___ftadd@f2+1,f,c
  4941  002000  0E00               	movlw	0
  4942  002002  1633               	andwf	___ftadd@f2+2,f,c
  4943  002004  5038               	movf	___ftadd@exp2,w,c
  4944  002006  5C39               	subwf	___ftadd@exp1,w,c
  4945  002008  B0D8               	btfsc	status,0,c
  4946  00200A  D01B               	goto	l582
  4947  00200C                     u1870:
  4948  00200C  90D8               	bcf	status,0,c
  4949  00200E  3631               	rlcf	___ftadd@f2,f,c
  4950  002010  3632               	rlcf	___ftadd@f2+1,f,c
  4951  002012  3633               	rlcf	___ftadd@f2+2,f,c
  4952  002014  0638               	decf	___ftadd@exp2,f,c
  4953  002016  5039               	movf	___ftadd@exp1,w,c
  4954  002018  1838               	xorwf	___ftadd@exp2,w,c
  4955  00201A  B4D8               	btfsc	status,2,c
  4956  00201C  D00D               	goto	l587
  4957  00201E  0637               	decf	___ftadd@sign,f,c
  4958  002020  C037  F034         	movff	___ftadd@sign,??___ftadd
  4959  002024  0E07               	movlw	7
  4960  002026  1634               	andwf	??___ftadd,f,c
  4961  002028  B4D8               	btfsc	status,2,c
  4962  00202A  D006               	goto	l587
  4963  00202C  D7EF               	goto	u1870
  4964  00202E  90D8               	bcf	status,0,c
  4965  002030  3230               	rrcf	___ftadd@f1+2,f,c
  4966  002032  322F               	rrcf	___ftadd@f1+1,f,c
  4967  002034  322E               	rrcf	___ftadd@f1,f,c
  4968  002036  2A39               	incf	___ftadd@exp1,f,c
  4969  002038                     l587:
  4970  002038  5038               	movf	___ftadd@exp2,w,c
  4971  00203A  1839               	xorwf	___ftadd@exp1,w,c
  4972  00203C  B4D8               	btfsc	status,2,c
  4973  00203E  D01F               	goto	u1940
  4974  002040  D7F6               	goto	l588
  4975  002042                     l582:
  4976  002042  5039               	movf	___ftadd@exp1,w,c
  4977  002044  5C38               	subwf	___ftadd@exp2,w,c
  4978  002046  B0D8               	btfsc	status,0,c
  4979  002048  D01A               	goto	u1940
  4980  00204A                     u1910:
  4981  00204A  90D8               	bcf	status,0,c
  4982  00204C  362E               	rlcf	___ftadd@f1,f,c
  4983  00204E  362F               	rlcf	___ftadd@f1+1,f,c
  4984  002050  3630               	rlcf	___ftadd@f1+2,f,c
  4985  002052  0639               	decf	___ftadd@exp1,f,c
  4986  002054  5039               	movf	___ftadd@exp1,w,c
  4987  002056  1838               	xorwf	___ftadd@exp2,w,c
  4988  002058  B4D8               	btfsc	status,2,c
  4989  00205A  D00D               	goto	l596
  4990  00205C  0637               	decf	___ftadd@sign,f,c
  4991  00205E  C037  F034         	movff	___ftadd@sign,??___ftadd
  4992  002062  0E07               	movlw	7
  4993  002064  1634               	andwf	??___ftadd,f,c
  4994  002066  B4D8               	btfsc	status,2,c
  4995  002068  D006               	goto	l596
  4996  00206A  D7EF               	goto	u1910
  4997  00206C  90D8               	bcf	status,0,c
  4998  00206E  3233               	rrcf	___ftadd@f2+2,f,c
  4999  002070  3232               	rrcf	___ftadd@f2+1,f,c
  5000  002072  3231               	rrcf	___ftadd@f2,f,c
  5001  002074  2A38               	incf	___ftadd@exp2,f,c
  5002  002076                     l596:
  5003  002076  5038               	movf	___ftadd@exp2,w,c
  5004  002078  1839               	xorwf	___ftadd@exp1,w,c
  5005  00207A  A4D8               	btfss	status,2,c
  5006  00207C  D7F7               	goto	l597
  5007  00207E                     u1940:
  5008  00207E  AE37               	btfss	___ftadd@sign,7,c
  5009  002080  D00C               	goto	l599
  5010  002082  0EFF               	movlw	255
  5011  002084  1A2E               	xorwf	___ftadd@f1,f,c
  5012  002086  0EFF               	movlw	255
  5013  002088  1A2F               	xorwf	___ftadd@f1+1,f,c
  5014  00208A  0EFF               	movlw	255
  5015  00208C  1A30               	xorwf	___ftadd@f1+2,f,c
  5016  00208E  0E01               	movlw	1
  5017  002090  262E               	addwf	___ftadd@f1,f,c
  5018  002092  0E00               	movlw	0
  5019  002094  222F               	addwfc	___ftadd@f1+1,f,c
  5020  002096  0E00               	movlw	0
  5021  002098  2230               	addwfc	___ftadd@f1+2,f,c
  5022  00209A                     l599:
  5023  00209A  AC37               	btfss	___ftadd@sign,6,c
  5024  00209C  D00C               	goto	l600
  5025  00209E  0EFF               	movlw	255
  5026  0020A0  1A31               	xorwf	___ftadd@f2,f,c
  5027  0020A2  0EFF               	movlw	255
  5028  0020A4  1A32               	xorwf	___ftadd@f2+1,f,c
  5029  0020A6  0EFF               	movlw	255
  5030  0020A8  1A33               	xorwf	___ftadd@f2+2,f,c
  5031  0020AA  0E01               	movlw	1
  5032  0020AC  2631               	addwf	___ftadd@f2,f,c
  5033  0020AE  0E00               	movlw	0
  5034  0020B0  2232               	addwfc	___ftadd@f2+1,f,c
  5035  0020B2  0E00               	movlw	0
  5036  0020B4  2233               	addwfc	___ftadd@f2+2,f,c
  5037  0020B6                     l600:
  5038  0020B6  0E00               	movlw	0
  5039  0020B8  6E37               	movwf	___ftadd@sign,c
  5040  0020BA  502E               	movf	___ftadd@f1,w,c
  5041  0020BC  2631               	addwf	___ftadd@f2,f,c
  5042  0020BE  502F               	movf	___ftadd@f1+1,w,c
  5043  0020C0  2232               	addwfc	___ftadd@f2+1,f,c
  5044  0020C2  5030               	movf	___ftadd@f1+2,w,c
  5045  0020C4  2233               	addwfc	___ftadd@f2+2,f,c
  5046  0020C6  AE33               	btfss	___ftadd@f2+2,7,c
  5047  0020C8  D00E               	goto	l601
  5048  0020CA  0EFF               	movlw	255
  5049  0020CC  1A31               	xorwf	___ftadd@f2,f,c
  5050  0020CE  0EFF               	movlw	255
  5051  0020D0  1A32               	xorwf	___ftadd@f2+1,f,c
  5052  0020D2  0EFF               	movlw	255
  5053  0020D4  1A33               	xorwf	___ftadd@f2+2,f,c
  5054  0020D6  0E01               	movlw	1
  5055  0020D8  2631               	addwf	___ftadd@f2,f,c
  5056  0020DA  0E00               	movlw	0
  5057  0020DC  2232               	addwfc	___ftadd@f2+1,f,c
  5058  0020DE  0E00               	movlw	0
  5059  0020E0  2233               	addwfc	___ftadd@f2+2,f,c
  5060  0020E2  0E01               	movlw	1
  5061  0020E4  6E37               	movwf	___ftadd@sign,c
  5062  0020E6                     l601:
  5063  0020E6  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5064  0020EA  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5065  0020EE  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5066  0020F2  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5067  0020F6  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5068  0020FA  EC38  F014         	call	___ftpack	;wreg free
  5069  0020FE  C001  F02E         	movff	?___ftpack,?___ftadd
  5070  002102  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5071  002106  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5072  00210A  0012               	return	
  5073  00210C                     __end_of___ftadd:
  5074                           	opt stack 0
  5075                           tblptru	equ	0xFF8
  5076                           tblptrh	equ	0xFF7
  5077                           tblptrl	equ	0xFF6
  5078                           tablat	equ	0xFF5
  5079                           prodh	equ	0xFF4
  5080                           prodl	equ	0xFF3
  5081                           intcon	equ	0xFF2
  5082                           postinc0	equ	0xFEE
  5083                           wreg	equ	0xFE8
  5084                           postdec1	equ	0xFE5
  5085                           fsr1l	equ	0xFE1
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093 ;; *************** function ___ftneg *****************
  5094 ;; Defined at:
  5095 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  f1              3    0[COMRAM] float 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;		None
  5100 ;; Return value:  Size  Location     Type
  5101 ;;                  3    0[COMRAM] float 
  5102 ;; Registers used:
  5103 ;;		wreg, status,2, status,0
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5109 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5113 ;;Total ram usage:        3 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; This function calls:
  5116 ;;		Nothing
  5117 ;; This function is called by:
  5118 ;;		_sprintf
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text17
  5123  002F62                     __ptext17:
  5124                           	opt stack 0
  5125  002F62                     ___ftneg:
  5126                           	opt stack 29
  5127                           
  5128                           ;incstack = 0
  5129  002F62  5001               	movf	___ftneg@f1,w,c
  5130  002F64  1002               	iorwf	___ftneg@f1+1,w,c
  5131  002F66  1003               	iorwf	___ftneg@f1+2,w,c
  5132  002F68  B4D8               	btfsc	status,2,c
  5133  002F6A  D006               	goto	l649
  5134  002F6C  0E00               	movlw	0
  5135  002F6E  1A01               	xorwf	___ftneg@f1,f,c
  5136  002F70  0E00               	movlw	0
  5137  002F72  1A02               	xorwf	___ftneg@f1+1,f,c
  5138  002F74  0E80               	movlw	128
  5139  002F76  1A03               	xorwf	___ftneg@f1+2,f,c
  5140  002F78                     l649:
  5141  002F78  C001  F001         	movff	___ftneg@f1,?___ftneg
  5142  002F7C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5143  002F80  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5144  002F84  0012               	return		;funcret
  5145  002F86                     __end_of___ftneg:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           postdec1	equ	0xFE5
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           postinc2	equ	0xFDE
  5160                           postdec2	equ	0xFDD
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function ___ftge *****************
  5166 ;; Defined at:
  5167 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;  ff1             3    0[COMRAM] float 
  5170 ;;  ff2             3    3[COMRAM] float 
  5171 ;; Auto vars:     Size  Location     Type
  5172 ;;		None
  5173 ;; Return value:  Size  Location     Type
  5174 ;;		None               void
  5175 ;; Registers used:
  5176 ;;		wreg, status,2, status,0
  5177 ;; Tracked objects:
  5178 ;;		On entry : 0/0
  5179 ;;		On exit  : 0/0
  5180 ;;		Unchanged: 0/0
  5181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5182 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;Total ram usage:        9 bytes
  5187 ;; Hardware stack levels used:    1
  5188 ;; This function calls:
  5189 ;;		Nothing
  5190 ;; This function is called by:
  5191 ;;		_sprintf
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text18
  5196  00291E                     __ptext18:
  5197                           	opt stack 0
  5198  00291E                     ___ftge:
  5199                           	opt stack 29
  5200                           
  5201                           ;incstack = 0
  5202  00291E  AE03               	btfss	___ftge@ff1+2,7,c
  5203  002920  D016               	goto	l631
  5204  002922  C001  F007         	movff	___ftge@ff1,??___ftge
  5205  002926  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5206  00292A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5207  00292E  1E07               	comf	??___ftge,f,c
  5208  002930  1E08               	comf	??___ftge+1,f,c
  5209  002932  1E09               	comf	??___ftge+2,f,c
  5210  002934  2A07               	incf	??___ftge,f,c
  5211  002936  0E00               	movlw	0
  5212  002938  2208               	addwfc	??___ftge+1,f,c
  5213  00293A  2209               	addwfc	??___ftge+2,f,c
  5214  00293C  0E00               	movlw	0
  5215  00293E  2407               	addwf	??___ftge,w,c
  5216  002940  6E01               	movwf	___ftge@ff1,c
  5217  002942  0E00               	movlw	0
  5218  002944  2008               	addwfc	??___ftge+1,w,c
  5219  002946  6E02               	movwf	___ftge@ff1+1,c
  5220  002948  0E80               	movlw	128
  5221  00294A  2009               	addwfc	??___ftge+2,w,c
  5222  00294C  6E03               	movwf	___ftge@ff1+2,c
  5223  00294E                     l631:
  5224  00294E  AE06               	btfss	___ftge@ff2+2,7,c
  5225  002950  D016               	goto	l632
  5226  002952  C004  F007         	movff	___ftge@ff2,??___ftge
  5227  002956  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5228  00295A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5229  00295E  1E07               	comf	??___ftge,f,c
  5230  002960  1E08               	comf	??___ftge+1,f,c
  5231  002962  1E09               	comf	??___ftge+2,f,c
  5232  002964  2A07               	incf	??___ftge,f,c
  5233  002966  0E00               	movlw	0
  5234  002968  2208               	addwfc	??___ftge+1,f,c
  5235  00296A  2209               	addwfc	??___ftge+2,f,c
  5236  00296C  0E00               	movlw	0
  5237  00296E  2407               	addwf	??___ftge,w,c
  5238  002970  6E04               	movwf	___ftge@ff2,c
  5239  002972  0E00               	movlw	0
  5240  002974  2008               	addwfc	??___ftge+1,w,c
  5241  002976  6E05               	movwf	___ftge@ff2+1,c
  5242  002978  0E80               	movlw	128
  5243  00297A  2009               	addwfc	??___ftge+2,w,c
  5244  00297C  6E06               	movwf	___ftge@ff2+2,c
  5245  00297E                     l632:
  5246  00297E  0E00               	movlw	0
  5247  002980  1A01               	xorwf	___ftge@ff1,f,c
  5248  002982  0E00               	movlw	0
  5249  002984  1A02               	xorwf	___ftge@ff1+1,f,c
  5250  002986  0E80               	movlw	128
  5251  002988  1A03               	xorwf	___ftge@ff1+2,f,c
  5252  00298A  0E00               	movlw	0
  5253  00298C  1A04               	xorwf	___ftge@ff2,f,c
  5254  00298E  0E00               	movlw	0
  5255  002990  1A05               	xorwf	___ftge@ff2+1,f,c
  5256  002992  0E80               	movlw	128
  5257  002994  1A06               	xorwf	___ftge@ff2+2,f,c
  5258  002996  5004               	movf	___ftge@ff2,w,c
  5259  002998  5C01               	subwf	___ftge@ff1,w,c
  5260  00299A  5005               	movf	___ftge@ff2+1,w,c
  5261  00299C  5802               	subwfb	___ftge@ff1+1,w,c
  5262  00299E  5006               	movf	___ftge@ff2+2,w,c
  5263  0029A0  5803               	subwfb	___ftge@ff1+2,w,c
  5264  0029A2  B0D8               	btfsc	status,0,c
  5265  0029A4  D002               	goto	l2127
  5266  0029A6  90D8               	bcf	status,0,c
  5267  0029A8  0012               	return	
  5268  0029AA                     l2127:
  5269  0029AA  80D8               	bsf	status,0,c
  5270  0029AC  0012               	return	
  5271  0029AE                     __end_of___ftge:
  5272                           	opt stack 0
  5273                           tblptru	equ	0xFF8
  5274                           tblptrh	equ	0xFF7
  5275                           tblptrl	equ	0xFF6
  5276                           tablat	equ	0xFF5
  5277                           prodh	equ	0xFF4
  5278                           prodl	equ	0xFF3
  5279                           intcon	equ	0xFF2
  5280                           postinc0	equ	0xFEE
  5281                           wreg	equ	0xFE8
  5282                           postdec1	equ	0xFE5
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _setupSerial *****************
  5292 ;; Defined at:
  5293 ;;		line 3 in file "my_ser.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;		None
  5296 ;; Auto vars:     Size  Location     Type
  5297 ;;  dummy           1    0[COMRAM] unsigned char 
  5298 ;; Return value:  Size  Location     Type
  5299 ;;                  1    wreg      void 
  5300 ;; Registers used:
  5301 ;;		wreg, status,2
  5302 ;; Tracked objects:
  5303 ;;		On entry : 0/0
  5304 ;;		On exit  : 0/0
  5305 ;;		Unchanged: 0/0
  5306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;Total ram usage:        1 bytes
  5312 ;; Hardware stack levels used:    1
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_main
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text19
  5321  002F86                     __ptext19:
  5322                           	opt stack 0
  5323  002F86                     _setupSerial:
  5324                           	opt stack 30
  5325                           
  5326                           ;my_ser.c: 4: unsigned char dummy;
  5327                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 1;
  5328                           
  5329                           ;incstack = 0
  5330  002F86  86B8               	bsf	4024,3,c	;volatile
  5331                           
  5332                           ;my_ser.c: 6: TXSTA = 0;
  5333  002F88  0E00               	movlw	0
  5334  002F8A  6EAC               	movwf	4012,c	;volatile
  5335                           
  5336                           ;my_ser.c: 7: SPBRG = 0x67;
  5337  002F8C  0E67               	movlw	103
  5338  002F8E  6EAF               	movwf	4015,c	;volatile
  5339                           
  5340                           ;my_ser.c: 8: SPBRGH = 0;
  5341  002F90  0E00               	movlw	0
  5342  002F92  6EB0               	movwf	4016,c	;volatile
  5343                           
  5344                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  5345  002F94  84AC               	bsf	4012,2,c	;volatile
  5346                           
  5347                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  5348  002F96  8AAC               	bsf	4012,5,c	;volatile
  5349                           
  5350                           ;my_ser.c: 13: RCSTA = 0;
  5351  002F98  0E00               	movlw	0
  5352  002F9A  6EAB               	movwf	4011,c	;volatile
  5353                           
  5354                           ;my_ser.c: 14: RCSTAbits.CREN = 1;
  5355  002F9C  88AB               	bsf	4011,4,c	;volatile
  5356                           
  5357                           ;my_ser.c: 15: RCSTAbits.SPEN = 1;
  5358  002F9E  8EAB               	bsf	4011,7,c	;volatile
  5359                           
  5360                           ;my_ser.c: 16: ;
  5361                           ;my_ser.c: 17: dummy = RCREG;
  5362  002FA0  CFAE F001          	movff	4014,setupSerial@dummy	;volatile
  5363                           
  5364                           ;my_ser.c: 18: dummy = RCREG;
  5365  002FA4  CFAE F001          	movff	4014,setupSerial@dummy	;volatile
  5366  002FA8  0012               	return	
  5367  002FAA                     __end_of_setupSerial:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           intcon	equ	0xFF2
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           postdec1	equ	0xFE5
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _send_string_no_lib *****************
  5388 ;; Defined at:
  5389 ;;		line 46 in file "my_ser.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  p               2    1[COMRAM] PTR unsigned char 
  5392 ;;		 -> STR_2(12), 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5404 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;Total ram usage:        2 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    1
  5411 ;; This function calls:
  5412 ;;		_send_byte_no_lib
  5413 ;; This function is called by:
  5414 ;;		_main
  5415 ;; This function uses a non-reentrant model
  5416 ;;
  5417                           
  5418                           	psect	text20
  5419  002EC2                     __ptext20:
  5420                           	opt stack 0
  5421  002EC2                     _send_string_no_lib:
  5422                           	opt stack 29
  5423                           
  5424                           ;my_ser.c: 47: while (*p) {
  5425                           
  5426                           ;incstack = 0
  5427  002EC2  D00A               	goto	l197
  5428  002EC4                     
  5429                           ;my_ser.c: 48: send_byte_no_lib(*p);
  5430  002EC4  C002  FFF6         	movff	send_string_no_lib@p,tblptrl
  5431  002EC8  C003  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  5432  002ECC                     	if	0	;tblptru may be non-zero
  5433  002ECC                     	endif
  5434  002ECC                     	if	0	;tblptru may be non-zero
  5435  002ECC                     	endif
  5436  002ECC  0008               	tblrd		*
  5437  002ECE  50F5               	movf	tablat,w,c
  5438  002ED0  EC01  F018         	call	_send_byte_no_lib
  5439                           
  5440                           ;my_ser.c: 49: p++;
  5441  002ED4  4A02               	infsnz	send_string_no_lib@p,f,c
  5442  002ED6  2A03               	incf	send_string_no_lib@p+1,f,c
  5443  002ED8                     l197:
  5444  002ED8  C002  FFF6         	movff	send_string_no_lib@p,tblptrl
  5445  002EDC  C003  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  5446  002EE0                     	if	0	;tblptru may be non-zero
  5447  002EE0                     	endif
  5448  002EE0                     	if	0	;tblptru may be non-zero
  5449  002EE0                     	endif
  5450  002EE0  0008               	tblrd		*
  5451  002EE2  50F5               	movf	tablat,w,c
  5452  002EE4  0900               	iorlw	0
  5453  002EE6  B4D8               	btfsc	status,2,c
  5454  002EE8  0012               	return	
  5455  002EEA  D7EC               	goto	l198
  5456  002EEC                     __end_of_send_string_no_lib:
  5457                           	opt stack 0
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           postinc0	equ	0xFEE
  5466                           wreg	equ	0xFE8
  5467                           postdec1	equ	0xFE5
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function _send_byte_no_lib *****************
  5477 ;; Defined at:
  5478 ;;		line 38 in file "my_ser.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  c               1    wreg     unsigned char 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  c               1    0[COMRAM] unsigned char 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      void 
  5485 ;; Registers used:
  5486 ;;		wreg
  5487 ;; Tracked objects:
  5488 ;;		On entry : 0/0
  5489 ;;		On exit  : 0/0
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5493 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5495 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5496 ;;Total ram usage:        1 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; This function calls:
  5499 ;;		Nothing
  5500 ;; This function is called by:
  5501 ;;		_send_string_no_lib
  5502 ;; This function uses a non-reentrant model
  5503 ;;
  5504                           
  5505                           	psect	text21
  5506  003002                     __ptext21:
  5507                           	opt stack 0
  5508  003002                     _send_byte_no_lib:
  5509                           	opt stack 29
  5510                           
  5511                           ;incstack = 0
  5512                           ;send_byte_no_lib@c stored from wreg
  5513  003002  6E01               	movwf	send_byte_no_lib@c,c
  5514                           
  5515                           ;my_ser.c: 39: while (!TXSTAbits.TRMT)
  5516  003004  D001               	goto	l191
  5517  003006                     l192:
  5518  003006  0004               	clrwdt		;# 
  5519  003008                     l191:
  5520  003008  A2AC               	btfss	4012,1,c	;volatile
  5521  00300A  D7FD               	goto	l192
  5522                           
  5523                           ;my_ser.c: 42: }
  5524                           ;my_ser.c: 43: TXREG = c;
  5525  00300C  C001  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  5526  003010  0012               	return		;funcret
  5527  003012                     __end_of_send_byte_no_lib:
  5528                           	opt stack 0
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _read_byte_no_lib *****************
  5548 ;; Defined at:
  5549 ;;		line 32 in file "my_ser.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;		None
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;  c               1    0[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  1    wreg      unsigned char 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;Total ram usage:        1 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; This function calls:
  5570 ;;		Nothing
  5571 ;; This function is called by:
  5572 ;;		_main
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text22
  5577  00301E                     __ptext22:
  5578                           	opt stack 0
  5579  00301E                     _read_byte_no_lib:
  5580                           	opt stack 30
  5581                           
  5582                           ;my_ser.c: 33: unsigned char c;
  5583                           ;my_ser.c: 34: c = RCREG;
  5584                           
  5585                           ;incstack = 0
  5586  00301E  CFAE F001          	movff	4014,read_byte_no_lib@c	;volatile
  5587                           
  5588                           ;my_ser.c: 35: return c;
  5589  003022  5001               	movf	read_byte_no_lib@c,w,c
  5590  003024  0012               	return	
  5591  003026                     __end_of_read_byte_no_lib:
  5592                           	opt stack 0
  5593                           tblptru	equ	0xFF8
  5594                           tblptrh	equ	0xFF7
  5595                           tblptrl	equ	0xFF6
  5596                           tablat	equ	0xFF5
  5597                           prodh	equ	0xFF4
  5598                           prodl	equ	0xFF3
  5599                           intcon	equ	0xFF2
  5600                           postinc0	equ	0xFEE
  5601                           wreg	equ	0xFE8
  5602                           postdec1	equ	0xFE5
  5603                           fsr1l	equ	0xFE1
  5604                           indf2	equ	0xFDF
  5605                           postinc2	equ	0xFDE
  5606                           postdec2	equ	0xFDD
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611 ;; *************** function _read_adc_voltage *****************
  5612 ;; Defined at:
  5613 ;;		line 40 in file "my_adc.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  channel         1    wreg     unsigned char 
  5616 ;; Auto vars:     Size  Location     Type
  5617 ;;  channel         1   61[COMRAM] unsigned char 
  5618 ;;  temp            3   53[COMRAM] float 
  5619 ;;  voltage         3   56[COMRAM] float 
  5620 ;;  raw_value       2   59[COMRAM] int 
  5621 ;; Return value:  Size  Location     Type
  5622 ;;                  3   50[COMRAM] float 
  5623 ;; Registers used:
  5624 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5625 ;; Tracked objects:
  5626 ;;		On entry : 0/0
  5627 ;;		On exit  : 0/0
  5628 ;;		Unchanged: 0/0
  5629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5630 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5631 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;Total ram usage:       12 bytes
  5635 ;; Hardware stack levels used:    1
  5636 ;; Hardware stack levels required when called:    2
  5637 ;; This function calls:
  5638 ;;		___awtoft
  5639 ;;		___ftdiv
  5640 ;;		___wmul
  5641 ;;		_read_adc_raw_no_lib
  5642 ;; This function is called by:
  5643 ;;		_main
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text23
  5648  0027A0                     __ptext23:
  5649                           	opt stack 0
  5650  0027A0                     _read_adc_voltage:
  5651                           	opt stack 28
  5652                           
  5653                           ;incstack = 0
  5654                           ;read_adc_voltage@channel stored from wreg
  5655  0027A0  6E3E               	movwf	read_adc_voltage@channel,c
  5656                           
  5657                           ;my_adc.c: 41: int raw_value;
  5658                           ;my_adc.c: 42: float voltage;
  5659                           ;my_adc.c: 43: if(channel==1){
  5660  0027A2  043E               	decf	read_adc_voltage@channel,w,c
  5661  0027A4  A4D8               	btfss	status,2,c
  5662  0027A6  D032               	goto	l152
  5663                           
  5664                           ;my_adc.c: 47: float temp ;
  5665                           ;my_adc.c: 48: raw_value = read_adc_raw_no_lib(channel);
  5666  0027A8  503E               	movf	read_adc_voltage@channel,w,c
  5667  0027AA  ECFC  F016         	call	_read_adc_raw_no_lib
  5668  0027AE  C001  F03C         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  5669  0027B2  C002  F03D         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  5670                           
  5671                           ;my_adc.c: 53: temp = (raw_value * ( 150 - (0)) /1023.0 + (0));
  5672  0027B6  C03C  F00F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  5673  0027BA  C03D  F010         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  5674  0027BE  0E00               	movlw	0
  5675  0027C0  6E12               	movwf	___wmul@multiplicand+1,c
  5676  0027C2  0E96               	movlw	150
  5677  0027C4  6E11               	movwf	___wmul@multiplicand,c
  5678  0027C6  EC8B  F017         	call	___wmul	;wreg free
  5679  0027CA  C00F  F015         	movff	?___wmul,___awtoft@c
  5680  0027CE  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5681  0027D2  EC19  F017         	call	___awtoft	;wreg free
  5682  0027D6  C015  F024         	movff	?___awtoft,___ftdiv@f1
  5683  0027DA  C016  F025         	movff	?___awtoft+1,___ftdiv@f1+1
  5684  0027DE  C017  F026         	movff	?___awtoft+2,___ftdiv@f1+2
  5685  0027E2  0EC0               	movlw	192
  5686  0027E4  6E27               	movwf	___ftdiv@f2,c
  5687  0027E6  0E7F               	movlw	127
  5688  0027E8  6E28               	movwf	___ftdiv@f2+1,c
  5689  0027EA  0E44               	movlw	68
  5690  0027EC  6E29               	movwf	___ftdiv@f2+2,c
  5691  0027EE  EC5D  F013         	call	___ftdiv	;wreg free
  5692  0027F2  C024  F036         	movff	?___ftdiv,read_adc_voltage@temp
  5693  0027F6  C025  F037         	movff	?___ftdiv+1,read_adc_voltage@temp+1
  5694  0027FA  C026  F038         	movff	?___ftdiv+2,read_adc_voltage@temp+2
  5695                           
  5696                           ;my_adc.c: 54: voltage=temp;
  5697  0027FE  C036  F039         	movff	read_adc_voltage@temp,read_adc_voltage@voltage
  5698  002802  C037  F03A         	movff	read_adc_voltage@temp+1,read_adc_voltage@voltage+1
  5699  002806  C038  F03B         	movff	read_adc_voltage@temp+2,read_adc_voltage@voltage+2
  5700                           
  5701                           ;my_adc.c: 56: }else{
  5702  00280A  D02B               	goto	l153
  5703  00280C                     l152:
  5704                           
  5705                           ;my_adc.c: 57: raw_value = read_adc_raw_no_lib(channel);
  5706  00280C  503E               	movf	read_adc_voltage@channel,w,c
  5707  00280E  ECFC  F016         	call	_read_adc_raw_no_lib
  5708  002812  C001  F03C         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  5709  002816  C002  F03D         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  5710                           
  5711                           ;my_adc.c: 58: voltage = (raw_value * 5) / 1023.0;
  5712  00281A  C03C  F00F         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  5713  00281E  C03D  F010         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  5714  002822  0E00               	movlw	0
  5715  002824  6E12               	movwf	___wmul@multiplicand+1,c
  5716  002826  0E05               	movlw	5
  5717  002828  6E11               	movwf	___wmul@multiplicand,c
  5718  00282A  EC8B  F017         	call	___wmul	;wreg free
  5719  00282E  C00F  F015         	movff	?___wmul,___awtoft@c
  5720  002832  C010  F016         	movff	?___wmul+1,___awtoft@c+1
  5721  002836  EC19  F017         	call	___awtoft	;wreg free
  5722  00283A  C015  F024         	movff	?___awtoft,___ftdiv@f1
  5723  00283E  C016  F025         	movff	?___awtoft+1,___ftdiv@f1+1
  5724  002842  C017  F026         	movff	?___awtoft+2,___ftdiv@f1+2
  5725  002846  0EC0               	movlw	192
  5726  002848  6E27               	movwf	___ftdiv@f2,c
  5727  00284A  0E7F               	movlw	127
  5728  00284C  6E28               	movwf	___ftdiv@f2+1,c
  5729  00284E  0E44               	movlw	68
  5730  002850  6E29               	movwf	___ftdiv@f2+2,c
  5731  002852  EC5D  F013         	call	___ftdiv	;wreg free
  5732  002856  C024  F039         	movff	?___ftdiv,read_adc_voltage@voltage
  5733  00285A  C025  F03A         	movff	?___ftdiv+1,read_adc_voltage@voltage+1
  5734  00285E  C026  F03B         	movff	?___ftdiv+2,read_adc_voltage@voltage+2
  5735  002862                     l153:
  5736                           
  5737                           ;my_adc.c: 59: }
  5738                           ;my_adc.c: 61: return voltage;
  5739  002862  C039  F033         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  5740  002866  C03A  F034         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  5741  00286A  C03B  F035         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  5742  00286E  0012               	return	
  5743  002870                     __end_of_read_adc_voltage:
  5744                           	opt stack 0
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           postinc0	equ	0xFEE
  5753                           wreg	equ	0xFE8
  5754                           postdec1	equ	0xFE5
  5755                           fsr1l	equ	0xFE1
  5756                           indf2	equ	0xFDF
  5757                           postinc2	equ	0xFDE
  5758                           postdec2	equ	0xFDD
  5759                           fsr2h	equ	0xFDA
  5760                           fsr2l	equ	0xFD9
  5761                           status	equ	0xFD8
  5762                           
  5763 ;; *************** function _read_adc_raw_no_lib *****************
  5764 ;; Defined at:
  5765 ;;		line 24 in file "my_adc.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  channel         1    wreg     unsigned char 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  channel         1    6[COMRAM] unsigned char 
  5770 ;;  raw_value       2    4[COMRAM] int 
  5771 ;; Return value:  Size  Location     Type
  5772 ;;                  2    0[COMRAM] int 
  5773 ;; Registers used:
  5774 ;;		wreg, status,2, status,0
  5775 ;; Tracked objects:
  5776 ;;		On entry : 0/0
  5777 ;;		On exit  : 0/0
  5778 ;;		Unchanged: 0/0
  5779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5780 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;Total ram usage:        7 bytes
  5785 ;; Hardware stack levels used:    1
  5786 ;; This function calls:
  5787 ;;		Nothing
  5788 ;; This function is called by:
  5789 ;;		_read_adc_voltage
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text24
  5794  002DF8                     __ptext24:
  5795                           	opt stack 0
  5796  002DF8                     _read_adc_raw_no_lib:
  5797                           	opt stack 29
  5798                           
  5799                           ;incstack = 0
  5800                           ;read_adc_raw_no_lib@channel stored from wreg
  5801  002DF8  6E07               	movwf	read_adc_raw_no_lib@channel,c
  5802                           
  5803                           ;my_adc.c: 25: int raw_value;
  5804                           ;my_adc.c: 26: ADCON0bits.CHS = channel;
  5805  002DFA  C007  F003         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  5806  002DFE  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  5807  002E00  4603               	rlncf	??_read_adc_raw_no_lib,f,c
  5808  002E02  50C2               	movf	4034,w,c	;volatile
  5809  002E04  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  5810  002E06  0BC3               	andlw	-61
  5811  002E08  1803               	xorwf	??_read_adc_raw_no_lib,w,c
  5812  002E0A  6EC2               	movwf	4034,c	;volatile
  5813                           
  5814                           ;my_adc.c: 29: ADCON0bits.GO = 1;
  5815  002E0C  82C2               	bsf	4034,1,c	;volatile
  5816  002E0E  B2C2               	btfsc	4034,1,c	;volatile
  5817  002E10  D7FE               	goto	l147
  5818                           
  5819                           ;my_adc.c: 33: raw_value = ADRESH << 8 | ADRESL;
  5820  002E12  50C3               	movf	4035,w,c	;volatile
  5821  002E14  CFC4 F003          	movff	4036,??_read_adc_raw_no_lib	;volatile
  5822  002E18  6A04               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  5823  002E1A  C003  F004         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  5824  002E1E  6A03               	clrf	??_read_adc_raw_no_lib,c
  5825  002E20  1003               	iorwf	??_read_adc_raw_no_lib,w,c
  5826  002E22  6E05               	movwf	read_adc_raw_no_lib@raw_value,c
  5827  002E24  5004               	movf	??_read_adc_raw_no_lib+1,w,c
  5828  002E26  6E06               	movwf	read_adc_raw_no_lib@raw_value+1,c
  5829                           
  5830                           ;my_adc.c: 37: return raw_value;
  5831  002E28  C005  F001         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  5832  002E2C  C006  F002         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  5833  002E30  0012               	return	
  5834  002E32                     __end_of_read_adc_raw_no_lib:
  5835                           	opt stack 0
  5836                           tblptru	equ	0xFF8
  5837                           tblptrh	equ	0xFF7
  5838                           tblptrl	equ	0xFF6
  5839                           tablat	equ	0xFF5
  5840                           prodh	equ	0xFF4
  5841                           prodl	equ	0xFF3
  5842                           intcon	equ	0xFF2
  5843                           postinc0	equ	0xFEE
  5844                           wreg	equ	0xFE8
  5845                           postdec1	equ	0xFE5
  5846                           fsr1l	equ	0xFE1
  5847                           indf2	equ	0xFDF
  5848                           postinc2	equ	0xFDE
  5849                           postdec2	equ	0xFDD
  5850                           fsr2h	equ	0xFDA
  5851                           fsr2l	equ	0xFD9
  5852                           status	equ	0xFD8
  5853                           
  5854 ;; *************** function ___wmul *****************
  5855 ;; Defined at:
  5856 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;  multiplier      2   14[COMRAM] unsigned int 
  5859 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5860 ;; Auto vars:     Size  Location     Type
  5861 ;;  product         2   18[COMRAM] unsigned int 
  5862 ;; Return value:  Size  Location     Type
  5863 ;;                  2   14[COMRAM] unsigned int 
  5864 ;; Registers used:
  5865 ;;		wreg, status,2, status,0, prodl, prodh
  5866 ;; Tracked objects:
  5867 ;;		On entry : 0/0
  5868 ;;		On exit  : 0/0
  5869 ;;		Unchanged: 0/0
  5870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5871 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5874 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;Total ram usage:        6 bytes
  5876 ;; Hardware stack levels used:    1
  5877 ;; This function calls:
  5878 ;;		Nothing
  5879 ;; This function is called by:
  5880 ;;		_read_adc_voltage
  5881 ;;		_fround
  5882 ;;		_scale
  5883 ;;		_sprintf
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text25
  5888  002F16                     __ptext25:
  5889                           	opt stack 0
  5890  002F16                     ___wmul:
  5891                           	opt stack 28
  5892                           
  5893                           ;incstack = 0
  5894  002F16  500F               	movf	___wmul@multiplier,w,c
  5895  002F18  0211               	mulwf	___wmul@multiplicand,c
  5896  002F1A  CFF3 F013          	movff	prodl,___wmul@product
  5897  002F1E  CFF4 F014          	movff	prodh,___wmul@product+1
  5898  002F22  500F               	movf	___wmul@multiplier,w,c
  5899  002F24  0212               	mulwf	___wmul@multiplicand+1,c
  5900  002F26  50F3               	movf	prodl,w,c
  5901  002F28  2614               	addwf	___wmul@product+1,f,c
  5902  002F2A  5010               	movf	___wmul@multiplier+1,w,c
  5903  002F2C  0211               	mulwf	___wmul@multiplicand,c
  5904  002F2E  50F3               	movf	prodl,w,c
  5905  002F30  2614               	addwf	___wmul@product+1,f,c
  5906  002F32  C013  F00F         	movff	___wmul@product,?___wmul
  5907  002F36  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5908  002F3A  0012               	return	
  5909  002F3C                     __end_of___wmul:
  5910                           	opt stack 0
  5911                           tblptru	equ	0xFF8
  5912                           tblptrh	equ	0xFF7
  5913                           tblptrl	equ	0xFF6
  5914                           tablat	equ	0xFF5
  5915                           prodh	equ	0xFF4
  5916                           prodl	equ	0xFF3
  5917                           intcon	equ	0xFF2
  5918                           postinc0	equ	0xFEE
  5919                           wreg	equ	0xFE8
  5920                           postdec1	equ	0xFE5
  5921                           fsr1l	equ	0xFE1
  5922                           indf2	equ	0xFDF
  5923                           postinc2	equ	0xFDE
  5924                           postdec2	equ	0xFDD
  5925                           fsr2h	equ	0xFDA
  5926                           fsr2l	equ	0xFD9
  5927                           status	equ	0xFD8
  5928                           
  5929 ;; *************** function ___ftdiv *****************
  5930 ;; Defined at:
  5931 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
  5932 ;; Parameters:    Size  Location     Type
  5933 ;;  f1              3   35[COMRAM] float 
  5934 ;;  f2              3   38[COMRAM] float 
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  f3              3   45[COMRAM] float 
  5937 ;;  sign            1   49[COMRAM] unsigned char 
  5938 ;;  exp             1   48[COMRAM] unsigned char 
  5939 ;;  cntr            1   44[COMRAM] unsigned char 
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  3   35[COMRAM] float 
  5942 ;; Registers used:
  5943 ;;		wreg, status,2, status,0, cstack
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5949 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;Total ram usage:       15 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:    1
  5956 ;; This function calls:
  5957 ;;		___ftpack
  5958 ;; This function is called by:
  5959 ;;		_main
  5960 ;;		_read_adc_voltage
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text26
  5965  0026BA                     __ptext26:
  5966                           	opt stack 0
  5967  0026BA                     ___ftdiv:
  5968                           	opt stack 28
  5969                           
  5970                           ;incstack = 0
  5971  0026BA  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5972  0026BE  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5973  0026C0  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5974  0026C2  3425               	rlcf	___ftdiv@f1+1,w,c
  5975  0026C4  362A               	rlcf	??___ftdiv& (0+255),f,c
  5976  0026C6  E301               	bnc	u2431
  5977  0026C8  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5978  0026CA                     u2431:
  5979  0026CA  502A               	movf	??___ftdiv,w,c
  5980  0026CC  6E31               	movwf	___ftdiv@exp,c
  5981  0026CE  5031               	movf	___ftdiv@exp,w,c
  5982  0026D0  A4D8               	btfss	status,2,c
  5983  0026D2  D007               	goto	l606
  5984  0026D4  0E00               	movlw	0
  5985  0026D6  6E24               	movwf	?___ftdiv,c
  5986  0026D8  0E00               	movlw	0
  5987  0026DA  6E25               	movwf	?___ftdiv+1,c
  5988  0026DC  0E00               	movlw	0
  5989  0026DE  6E26               	movwf	?___ftdiv+2,c
  5990  0026E0  0012               	return	
  5991  0026E2                     l606:
  5992  0026E2  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5993  0026E6  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5994  0026E8  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5995  0026EA  3428               	rlcf	___ftdiv@f2+1,w,c
  5996  0026EC  362A               	rlcf	??___ftdiv& (0+255),f,c
  5997  0026EE  E301               	bnc	u2451
  5998  0026F0  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5999  0026F2                     u2451:
  6000  0026F2  502A               	movf	??___ftdiv,w,c
  6001  0026F4  6E32               	movwf	___ftdiv@sign,c
  6002  0026F6  5032               	movf	___ftdiv@sign,w,c
  6003  0026F8  A4D8               	btfss	status,2,c
  6004  0026FA  D007               	goto	l608
  6005  0026FC  0E00               	movlw	0
  6006  0026FE  6E24               	movwf	?___ftdiv,c
  6007  002700  0E00               	movlw	0
  6008  002702  6E25               	movwf	?___ftdiv+1,c
  6009  002704  0E00               	movlw	0
  6010  002706  6E26               	movwf	?___ftdiv+2,c
  6011  002708  0012               	return	
  6012  00270A                     l608:
  6013  00270A  0E00               	movlw	0
  6014  00270C  6E2E               	movwf	___ftdiv@f3,c
  6015  00270E  0E00               	movlw	0
  6016  002710  6E2F               	movwf	___ftdiv@f3+1,c
  6017  002712  0E00               	movlw	0
  6018  002714  6E30               	movwf	___ftdiv@f3+2,c
  6019  002716  5032               	movf	___ftdiv@sign,w,c
  6020  002718  0F89               	addlw	137
  6021  00271A  5E31               	subwf	___ftdiv@exp,f,c
  6022  00271C  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  6023  002720  5029               	movf	___ftdiv@f2+2,w,c
  6024  002722  1A32               	xorwf	___ftdiv@sign,f,c
  6025  002724  0E80               	movlw	128
  6026  002726  1632               	andwf	___ftdiv@sign,f,c
  6027  002728  8E25               	bsf	___ftdiv@f1+1,7,c
  6028  00272A  0EFF               	movlw	255
  6029  00272C  1624               	andwf	___ftdiv@f1,f,c
  6030  00272E  0EFF               	movlw	255
  6031  002730  1625               	andwf	___ftdiv@f1+1,f,c
  6032  002732  0E00               	movlw	0
  6033  002734  1626               	andwf	___ftdiv@f1+2,f,c
  6034  002736  8E28               	bsf	___ftdiv@f2+1,7,c
  6035  002738  0EFF               	movlw	255
  6036  00273A  1627               	andwf	___ftdiv@f2,f,c
  6037  00273C  0EFF               	movlw	255
  6038  00273E  1628               	andwf	___ftdiv@f2+1,f,c
  6039  002740  0E00               	movlw	0
  6040  002742  1629               	andwf	___ftdiv@f2+2,f,c
  6041  002744  0E18               	movlw	24
  6042  002746  6E2D               	movwf	___ftdiv@cntr,c
  6043  002748  90D8               	bcf	status,0,c
  6044  00274A  362E               	rlcf	___ftdiv@f3,f,c
  6045  00274C  362F               	rlcf	___ftdiv@f3+1,f,c
  6046  00274E  3630               	rlcf	___ftdiv@f3+2,f,c
  6047  002750  5027               	movf	___ftdiv@f2,w,c
  6048  002752  5C24               	subwf	___ftdiv@f1,w,c
  6049  002754  5028               	movf	___ftdiv@f2+1,w,c
  6050  002756  5825               	subwfb	___ftdiv@f1+1,w,c
  6051  002758  5029               	movf	___ftdiv@f2+2,w,c
  6052  00275A  5826               	subwfb	___ftdiv@f1+2,w,c
  6053  00275C  A0D8               	btfss	status,0,c
  6054  00275E  D007               	goto	l610
  6055  002760  5027               	movf	___ftdiv@f2,w,c
  6056  002762  5E24               	subwf	___ftdiv@f1,f,c
  6057  002764  5028               	movf	___ftdiv@f2+1,w,c
  6058  002766  5A25               	subwfb	___ftdiv@f1+1,f,c
  6059  002768  5029               	movf	___ftdiv@f2+2,w,c
  6060  00276A  5A26               	subwfb	___ftdiv@f1+2,f,c
  6061  00276C  802E               	bsf	___ftdiv@f3,0,c
  6062  00276E                     l610:
  6063  00276E  90D8               	bcf	status,0,c
  6064  002770  3624               	rlcf	___ftdiv@f1,f,c
  6065  002772  3625               	rlcf	___ftdiv@f1+1,f,c
  6066  002774  3626               	rlcf	___ftdiv@f1+2,f,c
  6067  002776  2E2D               	decfsz	___ftdiv@cntr,f,c
  6068  002778  D7E7               	goto	l609
  6069  00277A  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  6070  00277E  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6071  002782  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6072  002786  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  6073  00278A  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  6074  00278E  EC38  F014         	call	___ftpack	;wreg free
  6075  002792  C001  F024         	movff	?___ftpack,?___ftdiv
  6076  002796  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  6077  00279A  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  6078  00279E  0012               	return	
  6079  0027A0                     __end_of___ftdiv:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           postinc0	equ	0xFEE
  6089                           wreg	equ	0xFE8
  6090                           postdec1	equ	0xFE5
  6091                           fsr1l	equ	0xFE1
  6092                           indf2	equ	0xFDF
  6093                           postinc2	equ	0xFDE
  6094                           postdec2	equ	0xFDD
  6095                           fsr2h	equ	0xFDA
  6096                           fsr2l	equ	0xFD9
  6097                           status	equ	0xFD8
  6098                           
  6099 ;; *************** function ___awtoft *****************
  6100 ;; Defined at:
  6101 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
  6102 ;; Parameters:    Size  Location     Type
  6103 ;;  c               2   20[COMRAM] int 
  6104 ;; Auto vars:     Size  Location     Type
  6105 ;;  sign            1   23[COMRAM] unsigned char 
  6106 ;; Return value:  Size  Location     Type
  6107 ;;                  3   20[COMRAM] float 
  6108 ;; Registers used:
  6109 ;;		wreg, status,2, status,0, cstack
  6110 ;; Tracked objects:
  6111 ;;		On entry : 0/0
  6112 ;;		On exit  : 0/0
  6113 ;;		Unchanged: 0/0
  6114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6115 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;Total ram usage:        4 bytes
  6120 ;; Hardware stack levels used:    1
  6121 ;; Hardware stack levels required when called:    1
  6122 ;; This function calls:
  6123 ;;		___ftpack
  6124 ;; This function is called by:
  6125 ;;		_read_adc_voltage
  6126 ;; This function uses a non-reentrant model
  6127 ;;
  6128                           
  6129                           	psect	text27
  6130  002E32                     __ptext27:
  6131                           	opt stack 0
  6132  002E32                     ___awtoft:
  6133                           	opt stack 28
  6134                           
  6135                           ;incstack = 0
  6136  002E32  0E00               	movlw	0
  6137  002E34  6E18               	movwf	___awtoft@sign,c
  6138  002E36  AE16               	btfss	___awtoft@c+1,7,c
  6139  002E38  D006               	goto	l506
  6140  002E3A  6C15               	negf	___awtoft@c,c
  6141  002E3C  1E16               	comf	___awtoft@c+1,f,c
  6142  002E3E  B0D8               	btfsc	status,0,c
  6143  002E40  2A16               	incf	___awtoft@c+1,f,c
  6144  002E42  0E01               	movlw	1
  6145  002E44  6E18               	movwf	___awtoft@sign,c
  6146  002E46                     l506:
  6147  002E46  C015  F001         	movff	___awtoft@c,___ftpack@arg
  6148  002E4A  C016  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  6149  002E4E  6A03               	clrf	___ftpack@arg+2,c
  6150  002E50  0E8E               	movlw	142
  6151  002E52  6E04               	movwf	___ftpack@exp,c
  6152  002E54  C018  F005         	movff	___awtoft@sign,___ftpack@sign
  6153  002E58  EC38  F014         	call	___ftpack	;wreg free
  6154  002E5C  C001  F015         	movff	?___ftpack,?___awtoft
  6155  002E60  C002  F016         	movff	?___ftpack+1,?___awtoft+1
  6156  002E64  C003  F017         	movff	?___ftpack+2,?___awtoft+2
  6157  002E68  0012               	return	
  6158  002E6A                     __end_of___awtoft:
  6159                           	opt stack 0
  6160                           tblptru	equ	0xFF8
  6161                           tblptrh	equ	0xFF7
  6162                           tblptrl	equ	0xFF6
  6163                           tablat	equ	0xFF5
  6164                           prodh	equ	0xFF4
  6165                           prodl	equ	0xFF3
  6166                           intcon	equ	0xFF2
  6167                           postinc0	equ	0xFEE
  6168                           wreg	equ	0xFE8
  6169                           postdec1	equ	0xFE5
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function ___ftpack *****************
  6179 ;; Defined at:
  6180 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;  arg             3    0[COMRAM] unsigned um
  6183 ;;  exp             1    3[COMRAM] unsigned char 
  6184 ;;  sign            1    4[COMRAM] unsigned char 
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;		None
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  3    0[COMRAM] float 
  6189 ;; Registers used:
  6190 ;;		wreg, status,2, status,0
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6196 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;Total ram usage:        8 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		___awtoft
  6206 ;;		___ftadd
  6207 ;;		___ftdiv
  6208 ;;		___ftmul
  6209 ;;		___lltoft
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text28
  6214  002870                     __ptext28:
  6215                           	opt stack 0
  6216  002870                     ___ftpack:
  6217                           	opt stack 27
  6218                           
  6219                           ;incstack = 0
  6220  002870  5004               	movf	___ftpack@exp,w,c
  6221  002872  B4D8               	btfsc	status,2,c
  6222  002874  D005               	goto	u1700
  6223  002876  5001               	movf	___ftpack@arg,w,c
  6224  002878  1002               	iorwf	___ftpack@arg+1,w,c
  6225  00287A  1003               	iorwf	___ftpack@arg+2,w,c
  6226  00287C  A4D8               	btfss	status,2,c
  6227  00287E  D00C               	goto	l542
  6228  002880                     u1700:
  6229  002880  0E00               	movlw	0
  6230  002882  6E01               	movwf	?___ftpack,c
  6231  002884  0E00               	movlw	0
  6232  002886  6E02               	movwf	?___ftpack+1,c
  6233  002888  0E00               	movlw	0
  6234  00288A  6E03               	movwf	?___ftpack+2,c
  6235  00288C  0012               	return	
  6236  00288E  2A04               	incf	___ftpack@exp,f,c
  6237  002890  90D8               	bcf	status,0,c
  6238  002892  3203               	rrcf	___ftpack@arg+2,f,c
  6239  002894  3202               	rrcf	___ftpack@arg+1,f,c
  6240  002896  3201               	rrcf	___ftpack@arg,f,c
  6241  002898                     l542:
  6242  002898  0E00               	movlw	0
  6243  00289A  1401               	andwf	___ftpack@arg,w,c
  6244  00289C  6E06               	movwf	??___ftpack& (0+255),c
  6245  00289E  0E00               	movlw	0
  6246  0028A0  1402               	andwf	___ftpack@arg+1,w,c
  6247  0028A2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6248  0028A4  0EFE               	movlw	254
  6249  0028A6  1403               	andwf	___ftpack@arg+2,w,c
  6250  0028A8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6251  0028AA  5006               	movf	??___ftpack,w,c
  6252  0028AC  1007               	iorwf	??___ftpack+1,w,c
  6253  0028AE  1008               	iorwf	??___ftpack+2,w,c
  6254  0028B0  B4D8               	btfsc	status,2,c
  6255  0028B2  D00C               	goto	l545
  6256  0028B4  D7EC               	goto	l543
  6257  0028B6  2A04               	incf	___ftpack@exp,f,c
  6258  0028B8  0E01               	movlw	1
  6259  0028BA  2601               	addwf	___ftpack@arg,f,c
  6260  0028BC  0E00               	movlw	0
  6261  0028BE  2202               	addwfc	___ftpack@arg+1,f,c
  6262  0028C0  0E00               	movlw	0
  6263  0028C2  2203               	addwfc	___ftpack@arg+2,f,c
  6264  0028C4  90D8               	bcf	status,0,c
  6265  0028C6  3203               	rrcf	___ftpack@arg+2,f,c
  6266  0028C8  3202               	rrcf	___ftpack@arg+1,f,c
  6267  0028CA  3201               	rrcf	___ftpack@arg,f,c
  6268  0028CC                     l545:
  6269  0028CC  0E00               	movlw	0
  6270  0028CE  1401               	andwf	___ftpack@arg,w,c
  6271  0028D0  6E06               	movwf	??___ftpack& (0+255),c
  6272  0028D2  0E00               	movlw	0
  6273  0028D4  1402               	andwf	___ftpack@arg+1,w,c
  6274  0028D6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6275  0028D8  0EFF               	movlw	255
  6276  0028DA  1403               	andwf	___ftpack@arg+2,w,c
  6277  0028DC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6278  0028DE  5006               	movf	??___ftpack,w,c
  6279  0028E0  1007               	iorwf	??___ftpack+1,w,c
  6280  0028E2  1008               	iorwf	??___ftpack+2,w,c
  6281  0028E4  B4D8               	btfsc	status,2,c
  6282  0028E6  D006               	goto	l548
  6283  0028E8  D7E6               	goto	l546
  6284  0028EA  0604               	decf	___ftpack@exp,f,c
  6285  0028EC  90D8               	bcf	status,0,c
  6286  0028EE  3601               	rlcf	___ftpack@arg,f,c
  6287  0028F0  3602               	rlcf	___ftpack@arg+1,f,c
  6288  0028F2  3603               	rlcf	___ftpack@arg+2,f,c
  6289  0028F4                     l548:
  6290  0028F4  BE02               	btfsc	___ftpack@arg+1,7,c
  6291  0028F6  D003               	goto	u1740
  6292  0028F8  0E02               	movlw	2
  6293  0028FA  6004               	cpfslt	___ftpack@exp,c
  6294  0028FC  D7F6               	goto	l549
  6295  0028FE                     u1740:
  6296  0028FE  A004               	btfss	___ftpack@exp,0,c
  6297  002900  9E02               	bcf	___ftpack@arg+1,7,c
  6298  002902  90D8               	bcf	status,0,c
  6299  002904  3204               	rrcf	___ftpack@exp,f,c
  6300  002906  5004               	movf	___ftpack@exp,w,c
  6301  002908  1203               	iorwf	___ftpack@arg+2,f,c
  6302  00290A  5005               	movf	___ftpack@sign,w,c
  6303  00290C  A4D8               	btfss	status,2,c
  6304  00290E  8E03               	bsf	___ftpack@arg+2,7,c
  6305  002910  C001  F001         	movff	___ftpack@arg,?___ftpack
  6306  002914  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6307  002918  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6308  00291C  0012               	return	
  6309  00291E                     __end_of___ftpack:
  6310                           	opt stack 0
  6311                           tblptru	equ	0xFF8
  6312                           tblptrh	equ	0xFF7
  6313                           tblptrl	equ	0xFF6
  6314                           tablat	equ	0xFF5
  6315                           prodh	equ	0xFF4
  6316                           prodl	equ	0xFF3
  6317                           intcon	equ	0xFF2
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function _lcd_puts *****************
  6330 ;; Defined at:
  6331 ;;		line 120 in file "lcd_x8.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  s               2   14[COMRAM] PTR unsigned char 
  6334 ;;		 -> main@Buffer(100), STR_1(12), 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      void 
  6339 ;; Registers used:
  6340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;Total ram usage:        2 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:    5
  6353 ;; This function calls:
  6354 ;;		_lcd_putc
  6355 ;; This function is called by:
  6356 ;;		_main
  6357 ;; This function uses a non-reentrant model
  6358 ;;
  6359                           
  6360                           	psect	text29
  6361  002C48                     __ptext29:
  6362                           	opt stack 0
  6363  002C48                     _lcd_puts:
  6364                           	opt stack 25
  6365                           
  6366                           ;lcd_x8.c: 121: while (*s) {
  6367                           
  6368                           ;incstack = 0
  6369  002C48  D015               	goto	l121
  6370  002C4A                     
  6371                           ;lcd_x8.c: 122: lcd_putc(*s);
  6372  002C4A  C00F  FFF6         	movff	lcd_puts@s,tblptrl
  6373  002C4E  C010  FFF7         	movff	lcd_puts@s+1,tblptrh
  6374  002C52  0E00               	movlw	low (__smallconst shr (0+16))
  6375  002C54  6EF8               	movwf	tblptru,c
  6376  002C56  0E0F               	movlw	(high __ramtop+-1)
  6377  002C58  64F7               	cpfsgt	tblptrh,c
  6378  002C5A  D003               	bra	u2737
  6379  002C5C  0008               	tblrd		*
  6380  002C5E  50F5               	movf	tablat,w,c
  6381  002C60  D005               	bra	u2730
  6382  002C62                     u2737:
  6383  002C62  CFF6 FFD9          	movff	tblptrl,fsr2l
  6384  002C66  CFF7 FFDA          	movff	tblptrh,fsr2h
  6385  002C6A  50DF               	movf	indf2,w,c
  6386  002C6C                     u2730:
  6387  002C6C  EC4F  F016         	call	_lcd_putc
  6388                           
  6389                           ;lcd_x8.c: 123: s++;
  6390  002C70  4A0F               	infsnz	lcd_puts@s,f,c
  6391  002C72  2A10               	incf	lcd_puts@s+1,f,c
  6392  002C74                     l121:
  6393  002C74  C00F  FFF6         	movff	lcd_puts@s,tblptrl
  6394  002C78  C010  FFF7         	movff	lcd_puts@s+1,tblptrh
  6395  002C7C  0E00               	movlw	low (__smallconst shr (0+16))
  6396  002C7E  6EF8               	movwf	tblptru,c
  6397  002C80  0E0F               	movlw	(high __ramtop+-1)
  6398  002C82  64F7               	cpfsgt	tblptrh,c
  6399  002C84  D003               	bra	u2747
  6400  002C86  0008               	tblrd		*
  6401  002C88  50F5               	movf	tablat,w,c
  6402  002C8A  D005               	bra	u2740
  6403  002C8C                     u2747:
  6404  002C8C  CFF6 FFD9          	movff	tblptrl,fsr2l
  6405  002C90  CFF7 FFDA          	movff	tblptrh,fsr2h
  6406  002C94  50DF               	movf	indf2,w,c
  6407  002C96                     u2740:
  6408  002C96  0900               	iorlw	0
  6409  002C98  B4D8               	btfsc	status,2,c
  6410  002C9A  0012               	return	
  6411  002C9C  D7D6               	goto	l122
  6412  002C9E                     __end_of_lcd_puts:
  6413                           	opt stack 0
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           postinc0	equ	0xFEE
  6422                           wreg	equ	0xFE8
  6423                           postdec1	equ	0xFE5
  6424                           fsr1l	equ	0xFE1
  6425                           indf2	equ	0xFDF
  6426                           postinc2	equ	0xFDE
  6427                           postdec2	equ	0xFDD
  6428                           fsr2h	equ	0xFDA
  6429                           fsr2l	equ	0xFD9
  6430                           status	equ	0xFD8
  6431                           
  6432 ;; *************** function _lcd_putc *****************
  6433 ;; Defined at:
  6434 ;;		line 106 in file "lcd_x8.c"
  6435 ;; Parameters:    Size  Location     Type
  6436 ;;  c               1    wreg     unsigned char 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  c               1   13[COMRAM] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  1    wreg      void 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0, cstack
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;Total ram usage:        1 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    4
  6455 ;; This function calls:
  6456 ;;		_delay_ms
  6457 ;;		_lcd_gotoxy
  6458 ;;		_lcd_send_byte
  6459 ;; This function is called by:
  6460 ;;		_main
  6461 ;;		_lcd_puts
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text30
  6466  002C9E                     __ptext30:
  6467                           	opt stack 0
  6468  002C9E                     _lcd_putc:
  6469                           	opt stack 25
  6470                           
  6471                           ;incstack = 0
  6472                           ;lcd_putc@c stored from wreg
  6473  002C9E  6E0E               	movwf	lcd_putc@c,c
  6474                           
  6475                           ;lcd_x8.c: 107: switch (c) {
  6476  002CA0  D01E               	goto	l112
  6477  002CA2  0E01               	movlw	1
  6478  002CA4  6E09               	movwf	lcd_send_byte@n,c
  6479  002CA6  0E00               	movlw	0
  6480  002CA8  EC7A  F016         	call	_lcd_send_byte
  6481                           
  6482                           ;lcd_x8.c: 109: delay_ms(2);
  6483  002CAC  0E00               	movlw	0
  6484  002CAE  6E02               	movwf	delay_ms@n+1,c
  6485  002CB0  0E02               	movlw	2
  6486  002CB2  6E01               	movwf	delay_ms@n,c
  6487  002CB4  EC9E  F017         	call	_delay_ms	;wreg free
  6488                           
  6489                           ;lcd_x8.c: 110: break;
  6490  002CB8  0012               	return	
  6491  002CBA  0E02               	movlw	2
  6492  002CBC  6E0B               	movwf	lcd_gotoxy@y,c
  6493  002CBE  0E01               	movlw	1
  6494  002CC0  EC9E  F016         	call	_lcd_gotoxy
  6495                           
  6496                           ;lcd_x8.c: 112: break;
  6497  002CC4  0012               	return	
  6498  002CC6  0E10               	movlw	16
  6499  002CC8  6E09               	movwf	lcd_send_byte@n,c
  6500  002CCA  0E00               	movlw	0
  6501  002CCC  EC7A  F016         	call	_lcd_send_byte
  6502                           
  6503                           ;lcd_x8.c: 114: break;
  6504  002CD0  0012               	return	
  6505  002CD2  C00E  F009         	movff	lcd_putc@c,lcd_send_byte@n
  6506  002CD6  0E01               	movlw	1
  6507  002CD8  EC7A  F016         	call	_lcd_send_byte
  6508                           
  6509                           ;lcd_x8.c: 117: }
  6510                           
  6511                           ;lcd_x8.c: 116: break;
  6512  002CDC  0012               	return	
  6513  002CDE                     l112:
  6514  002CDE  500E               	movf	lcd_putc@c,w,c
  6515                           
  6516                           ; Switch size 1, requested type "space"
  6517                           ; Number of cases is 3, Range of values is 8 to 12
  6518                           ; switch strategies available:
  6519                           ; Name         Instructions Cycles
  6520                           ; simple_byte           10     6 (average)
  6521                           ;	Chosen strategy is simple_byte
  6522  002CE0  0A08               	xorlw	8	; case 8
  6523  002CE2  B4D8               	btfsc	status,2,c
  6524  002CE4  D7F0               	goto	l116
  6525  002CE6  0A02               	xorlw	2	; case 10
  6526  002CE8  B4D8               	btfsc	status,2,c
  6527  002CEA  D7E7               	goto	l115
  6528  002CEC  0A06               	xorlw	6	; case 12
  6529  002CEE  B4D8               	btfsc	status,2,c
  6530  002CF0  D7D8               	goto	l113
  6531  002CF2  D7EF               	goto	l117
  6532  002CF4                     __end_of_lcd_putc:
  6533                           	opt stack 0
  6534                           tblptru	equ	0xFF8
  6535                           tblptrh	equ	0xFF7
  6536                           tblptrl	equ	0xFF6
  6537                           tablat	equ	0xFF5
  6538                           prodh	equ	0xFF4
  6539                           prodl	equ	0xFF3
  6540                           intcon	equ	0xFF2
  6541                           postinc0	equ	0xFEE
  6542                           wreg	equ	0xFE8
  6543                           postdec1	equ	0xFE5
  6544                           fsr1l	equ	0xFE1
  6545                           indf2	equ	0xFDF
  6546                           postinc2	equ	0xFDE
  6547                           postdec2	equ	0xFDD
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function _lcd_gotoxy *****************
  6553 ;; Defined at:
  6554 ;;		line 89 in file "lcd_x8.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;  x               1    wreg     unsigned char 
  6557 ;;  y               1   10[COMRAM] unsigned char 
  6558 ;; Auto vars:     Size  Location     Type
  6559 ;;  x               1   11[COMRAM] unsigned char 
  6560 ;;  address         1   12[COMRAM] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;                  1    wreg      void 
  6563 ;; Registers used:
  6564 ;;		wreg, status,2, status,0, cstack
  6565 ;; Tracked objects:
  6566 ;;		On entry : 0/0
  6567 ;;		On exit  : 0/0
  6568 ;;		Unchanged: 0/0
  6569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6570 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;Total ram usage:        3 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    3
  6577 ;; This function calls:
  6578 ;;		_lcd_send_byte
  6579 ;; This function is called by:
  6580 ;;		_main
  6581 ;;		_lcd_putc
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text31
  6586  002D3C                     __ptext31:
  6587                           	opt stack 0
  6588  002D3C                     _lcd_gotoxy:
  6589                           	opt stack 25
  6590                           
  6591                           ;incstack = 0
  6592                           ;lcd_gotoxy@x stored from wreg
  6593  002D3C  6E0C               	movwf	lcd_gotoxy@x,c
  6594                           
  6595                           ;lcd_x8.c: 90: unsigned char address;
  6596                           ;lcd_x8.c: 92: switch (y) {
  6597  002D3E  D009               	goto	l103
  6598  002D40  0E80               	movlw	128
  6599  002D42  D005               	goto	L5
  6600  002D44  0EC0               	movlw	192
  6601  002D46  D003               	goto	L5
  6602  002D48  0E90               	movlw	144
  6603  002D4A  D001               	goto	L5
  6604  002D4C  0ED0               	movlw	208
  6605  002D4E                     L5:
  6606  002D4E  6E0D               	movwf	lcd_gotoxy@address,c
  6607                           
  6608                           ;lcd_x8.c: 101: }
  6609                           
  6610                           ;lcd_x8.c: 100: break;
  6611  002D50  D00D               	goto	l105
  6612  002D52                     l103:
  6613  002D52  500B               	movf	lcd_gotoxy@y,w,c
  6614                           
  6615                           ; Switch size 1, requested type "space"
  6616                           ; Number of cases is 4, Range of values is 1 to 4
  6617                           ; switch strategies available:
  6618                           ; Name         Instructions Cycles
  6619                           ; simple_byte           13     7 (average)
  6620                           ;	Chosen strategy is simple_byte
  6621  002D54  0A01               	xorlw	1	; case 1
  6622  002D56  B4D8               	btfsc	status,2,c
  6623  002D58  D7F3               	goto	l104
  6624  002D5A  0A03               	xorlw	3	; case 2
  6625  002D5C  B4D8               	btfsc	status,2,c
  6626  002D5E  D7F2               	goto	l106
  6627  002D60  0A01               	xorlw	1	; case 3
  6628  002D62  B4D8               	btfsc	status,2,c
  6629  002D64  D7F1               	goto	l107
  6630  002D66  0A07               	xorlw	7	; case 4
  6631  002D68  B4D8               	btfsc	status,2,c
  6632  002D6A  D7F0               	goto	l108
  6633  002D6C                     l105:
  6634                           
  6635                           ;lcd_x8.c: 102: address += x - 1;
  6636  002D6C  040C               	decf	lcd_gotoxy@x,w,c
  6637  002D6E  260D               	addwf	lcd_gotoxy@address,f,c
  6638                           
  6639                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  6640  002D70  500D               	movf	lcd_gotoxy@address,w,c
  6641  002D72  0980               	iorlw	128
  6642  002D74  6E09               	movwf	lcd_send_byte@n,c
  6643  002D76  0E00               	movlw	0
  6644  002D78  EC7A  F016         	call	_lcd_send_byte
  6645  002D7C  0012               	return		;funcret
  6646  002D7E                     __end_of_lcd_gotoxy:
  6647                           	opt stack 0
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           intcon	equ	0xFF2
  6655                           postinc0	equ	0xFEE
  6656                           wreg	equ	0xFE8
  6657                           postdec1	equ	0xFE5
  6658                           fsr1l	equ	0xFE1
  6659                           indf2	equ	0xFDF
  6660                           postinc2	equ	0xFDE
  6661                           postdec2	equ	0xFDD
  6662                           fsr2h	equ	0xFDA
  6663                           fsr2l	equ	0xFD9
  6664                           status	equ	0xFD8
  6665                           
  6666 ;; *************** function _lcd_init *****************
  6667 ;; Defined at:
  6668 ;;		line 56 in file "lcd_x8.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;		None
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  i               1   10[COMRAM] unsigned char 
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;Total ram usage:        1 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    3
  6689 ;; This function calls:
  6690 ;;		_delay_ms
  6691 ;;		_lcd_send_byte
  6692 ;;		_lcd_send_nibble
  6693 ;; This function is called by:
  6694 ;;		_main
  6695 ;; This function uses a non-reentrant model
  6696 ;;
  6697                           
  6698                           	psect	text32
  6699  002B8A                     __ptext32:
  6700                           	opt stack 0
  6701  002B8A                     _lcd_init:
  6702                           	opt stack 27
  6703                           
  6704                           ;lcd_x8.c: 58: unsigned char i;
  6705                           ;lcd_x8.c: 61: lcd.rs = 0;;
  6706                           
  6707                           ;incstack = 0
  6708  002B8A  9283               	bcf	3971,1,c
  6709                           
  6710                           ;lcd_x8.c: 63: lcd.enable = 0;;
  6711  002B8C  9683               	bcf	3971,3,c
  6712                           
  6713                           ;lcd_x8.c: 65: delay_ms(25);
  6714  002B8E  0E00               	movlw	0
  6715  002B90  6E02               	movwf	delay_ms@n+1,c
  6716  002B92  0E19               	movlw	25
  6717  002B94  6E01               	movwf	delay_ms@n,c
  6718  002B96  EC9E  F017         	call	_delay_ms	;wreg free
  6719                           
  6720                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  6721  002B9A  0E01               	movlw	1
  6722  002B9C  6E0B               	movwf	lcd_init@i,c
  6723  002B9E                     l2857:
  6724  002B9E  0E03               	movlw	3
  6725  002BA0  640B               	cpfsgt	lcd_init@i,c
  6726  002BA2  D001               	goto	l96
  6727  002BA4  D00B               	goto	u2700
  6728  002BA6                     l96:
  6729                           
  6730                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  6731  002BA6  0E03               	movlw	3
  6732  002BA8  ECD5  F017         	call	_lcd_send_nibble
  6733                           
  6734                           ;lcd_x8.c: 69: delay_ms(6);
  6735  002BAC  0E00               	movlw	0
  6736  002BAE  6E02               	movwf	delay_ms@n+1,c
  6737  002BB0  0E06               	movlw	6
  6738  002BB2  6E01               	movwf	delay_ms@n,c
  6739  002BB4  EC9E  F017         	call	_delay_ms	;wreg free
  6740  002BB8  2A0B               	incf	lcd_init@i,f,c
  6741  002BBA  D7F1               	goto	l2857
  6742  002BBC                     u2700:
  6743                           
  6744                           ;lcd_x8.c: 70: }
  6745                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  6746  002BBC  0E02               	movlw	2
  6747  002BBE  ECD5  F017         	call	_lcd_send_nibble
  6748                           
  6749                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  6750  002BC2  0E00               	movlw	0
  6751  002BC4  6E0B               	movwf	lcd_init@i,c
  6752  002BC6                     l2871:
  6753  002BC6  0E03               	movlw	3
  6754  002BC8  640B               	cpfsgt	lcd_init@i,c
  6755  002BCA  D001               	goto	l98
  6756  002BCC  0012               	return	
  6757  002BCE                     l98:
  6758                           
  6759                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  6760  002BCE  500B               	movf	lcd_init@i,w,c
  6761  002BD0  0D01               	mullw	1
  6762  002BD2  0E66               	movlw	low _LCD_INIT_STRING
  6763  002BD4  24F3               	addwf	prodl,w,c
  6764  002BD6  6ED9               	movwf	fsr2l,c
  6765  002BD8  0E00               	movlw	high _LCD_INIT_STRING
  6766  002BDA  20F4               	addwfc	prodh,w,c
  6767  002BDC  6EDA               	movwf	fsr2h,c
  6768  002BDE  50DF               	movf	indf2,w,c
  6769  002BE0  6E09               	movwf	lcd_send_byte@n,c
  6770  002BE2  0E00               	movlw	0
  6771  002BE4  EC7A  F016         	call	_lcd_send_byte
  6772  002BE8  2A0B               	incf	lcd_init@i,f,c
  6773  002BEA  D7ED               	goto	l2871
  6774  002BEC                     __end_of_lcd_init:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           postinc0	equ	0xFEE
  6784                           wreg	equ	0xFE8
  6785                           postdec1	equ	0xFE5
  6786                           fsr1l	equ	0xFE1
  6787                           indf2	equ	0xFDF
  6788                           postinc2	equ	0xFDE
  6789                           postdec2	equ	0xFDD
  6790                           fsr2h	equ	0xFDA
  6791                           fsr2l	equ	0xFD9
  6792                           status	equ	0xFD8
  6793                           
  6794 ;; *************** function _lcd_send_byte *****************
  6795 ;; Defined at:
  6796 ;;		line 39 in file "lcd_x8.c"
  6797 ;; Parameters:    Size  Location     Type
  6798 ;;  cm_data         1    wreg     unsigned char 
  6799 ;;  n               1    8[COMRAM] unsigned char 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  cm_data         1    9[COMRAM] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;                  1    wreg      void 
  6804 ;; Registers used:
  6805 ;;		wreg, status,2, status,0, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6811 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6814 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;Total ram usage:        2 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:    2
  6818 ;; This function calls:
  6819 ;;		_delay_cycles
  6820 ;;		_delay_ms
  6821 ;;		_lcd_send_nibble
  6822 ;; This function is called by:
  6823 ;;		_lcd_init
  6824 ;;		_lcd_gotoxy
  6825 ;;		_lcd_putc
  6826 ;;		_Lcd_Shift_Right
  6827 ;;		_Lcd_Shift_Left
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text33
  6832  002CF4                     __ptext33:
  6833                           	opt stack 0
  6834  002CF4                     _lcd_send_byte:
  6835                           	opt stack 26
  6836                           
  6837                           ;incstack = 0
  6838                           ;lcd_send_byte@cm_data stored from wreg
  6839  002CF4  6E0A               	movwf	lcd_send_byte@cm_data,c
  6840                           
  6841                           ;lcd_x8.c: 43: lcd.rs = cm_data;;
  6842  002CF6  B00A               	btfsc	lcd_send_byte@cm_data,0,c
  6843  002CF8  D002               	bra	u1675
  6844  002CFA  9283               	bcf	3971,1,c
  6845  002CFC  D001               	bra	u1676
  6846  002CFE                     u1675:
  6847  002CFE  8283               	bsf	3971,1,c
  6848  002D00                     u1676:
  6849                           
  6850                           ;lcd_x8.c: 44: delay_cycles(1);
  6851  002D00  0E01               	movlw	1
  6852  002D02  EC35  F017         	call	_delay_cycles
  6853                           
  6854                           ;lcd_x8.c: 46: delay_cycles(1);
  6855  002D06  0E01               	movlw	1
  6856  002D08  EC35  F017         	call	_delay_cycles
  6857                           
  6858                           ;lcd_x8.c: 47: lcd.enable = 0;;
  6859  002D0C  9683               	bcf	3971,3,c
  6860                           
  6861                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  6862  002D0E  3809               	swapf	lcd_send_byte@n,w,c
  6863  002D10  0B0F               	andlw	15
  6864  002D12  ECD5  F017         	call	_lcd_send_nibble
  6865                           
  6866                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  6867  002D16  5009               	movf	lcd_send_byte@n,w,c
  6868  002D18  0B0F               	andlw	15
  6869  002D1A  ECD5  F017         	call	_lcd_send_nibble
  6870                           
  6871                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  6872  002D1E  500A               	movf	lcd_send_byte@cm_data,w,c
  6873  002D20  B4D8               	btfsc	status,2,c
  6874  002D22  D005               	goto	l91
  6875  002D24  0E32               	movlw	50
  6876  002D26                     u3297:
  6877  002D26  0004               	clrwdt	
  6878  002D28  2EE8               	decfsz	wreg,f,c
  6879  002D2A  D7FD               	bra	u3297
  6880  002D2C  0012               	return	
  6881  002D2E                     l91:
  6882                           
  6883                           ;lcd_x8.c: 51: else
  6884                           ;lcd_x8.c: 52: delay_ms(2);
  6885  002D2E  0E00               	movlw	0
  6886  002D30  6E02               	movwf	delay_ms@n+1,c
  6887  002D32  0E02               	movlw	2
  6888  002D34  6E01               	movwf	delay_ms@n,c
  6889  002D36  EC9E  F017         	call	_delay_ms	;wreg free
  6890  002D3A  0012               	return	
  6891  002D3C                     __end_of_lcd_send_byte:
  6892                           	opt stack 0
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           intcon	equ	0xFF2
  6900                           postinc0	equ	0xFEE
  6901                           wreg	equ	0xFE8
  6902                           postdec1	equ	0xFE5
  6903                           fsr1l	equ	0xFE1
  6904                           indf2	equ	0xFDF
  6905                           postinc2	equ	0xFDE
  6906                           postdec2	equ	0xFDD
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function _lcd_send_nibble *****************
  6912 ;; Defined at:
  6913 ;;		line 29 in file "lcd_x8.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  n               1    wreg     unsigned char 
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;  n               1    7[COMRAM] unsigned char 
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;Total ram usage:        2 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    1
  6934 ;; This function calls:
  6935 ;;		_delay_cycles
  6936 ;; This function is called by:
  6937 ;;		_lcd_send_byte
  6938 ;;		_lcd_init
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text34
  6943  002FAA                     __ptext34:
  6944                           	opt stack 0
  6945  002FAA                     _lcd_send_nibble:
  6946                           	opt stack 26
  6947                           
  6948                           ;incstack = 0
  6949                           ;lcd_send_nibble@n stored from wreg
  6950  002FAA  6E08               	movwf	lcd_send_nibble@n,c
  6951                           
  6952                           ;lcd_x8.c: 31: lcd.data = n;
  6953  002FAC  C008  F007         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  6954  002FB0  3A07               	swapf	??_lcd_send_nibble,f,c
  6955  002FB2  5083               	movf	3971,w,c
  6956  002FB4  1807               	xorwf	??_lcd_send_nibble,w,c
  6957  002FB6  0B0F               	andlw	-241
  6958  002FB8  1807               	xorwf	??_lcd_send_nibble,w,c
  6959  002FBA  6E83               	movwf	3971,c
  6960                           
  6961                           ;lcd_x8.c: 33: delay_cycles(1);
  6962  002FBC  0E01               	movlw	1
  6963  002FBE  EC35  F017         	call	_delay_cycles
  6964                           
  6965                           ;lcd_x8.c: 34: lcd.enable = 1;;
  6966  002FC2  8683               	bsf	3971,3,c
  6967                           
  6968                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  6969  002FC4  0004               	clrwdt	
  6970  002FC6  F000               	nop		;2 cycle nop
  6971                           
  6972                           ;lcd_x8.c: 36: lcd.enable = 0;;
  6973  002FC8  9683               	bcf	3971,3,c
  6974  002FCA  0012               	return		;funcret
  6975  002FCC                     __end_of_lcd_send_nibble:
  6976                           	opt stack 0
  6977                           tblptru	equ	0xFF8
  6978                           tblptrh	equ	0xFF7
  6979                           tblptrl	equ	0xFF6
  6980                           tablat	equ	0xFF5
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           postinc0	equ	0xFEE
  6985                           wreg	equ	0xFE8
  6986                           postdec1	equ	0xFE5
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           
  6995 ;; *************** function _delay_cycles *****************
  6996 ;; Defined at:
  6997 ;;		line 20 in file "lcd_x8.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;  n               1    wreg     unsigned char 
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;  n               1    3[COMRAM] unsigned char 
  7002 ;;  x               2    4[COMRAM] int 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2, status,0
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;Total ram usage:        6 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; This function calls:
  7019 ;;		Nothing
  7020 ;; This function is called by:
  7021 ;;		_lcd_send_nibble
  7022 ;;		_lcd_send_byte
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text35
  7027  002E6A                     __ptext35:
  7028                           	opt stack 0
  7029  002E6A                     _delay_cycles:
  7030                           	opt stack 26
  7031                           
  7032                           ;incstack = 0
  7033                           ;delay_cycles@n stored from wreg
  7034  002E6A  6E04               	movwf	delay_cycles@n,c
  7035                           
  7036                           ;lcd_x8.c: 21: int x;
  7037                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  7038  002E6C  0E00               	movlw	0
  7039  002E6E  6E06               	movwf	delay_cycles@x+1,c
  7040  002E70  0E00               	movlw	0
  7041  002E72  6E05               	movwf	delay_cycles@x,c
  7042  002E74  D003               	goto	l82
  7043  002E76                     l83:
  7044  002E76  0004               	clrwdt		;# 
  7045  002E78  4A05               	infsnz	delay_cycles@x,f,c
  7046  002E7A  2A06               	incf	delay_cycles@x+1,f,c
  7047  002E7C                     l82:
  7048  002E7C  5004               	movf	delay_cycles@n,w,c
  7049  002E7E  6E01               	movwf	??_delay_cycles& (0+255),c
  7050  002E80  6A02               	clrf	(??_delay_cycles+1)& (0+255),c
  7051  002E82  5005               	movf	delay_cycles@x,w,c
  7052  002E84  5C01               	subwf	??_delay_cycles,w,c
  7053  002E86  5002               	movf	??_delay_cycles+1,w,c
  7054  002E88  0A80               	xorlw	128
  7055  002E8A  6E03               	movwf	(??_delay_cycles+2)& (0+255),c
  7056  002E8C  5006               	movf	delay_cycles@x+1,w,c
  7057  002E8E  0A80               	xorlw	128
  7058  002E90  5803               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  7059  002E92  A0D8               	btfss	status,0,c
  7060  002E94  0012               	return	
  7061  002E96  D7EF               	goto	l83
  7062  002E98                     __end_of_delay_cycles:
  7063                           	opt stack 0
  7064                           tblptru	equ	0xFF8
  7065                           tblptrh	equ	0xFF7
  7066                           tblptrl	equ	0xFF6
  7067                           tablat	equ	0xFF5
  7068                           prodh	equ	0xFF4
  7069                           prodl	equ	0xFF3
  7070                           intcon	equ	0xFF2
  7071                           postinc0	equ	0xFEE
  7072                           wreg	equ	0xFE8
  7073                           postdec1	equ	0xFE5
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           fsr2h	equ	0xFDA
  7079                           fsr2l	equ	0xFD9
  7080                           status	equ	0xFD8
  7081                           
  7082 ;; *************** function _delay_ms *****************
  7083 ;; Defined at:
  7084 ;;		line 67 in file "basic.c"
  7085 ;; Parameters:    Size  Location     Type
  7086 ;;  n               2    0[COMRAM] unsigned int 
  7087 ;; Auto vars:     Size  Location     Type
  7088 ;;  i               2    2[COMRAM] int 
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, status,2, status,0
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7098 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;Total ram usage:        4 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_main
  7108 ;;		_lcd_send_byte
  7109 ;;		_lcd_init
  7110 ;;		_lcd_putc
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text36
  7115  002F3C                     __ptext36:
  7116                           	opt stack 0
  7117  002F3C                     _delay_ms:
  7118                           	opt stack 27
  7119                           
  7120                           ;basic.c: 69: int i;
  7121                           ;basic.c: 70: for (i=0; i < n; i++){
  7122                           
  7123                           ;incstack = 0
  7124  002F3C  0E00               	movlw	0
  7125  002F3E  6E04               	movwf	delay_ms@i+1,c
  7126  002F40  0E00               	movlw	0
  7127  002F42  6E03               	movwf	delay_ms@i,c
  7128  002F44  D007               	goto	l55
  7129  002F46                     
  7130                           ;basic.c: 71: _delaywdt((unsigned long)((1)*(4000000UL/4000.0))) ;
  7131  002F46  0EC8               	movlw	200
  7132  002F48                     u3307:
  7133  002F48  0004               	clrwdt	
  7134  002F4A  0004               	clrwdt	
  7135  002F4C  2EE8               	decfsz	wreg,f,c
  7136  002F4E  D7FC               	bra	u3307
  7137  002F50  4A03               	infsnz	delay_ms@i,f,c
  7138  002F52  2A04               	incf	delay_ms@i+1,f,c
  7139  002F54                     l55:
  7140  002F54  5001               	movf	delay_ms@n,w,c
  7141  002F56  5C03               	subwf	delay_ms@i,w,c
  7142  002F58  5002               	movf	delay_ms@n+1,w,c
  7143  002F5A  5804               	subwfb	delay_ms@i+1,w,c
  7144  002F5C  B0D8               	btfsc	status,0,c
  7145  002F5E  0012               	return	
  7146  002F60  D7F2               	goto	l56
  7147  002F62                     __end_of_delay_ms:
  7148                           	opt stack 0
  7149                           tblptru	equ	0xFF8
  7150                           tblptrh	equ	0xFF7
  7151                           tblptrl	equ	0xFF6
  7152                           tablat	equ	0xFF5
  7153                           prodh	equ	0xFF4
  7154                           prodl	equ	0xFF3
  7155                           intcon	equ	0xFF2
  7156                           postinc0	equ	0xFEE
  7157                           wreg	equ	0xFE8
  7158                           postdec1	equ	0xFE5
  7159                           fsr1l	equ	0xFE1
  7160                           indf2	equ	0xFDF
  7161                           postinc2	equ	0xFDE
  7162                           postdec2	equ	0xFDD
  7163                           fsr2h	equ	0xFDA
  7164                           fsr2l	equ	0xFD9
  7165                           status	equ	0xFD8
  7166                           
  7167 ;; *************** function _is_byte_available *****************
  7168 ;; Defined at:
  7169 ;;		line 22 in file "my_ser.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;		None
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;		None
  7174 ;; Return value:  Size  Location     Type
  7175 ;;                  1    wreg      unsigned char 
  7176 ;; Registers used:
  7177 ;;		wreg
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;Total ram usage:        0 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_main
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           	psect	text37
  7197  002FEA                     __ptext37:
  7198                           	opt stack 0
  7199  002FEA                     _is_byte_available:
  7200                           	opt stack 30
  7201                           
  7202                           ;my_ser.c: 24: if (RCSTAbits.FERR || RCSTAbits.OERR) {
  7203                           
  7204                           ;incstack = 0
  7205  002FEA  B4AB               	btfsc	4011,2,c	;volatile
  7206  002FEC  D002               	goto	u3250
  7207  002FEE  A2AB               	btfss	4011,1,c	;volatile
  7208  002FF0  D002               	goto	l180
  7209  002FF2                     u3250:
  7210                           
  7211                           ;my_ser.c: 25: RCSTAbits.CREN = 0;
  7212  002FF2  98AB               	bcf	4011,4,c	;volatile
  7213                           
  7214                           ;my_ser.c: 26: RCSTAbits.CREN = 1;
  7215  002FF4  88AB               	bsf	4011,4,c	;volatile
  7216  002FF6                     l180:
  7217                           
  7218                           ;my_ser.c: 27: }
  7219                           ;my_ser.c: 28: if (PIR1bits.RCIF) return 1;
  7220  002FF6  AA9E               	btfss	3998,5,c	;volatile
  7221  002FF8  D002               	goto	l183
  7222  002FFA  0E01               	movlw	1
  7223  002FFC  0012               	return	
  7224  002FFE                     l183:
  7225                           
  7226                           ;my_ser.c: 29: else return 0;
  7227  002FFE  0E00               	movlw	0
  7228  003000  0012               	return	
  7229  003002                     __end_of_is_byte_available:
  7230                           	opt stack 0
  7231                           tblptru	equ	0xFF8
  7232                           tblptrh	equ	0xFF7
  7233                           tblptrl	equ	0xFF6
  7234                           tablat	equ	0xFF5
  7235                           prodh	equ	0xFF4
  7236                           prodl	equ	0xFF3
  7237                           intcon	equ	0xFF2
  7238                           postinc0	equ	0xFEE
  7239                           wreg	equ	0xFE8
  7240                           postdec1	equ	0xFE5
  7241                           fsr1l	equ	0xFE1
  7242                           indf2	equ	0xFDF
  7243                           postinc2	equ	0xFDE
  7244                           postdec2	equ	0xFDD
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           
  7249 ;; *************** function _init_adc_no_lib *****************
  7250 ;; Defined at:
  7251 ;;		line 3 in file "my_adc.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;		None
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;		None
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      void 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;Total ram usage:        0 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; This function calls:
  7272 ;;		Nothing
  7273 ;; This function is called by:
  7274 ;;		_main
  7275 ;; This function uses a non-reentrant model
  7276 ;;
  7277                           
  7278                           	psect	text38
  7279  003012                     __ptext38:
  7280                           	opt stack 0
  7281  003012                     _init_adc_no_lib:
  7282                           	opt stack 30
  7283                           
  7284                           ;my_adc.c: 6: ADCON0 = 0;
  7285                           
  7286                           ;incstack = 0
  7287  003012  0E00               	movlw	0
  7288  003014  6EC2               	movwf	4034,c	;volatile
  7289                           
  7290                           ;my_adc.c: 7: ADCON0bits.ADON = 1;
  7291  003016  80C2               	bsf	4034,0,c	;volatile
  7292                           
  7293                           ;my_adc.c: 10: ADCON2 = 0b10001001;
  7294  003018  0E89               	movlw	137
  7295  00301A  6EC0               	movwf	4032,c	;volatile
  7296  00301C  0012               	return		;funcret
  7297  00301E                     __end_of_init_adc_no_lib:
  7298                           	opt stack 0
  7299                           tblptru	equ	0xFF8
  7300                           tblptrh	equ	0xFF7
  7301                           tblptrl	equ	0xFF6
  7302                           tablat	equ	0xFF5
  7303                           prodh	equ	0xFF4
  7304                           prodl	equ	0xFF3
  7305                           intcon	equ	0xFF2
  7306                           postinc0	equ	0xFEE
  7307                           wreg	equ	0xFE8
  7308                           postdec1	equ	0xFE5
  7309                           fsr1l	equ	0xFE1
  7310                           indf2	equ	0xFDF
  7311                           postinc2	equ	0xFDE
  7312                           postdec2	equ	0xFDD
  7313                           fsr2h	equ	0xFDA
  7314                           fsr2l	equ	0xFD9
  7315                           status	equ	0xFD8
  7316                           
  7317 ;; *************** function _initPorts *****************
  7318 ;; Defined at:
  7319 ;;		line 74 in file "basic.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;		None
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;		None
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;Total ram usage:        0 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; This function calls:
  7340 ;;		Nothing
  7341 ;; This function is called by:
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text39
  7347  002EEC                     __ptext39:
  7348                           	opt stack 0
  7349  002EEC                     _initPorts:
  7350                           	opt stack 30
  7351                           
  7352                           ;basic.c: 76: ADCON1 = 0x0C;
  7353                           
  7354                           ;incstack = 0
  7355  002EEC  0E0C               	movlw	12
  7356  002EEE  6EC1               	movwf	4033,c	;volatile
  7357                           
  7358                           ;basic.c: 77: LATA = LATB = LATC = LATD = LATE =0;
  7359  002EF0  0E00               	movlw	0
  7360  002EF2  6E8D               	movwf	3981,c	;volatile
  7361  002EF4  CF8D FF8C          	movff	3981,3980	;volatile
  7362  002EF8  CF8C FF8B          	movff	3980,3979	;volatile
  7363  002EFC  CF8B FF8A          	movff	3979,3978	;volatile
  7364  002F00  CF8A FF89          	movff	3978,3977	;volatile
  7365                           
  7366                           ;basic.c: 78: TRISA = 0xFF;
  7367  002F04  6892               	setf	3986,c	;volatile
  7368                           
  7369                           ;basic.c: 79: TRISB = 0xFF;
  7370  002F06  6893               	setf	3987,c	;volatile
  7371                           
  7372                           ;basic.c: 80: TRISD = TRISE =0;
  7373  002F08  0E00               	movlw	0
  7374  002F0A  6E96               	movwf	3990,c	;volatile
  7375  002F0C  CF96 FF95          	movff	3990,3989	;volatile
  7376                           
  7377                           ;basic.c: 81: TRISC = 0x80;
  7378  002F10  0E80               	movlw	128
  7379  002F12  6E94               	movwf	3988,c	;volatile
  7380  002F14  0012               	return		;funcret
  7381  002F16                     __end_of_initPorts:
  7382                           	opt stack 0
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodh	equ	0xFF4
  7388                           prodl	equ	0xFF3
  7389                           intcon	equ	0xFF2
  7390                           postinc0	equ	0xFEE
  7391                           wreg	equ	0xFE8
  7392                           postdec1	equ	0xFE5
  7393                           fsr1l	equ	0xFE1
  7394                           indf2	equ	0xFDF
  7395                           postinc2	equ	0xFDE
  7396                           postdec2	equ	0xFDD
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           tblptru	equ	0xFF8
  7401                           tblptrh	equ	0xFF7
  7402                           tblptrl	equ	0xFF6
  7403                           tablat	equ	0xFF5
  7404                           prodh	equ	0xFF4
  7405                           prodl	equ	0xFF3
  7406                           intcon	equ	0xFF2
  7407                           postinc0	equ	0xFEE
  7408                           wreg	equ	0xFE8
  7409                           postdec1	equ	0xFE5
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418                           	psect	rparam
  7419  0000                     tblptru	equ	0xFF8
  7420                           tblptrh	equ	0xFF7
  7421                           tblptrl	equ	0xFF6
  7422                           tablat	equ	0xFF5
  7423                           prodh	equ	0xFF4
  7424                           prodl	equ	0xFF3
  7425                           intcon	equ	0xFF2
  7426                           postinc0	equ	0xFEE
  7427                           wreg	equ	0xFE8
  7428                           postdec1	equ	0xFE5
  7429                           fsr1l	equ	0xFE1
  7430                           indf2	equ	0xFDF
  7431                           postinc2	equ	0xFDE
  7432                           postdec2	equ	0xFDD
  7433                           fsr2h	equ	0xFDA
  7434                           fsr2l	equ	0xFD9
  7435                           status	equ	0xFD8


Data Sizes:
    Strings     31
    Constant    118
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    101     105
    BANK0           128    109     109
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 100
		 -> main@Buffer(BANK0[100]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 100
		 -> main@Buffer(BANK0[100]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[8]), STR_3(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 100
		 -> main@Buffer(BANK0[100]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 12
		 -> STR_2(CODE[12]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 100
		 -> main@Buffer(BANK0[100]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___ftdiv
    ___wmul->___awdiv
    ___ftdiv->___ftmul
    ___awtoft->___wmul
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               109   109      0   80403
                                              0 BANK0    109   109      0
                            ___ftdiv
                            ___ftmul
                           _delay_ms
                          _initPorts
                    _init_adc_no_lib
                  _is_byte_available
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                   _read_adc_voltage
                   _read_byte_no_lib
                 _send_string_no_lib
                        _setupSerial
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   51439
                                             63 COMRAM    38    31      7
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   12363
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   12165
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5237
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     143
                                              1 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    12     9      3    9518
                                             50 COMRAM    12     9      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3199
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3367
                                             35 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2748
                                             20 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3362
                                             14 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    3165
                                             13 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1535
                                             10 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1768
                                             10 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1160
                                              8 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                              6 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     426
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _delay_ms
   _initPorts
   _init_adc_no_lib
   _is_byte_available
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_voltage
     ___awtoft
       ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     _read_adc_raw_no_lib
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _setupSerial
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _strlen (ARG)
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     6D      6D       5       85.2%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     65      69       1       82.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D6      34        0.0%
DATA                 0      0      D6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jun 29 19:09:07 2024

           ?_read_adc_voltage 0033            ??_read_adc_voltage 0036                            l55 2F54  
                          l56 2F46                            l82 2E7C                            l66 2164  
                          l83 2E76                            l91 2D2E                            l96 2BA6  
                          l98 2BCE                ?_lcd_send_byte 0009                  ___awdiv@sign 000C  
         ___wmul@multiplicand 0011                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$XT 000000                  ___ftadd@exp1 0039                  ___ftadd@exp2 0038  
                 __CFG_LVP$ON 000000                  ___ftadd@sign 0037                   __CFG_WDT$ON 000000  
                         l103 2D52                           l104 2D40                           l112 2CDE  
                         l105 2D6C                           l113 2CA2                           l121 2C74  
                         l106 2D44                           l122 2C4A                           l107 2D48  
                         l115 2CBA                           l108 2D4C                           l116 2CC6  
                         l117 2CD2                           l301 1860                           l222 1F20  
                         l230 1C3A                           l302 1868                           l303 188C  
                         l152 280C                           l232 1CEA                           l304 1894  
                         l153 2862                           l225 1B0E                           l241 11B2  
                         l226 1A3A                           l250 11E4                           l242 119C  
                         l147 2E0E                           l219 1E54                           l243 1166  
                         l180 2FF6                           l500 2B1A                           l308 18DE  
                         l252 17C8                           l260 138E                           l236 10A4  
                         l229 1AEA                           l261 144A                           l253 11F8  
                         l237 10BC                           l510 23C8                           l270 14AE  
                         l254 1238                           l246 11C2                           l183 2FFE  
                         l191 3008                           l239 10E8                           l192 3006  
                         l600 20B6                           l512 23E6                           l280 1606  
                         l264 13F6                           l256 12C8                           l601 20E6  
                         l513 2428                           l281 1574                           l257 132C  
                         l249 11BE                           l506 2E46                           l610 276E  
                         l522 24BA                           l514 2458                           l290 16C0  
                         l274 151A                           l523 24AE                           l283 1626  
                         l259 1350                           l700 2A60                           l516 2496  
                         l620 236E                           l292 17BE                           l284 1610  
                         l276 1546                           l197 2ED8                           l701 2A54  
                         l517 2486                           l621 235E                           l293 17A8  
                         l277 1530                           l542 2898                           l606 26E2  
                         l198 2EC4                           l710 2B42                           l614 22A4  
                         l286 164A                           l543 288E                           l631 294E  
                         l711 2B36                           l295 17E0                           l287 164E  
                         l608 270A                           l632 297E                           l704 2A94  
                         l616 22D0                           l640 2522                           l296 17FC  
                         l288 1670                           l545 28CC                           l609 2748  
                         l705 2AA2                           l721 2BFE                           l617 230A  
                         l481 29F0                           l641 2554                           l289 179E  
                         l546 28B6                           l714 2B6A                           l722 2BF2  
                         l626 2392                           l618 2332                           l482 29E8  
                         l642 2564                           l298 181C                           l715 2B78  
                         l627 2386                           l491 2AC8                           l299 183E  
                         l548 28F4                           l492 2AD4                           l644 257C  
                         l549 28EA                           l573 1FB2                           l661 2668  
                         l485 2A10                           l645 258C                           l901 2DCC  
                         l582 2042                           l670 26A8                           l662 2658  
                         l486 2A1A                           l478 29C2                           l494 2AEA  
                         l638 24FA                           l902 2DC8                           l655 2D94  
                         l487 2A28                           l479 29D2                           l495 2AE2  
                         l649 2F78                           l577 1FDC                           l498 2B02  
                         l674 2FE2                           l587 2038                           l667 268C  
                         l659 25F2                           l499 2B0C                           l596 2076  
                         l588 202E                           l668 2680                           l597 206C  
                         l599 209A                  __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000  
                         _lcd 000F83                  ___awmod@sign 0006                           prod 000FF3  
   read_adc_voltage@raw_value 003C                           wreg 000FE8                   lcd_gotoxy@x 000C  
                 lcd_gotoxy@y 000B                  ___ftdiv@cntr 002D                  ___ftdiv@sign 0032  
                        l2127 29AA                          l3017 13D2                          l3009 138E  
                        l3061 1540                          l3037 14B2                          l3081 1610  
                        l3057 1530                          l3171 18DA                          l2871 2BC6  
                        l2857 2B9E                          STR_1 1077                          STR_2 1077  
                        STR_3 1083                          STR_4 108E                          u2001 250A  
                        u2130 2AEE                          u3020 1554                          _LATA 000F89  
                        u2070 29F4                          _LATB 000F8A                          _LATC 000F8B  
                        u3200 18BA                          _LATD 000F8C                          _LATE 000F8D  
                        u3050 1634                          u1700 2880                          u2420 24C0  
                        u3220 18F8                          u3060 1644                          u2350 2398  
                        u2431 26CA                          u2271 2288                          u2600 2692  
                        u3250 2FF2                          u1810 1FA4                          u3307 2F48  
                        u2451 26F2                          u2291 22B4                          u2700 2BBC  
                        u1740 28FE                          u2541 25D6                          u1910 204A  
                        u2630 2A64                          u3190 189C                          u1840 1FCE  
                        u2560 2610                          u2800 1144                          u2730 2C6C  
                        u1675 2CFE                          u1771 1F70                          u1676 2D00  
                        u2740 2C96                          u1940 207E                          u2660 2B46  
                        u1781 1F84                          u2565 2608                          u1870 200C  
                        u2910 1360                          u2920 139E                          u3297 2D26  
                        u2737 2C62                          u2747 2C8C                          u1981 24E2  
                        u2950 13D2                          u2870 1270                          u2875 1266  
                        u2990 14EA              ?_lcd_send_nibble 0001                          _main 210C  
                ___ftpack@arg 0001              _send_byte_no_lib 3002                  ___ftpack@exp 0004  
                        fsr2h 000FDA                          indf2 000FDF                          fsr1l 000FE1  
                        fsr2l 000FD9                          prodh 000FF4                          prodl 000FF3  
                        start 0300                 __CFG_IESO$OFF 000000                   main@voltage 00E8  
                _sprintf$1109 004D                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0022  
                ___param_bank 000000                  ___ftmul@sign 0023                  ___fttol@exp1 0039  
                ___fttol@lval 0035          __end_of_delay_cycles 2E98                         ?_main 0001  
             __end_of___awdiv 2A32               __end_of___ftadd 210C               __end_of___awmod 2B24  
             __end_of___ftdiv 27A0               __end_of___ftneg 2F86               __end_of___lldiv 2AB4  
             __end_of___ftmul 25C6               ___awdiv@divisor 0009               __end_of___llmod 2B8A  
             __end_of___ftsub 2DBE               __end_of___fttol 26BA               ___awdiv@counter 000B  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _SPBRG 000FAF  
     read_adc_voltage@channel 003E                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000                 ___awtoft@sign 0018  
             __end_of_dpowers 1029                         _scale 1906               __end_of_isdigit 2FEA  
             _init_adc_no_lib 3012                 ___ftpack@sign 0005                         tablat 000FF5  
                       status 000FD8       read_adc_voltage@voltage 0039               __end_of_sprintf 1906  
              __CFG_PBADEN$ON 000000               __initialization 2E98                  __end_of_main 2278  
             ??_lcd_send_byte 000A                        ??_main 0066                 ___fttol@sign1 0034  
               __activetblptr 000002          __size_of__tdiv_to_l_ 0132                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0              ___llmod@dividend 0001  
                      ?_scale 0024                        _ADRESH 000FC4                        _ADRESL 000FC3  
            ___awdiv@dividend 0007              __end_of___awtoft 2E6A              __end_of___ftpack 291E  
            __end_of___lltoft 2C48                        _INTCON 000FF2                        _SPBRGH 000FB0  
          main@Column_For_LCD 00EB              __end_of_delay_ms 2F62                __CFG_XINST$OFF 000000  
            __end_of__powers_ 1050              __end_of_lcd_init 2BEC              __end_of_lcd_putc 2CF4  
            __end_of_lcd_puts 2C9E                        ___ftge 291E                        ___wmul 2F16  
                   ??___awdiv 000B                     ??___ftadd 0034                __CFG_STVREN$ON 000000  
                   ??___awmod 0005                     ??___ftdiv 002A                     ??___ftneg 0004  
                   ??___lldiv 0009                     ??___ftmul 001B                     ??___llmod 0009  
                   ??___ftsub 0040                     ??___fttol 002F                        _fround 1D0E  
            ___awdiv@quotient 000D               ___awmod@divisor 0003               ___awmod@counter 0005  
                      _strlen 2DBE         ___ftmul@f3_as_product 001F       __end_of_init_adc_no_lib 301E  
                __pdataCOMRAM 0066                     ??_isdigit 0001                  __mediumconst 0000  
         send_string_no_lib@p 0002                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8            _send_string_no_lib 2EC2                  ?_setupSerial 0001  
                   ??_sprintf 0047                    __accesstop 0080       __end_of__initialization 2EB8  
         ?_send_string_no_lib 0002                    ___ftadd@f1 002E                    ___ftadd@f2 0031  
                  ___ftge@ff1 0001                    ___ftge@ff2 0004             ?_read_byte_no_lib 0001  
               ___rparam_used 000001                    ___ftdiv@f1 0024                    ___ftdiv@f2 0027  
                  ___ftdiv@f3 002E                    ___ftneg@f1 0001                    ___awtoft@c 0015  
          ??_read_byte_no_lib 0001                    ___ftmul@f1 0015                    ___ftmul@f2 0018  
                  ___ftsub@f1 003A                    ___ftsub@f2 003D                    ___fttol@f1 002B  
              __pcstackCOMRAM 0001         __size_of_delay_cycles 002E                    ___lltoft@c 0009  
               __end_of_scale 1D0E          ??_send_string_no_lib 0004      __end_of_send_byte_no_lib 3012  
                  __div_to_l_ 23AA     __size_of_read_adc_voltage 00D0             lcd_gotoxy@address 000D  
             __div_to_l_@exp1 000C               __div_to_l_@cntr 000B                       ??_scale 0027  
             __div_to_l_@quot 0007                  sprintf@width 0058   __end_of_read_adc_raw_no_lib 2E32  
                _delay_cycles 2E6A            __size_of_initPorts 002A                 __div_to_l_@f1 0001  
               __div_to_l_@f2 0004             read_byte_no_lib@c 0001                lcd_send_byte@n 0009  
                     ?___ftge 0001                       ?___wmul 000F              lcd_send_nibble@n 0008  
                     ?_fround 0024                     ?___awtoft 0015                     ?___ftpack 0001  
                   ?___lltoft 0009                       ?_strlen 0001              ?_init_adc_no_lib 0001  
                   ?_delay_ms 0001                    _lcd_gotoxy 2D3C                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 000F             _is_byte_available 2FEA  
           __end_of__npowers_ 1077                       __Hparam 0000                    _scale$1108 0027  
                     __Lparam 0000      __size_of_lcd_send_nibble 0022            ?_is_byte_available 0001  
             __size_of___ftge 0090                       ___awdiv 29AE                       ___ftadd 1F60  
                     ___awmod 2AB4                       ___ftdiv 26BA                       ___ftneg 2F62  
                     ___lldiv 2A32               __size_of___wmul 0026                       ___ftmul 24D2  
                     ___llmod 2B24                       ___ftsub 2D7E                       ___fttol 25C6  
                __psmallconst 1000                       __pcinit 2E98                    ??___awtoft 0018  
                  ??___ftpack 0006               __size_of_fround 0252                       __ramtop 1000  
         ??_is_byte_available 0001                    ??___lltoft 000D                       __ptext0 210C  
                     __ptext1 2DBE                       __ptext2 1098                       __ptext3 1906  
                     __ptext4 2FCC                       __ptext5 1D0E                       __ptext6 24D2  
                     __ptext7 2AB4                       __ptext8 29AE                       __ptext9 2278  
             __size_of_strlen 003A                   ?__div_to_l_ 0001             __end_of_initPorts 2F16  
                     _dpowers 1001                       _isdigit 2FCC              ___awmod@dividend 0001  
                  ??_delay_ms 0003                       _sprintf 1098                    ??_lcd_init 000B  
                  ??_lcd_putc 000E                    ??_lcd_puts 0011          end_of_initialization 2EB8  
        __size_of_setupSerial 0024                 __Lmediumconst 0000     __end_of_is_byte_available 3002  
        lcd_send_byte@cm_data 000A               ___lldiv@divisor 0005               ___lldiv@counter 000D  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postdec2 000FDD  
                     postinc0 000FEE                       postinc2 000FDE                __tdiv_to_l_@f1 0001  
              __tdiv_to_l_@f2 0004         __end_of_lcd_send_byte 2D3C              setupSerial@dummy 0001  
                     strlen@s 0001                 ??__tdiv_to_l_ 0007              _read_adc_voltage 27A0  
                 ?_lcd_gotoxy 000B                    main@Buffer 0080               _LCD_INIT_STRING 0066  
        read_adc_voltage@temp 0036                   ___ftdiv@exp 0031                     _TXSTAbits 000FAC  
         __size_of__div_to_l_ 0128                   ___ftmul@exp 001E             send_byte_no_lib@c 0001  
              __end_of___ftge 29AE                __end_of___wmul 2F3C                   _BAUDCONbits 000FB8  
               __pidataCOMRAM 3026                 delay_cycles@n 0004                 delay_cycles@x 0005  
           ??_lcd_send_nibble 0007     __size_of_read_byte_no_lib 0008                __end_of_fround 1F60  
           ?_send_byte_no_lib 0001                __end_of_strlen 2DF8           start_initialization 2E98  
          ??_send_byte_no_lib 0001           __end_of__tdiv_to_l_ 23AA    __size_of_is_byte_available 0018  
             ___llmod@divisor 0005               ___llmod@counter 0009                      ??___ftge 0007  
         __size_of_lcd_gotoxy 0042                      ??___wmul 0013  read_adc_raw_no_lib@raw_value 0005  
            __CFG_LPT1OSC$OFF 000000                      ??_fround 0027                 sprintf@tmpval 005A  
 __size_of_send_string_no_lib 002A                      ??_strlen 0003                    fround@prec 002D  
           __size_of___awtoft 0038             __size_of___ftpack 00AE             __size_of___lltoft 005C  
               __pcstackBANK0 0080             __size_of_delay_ms 0026             __size_of_lcd_init 0062  
                 sprintf@flag 0056             __size_of_lcd_putc 0056             __size_of_lcd_puts 0056  
                 sprintf@fval 0060                   sprintf@prec 0063                     _main$1105 00E4  
           __CFG_CCP2MX$PORTC 000000  __size_of_read_adc_raw_no_lib 003A                      ?___awdiv 0007  
                    ?___ftadd 002E                      ?___awmod 0001                      ?___ftdiv 0024  
                    ?___ftneg 0001                      ?___lldiv 0001                      ?___ftmul 0015  
                    ?___llmod 0001                      ?___ftsub 003A                     __npowers_ 1050  
                    ?___fttol 002B                   __tdiv_to_l_ 2278                  ??__div_to_l_ 0007  
                 __smallconst 1000                      ?_isdigit 0001                     _initPorts 2EEC  
                    ?_sprintf 0040                __size_of_scale 0408      __size_of_init_adc_no_lib 000C  
              ___wmul@product 0013                     delay_ms@i 0003                     delay_ms@n 0001  
                    _PIR1bits 000F9E            __end_of__div_to_l_ 24D2      __end_of_read_adc_voltage 2870  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 0007              _read_byte_no_lib 301E  
                  _ADCON0bits 000FC2             ___wmul@multiplier 000F                     lcd_init@i 000B  
                   lcd_putc@c 000E                     lcd_puts@s 000F                  ??_lcd_gotoxy 000C  
                  ?_initPorts 0001                 ??_setupSerial 0001                     copy_data0 2EAC  
             _lcd_send_nibble 2FAA                      __Hrparam 0000                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000            __end_of_lcd_gotoxy 2D7E              __size_of___awdiv 0084  
            __size_of___ftadd 01AC              __size_of___awmod 0070              __size_of___ftdiv 00E6  
            __size_of___ftneg 0024              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___ftsub 0040              __size_of___fttol 00F4  
                    ___awtoft 2E32                      ___ftpack 2870                   _fround$1106 002A  
                 _fround$1107 0027                      ___lltoft 2BEC                   _isdigit$755 0002  
                  sprintf@exp 005E                    sprintf@val 0052              __size_of_isdigit 001E  
                    _delay_ms 2F3C          main@LastReceivedChar 00E7                      __ptext10 23AA  
                    __ptext11 2BEC                      __ptext20 2EC2                      __ptext12 2B24  
                    __ptext21 3002                      __ptext13 2A32                      __ptext30 2C9E  
                    __ptext22 301E                      __ptext14 25C6                      __ptext31 2D3C  
                    __ptext23 27A0                      __ptext15 2D7E                      __ptext32 2B8A  
                    __ptext24 2DF8                      __ptext16 1F60                      __ptext33 2CF4  
                    __ptext25 2F16                      __ptext17 2F62                      __ptext34 2FAA  
                    __ptext26 26BA                      __ptext18 291E                      __ptext35 2E6A  
                    __ptext27 2E32                      __ptext19 2F86                      __ptext36 2F3C  
                    __ptext28 2870                      __ptext37 2FEA                      __ptext29 2C48  
                    __ptext38 3012                      __ptext39 2EEC                      __powers_ 1029  
                    _lcd_init 2B8A                      _lcd_putc 2C9E                      _lcd_puts 2C48  
            __size_of_sprintf 086E        __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001  
               __size_of_main 016C     __size_of_send_byte_no_lib 0010           __end_of_setupSerial 2FAA  
           ??_init_adc_no_lib 0001                      isdigit@c 0003                   ??_initPorts 0001  
         _read_adc_raw_no_lib 2DF8                      scale@scl 002A                     sprintf@ap 0050  
     __end_of_lcd_send_nibble 2FCC              __tdiv_to_l_@exp1 000F                     sprintf@sp 0040  
            __tdiv_to_l_@cntr 000E                ??_delay_cycles 0001              __tdiv_to_l_@quot 000A  
            ___lldiv@dividend 0001          ?_read_adc_raw_no_lib 0001    __end_of_send_string_no_lib 2EEC  
               _lcd_send_byte 2CF4                  ?__tdiv_to_l_ 0001                      sprintf@c 0065  
                    sprintf@f 0042              ___lldiv@quotient 0009                      strlen@cp 0005  
                 _setupSerial 2F86      __end_of_read_byte_no_lib 3026         ??_read_adc_raw_no_lib 0003  
